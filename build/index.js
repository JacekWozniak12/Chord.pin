!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=654)}([function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return i})),n.d(e,"c",(function(){return r})),n.d(e,"d",(function(){return s})),n.d(e,"e",(function(){return a})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return u})),n.d(e,"i",(function(){return l})),n.d(e,"h",(function(){return h})),n.d(e,"j",(function(){return p})),n.d(e,"k",(function(){return f}));const o=new WeakSet,i=new WeakMap,r=new WeakMap,s=new WeakMap,a=new WeakMap,c=new WeakMap,u=new WeakMap,l=new WeakMap,h=new WeakMap,p=new WeakMap,f=new WeakMap},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(4);const i=(t,e)=>{Object(o.a)(t,e,"channelCount"),Object(o.a)(t,e,"channelCountMode"),Object(o.a)(t,e,"channelInterpretation")}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return i}));const o=-34028234663852886e22,i=-o},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>t.context===e},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n)=>{const o=e[n];void 0!==o&&o!==t[n]&&(t[n]=o)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n)=>{const o=e[n];void 0!==o&&o!==t[n].value&&(t[n].value=o)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(10);const r=t=>Object(i.a)(o.c,t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","InvalidStateError")}catch(t){return t.code=11,t.name="InvalidStateError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(10);const r=t=>Object(i.a)(o.b,t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","NotSupportedError")}catch(t){return t.code=9,t.name="NotSupportedError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>{const n=t.get(e);if(void 0===n)throw new Error("A value with the given key could not be found.");return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(t.connect=e.connect.bind(e),t.disconnect=e.disconnect.bind(e),t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>"inputs"in t},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{const e=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const n=t.decodeAudioData(e.buffer,()=>{});return void 0!==n&&(n.catch(()=>{}),!0)}catch(t){}return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","IndexSizeError")}catch(t){return t.code=1,t.name="IndexSizeError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o)=>{for(const e of t)if(n(e)){if(o)return!1;throw Error("The set contains at least one similar element.")}return t.add(e),!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(20);const r=t=>{if(o.a.has(t))throw new Error("The AudioNode is already stored.");o.a.add(t),Object(i.a)(t).forEach(t=>t(!0))}},function(t,e,n){"use strict";n.d(e,"AudioContext",(function(){return ei})),n.d(e,"AudioWorkletNode",(function(){return ci})),n.d(e,"OfflineAudioContext",(function(){return hi})),n.d(e,"isAnyAudioContext",(function(){return pi})),n.d(e,"isAnyAudioNode",(function(){return fi})),n.d(e,"isAnyAudioParam",(function(){return di})),n.d(e,"isAnyOfflineAudioContext",(function(){return mi}));var o=n(18),i=n(47),r=n(502),s=n(503),a=n(645),c=n(504),u=n(505),l=n(506),h=n(507),p=n(508),f=n(509),d=n(510),m=n(511),y=n(512),_=n(643),g=n(513),v=n(514),b=n(515),x=n(648),w=n(516),O=n(517),T=n(518),S=n(519),C=n(520),k=n(521),A=n(522),j=n(523),D=n(524),E=n(525),M=n(526),P=n(527),R=n(528),q=n(529),I=n(530),F=n(531),N=n(532),V=n(533),L=n(649),z=n(534),B=n(535),W=n(536),U=n(650),G=n(537),Y=n(538),X=n(539),Z=n(540),Q=n(541),H=n(542),$=n(543),J=n(544),K=n(545),tt=n(546),et=n(547),nt=n(548),ot=n(549),it=n(550),rt=n(651),st=n(551),at=n(552),ct=n(14),ut=n(37),lt=n(7),ht=n(553),pt=n(554),ft=n(555),dt=n(556),mt=n(557),yt=n(558),_t=n(559),gt=n(560),vt=n(561),bt=n(562),xt=(n(563),n(564)),wt=n(565),Ot=n(566),Tt=n(567),St=n(568),Ct=n(569),kt=n(570),At=n(646),jt=n(571),Dt=n(647),Et=n(572),Mt=n(573),Pt=n(574),Rt=n(575),qt=n(652),It=n(644),Ft=n(576),Nt=n(577),Vt=n(653),Lt=n(578),zt=n(579),Bt=n(580),Wt=n(581),Ut=n(582),Gt=n(583),Yt=n(584),Xt=n(585),Zt=n(586),Qt=n(587),Ht=n(588),$t=n(589),Jt=n(590),Kt=n(591),te=n(592),ee=n(593),ne=n(594),oe=n(595),ie=n(596),re=n(597),se=n(598),ae=n(599),ce=n(9),ue=n(600),le=n(601),he=n(602),pe=n(603),fe=n(604),de=n(605),me=n(606),ye=n(607),_e=n(608),ge=n(609),ve=n(610),be=n(611),xe=n(612),we=n(613),Oe=(n(614),n(615)),Te=n(616),Se=n(617),Ce=n(618),ke=(n(619),n(620),n(621),n(622),n(623)),Ae=n(624),je=n(625),De=(n(626),n(627),n(628),n(629),n(630),n(631)),Ee=(n(632),n(48)),Me=n(633),Pe=n(634),Re=n(635),qe=n(636),Ie=n(637),Fe=n(638),Ne=n(639),Ve=n(640),Le=n(0),ze=n(33),Be=n(34),We=n(8),Ue=n(26),Ge=n(6),Ye=n(27),Xe=n(10),Ze=n(15),Qe=n(23),He=n(49),$e=n(19),Je=n(39),Ke=n(32),tn=n(13),en=(n(641),n(642)),nn=n(28);n(50),n(134);const on=Object(S.a)(new Map,new WeakMap),rn=Object(Re.a)(),sn=Object(Jt.a)(rn),an=Object(vt.a)(sn),cn=Object(Et.a)(rn),un=Object(ot.a)(an,cn,sn),ln=Object(Pt.a)(un),hn=Object(At.a)(on,ct.a,ln),pn=Object(et.a)(We.a),fn=Object(ye.a)(We.a,pn,$e.a),dn=Object(u.a)(hn,Ge.a,fn),mn=new WeakMap,yn=Object(it.a)(Le.g),_n=new WeakMap,gn=Object(H.a)(nn.a),vn=Object(yt.a)(rn),bn=Object(_t.a)(rn),xn=Object(_.a)(Object(r.a)(Le.b),mn,on,Object(at.a)(Le.h,Be.a,We.a,Ge.a,Ye.a,Qe.a),ct.a,ut.a,ce.a,Object(z.a)(ze.a,Le.h,We.a,Ge.a,Ye.a,yn,Qe.a,an),Object(U.a)(_n,We.a,Xe.a),gn,yn,vn,bn,an),wn=Object(c.a)(xn,dn,ct.a,hn,yn,an),On=new WeakSet,Tn=Object(jt.a)(rn),Sn=Object(q.a)(new Uint32Array(1)),Cn=Object(qe.a)(Sn,ct.a),kn=Object(Ie.a)(Sn),An=Object(l.a)(On,on,ce.a,Tn,sn,Object(we.a)(Tn),Cn,kn),jn=Object(ke.a)(ln),Dn=Object(Ae.a)(ln),En=Object(je.a)(ln),Mn=Object(Ne.a)(ln),Pn=Object(_e.a)(pn,Ue.a,$e.a),Rn=Object(D.a)(Pn),qn=Object(Dt.a)(on,ln,Object(Oe.a)(ln),Object(Te.a)(sn),Object(Se.a)(ln),Object(Ce.a)(ln),jn,Dn,En,en.a,Object(Fe.a)(Je.a),Mn),In=Object(me.a)(Object(nt.a)(Ue.a),Pn),Fn=Object(p.a)(Rn,qn,Ge.a,In,fn),Nn=Object(g.a)(Object(s.a)(Le.d),_n,Le.e,v.a,o.createCancelAndHoldAutomationEvent,o.createCancelScheduledValuesAutomationEvent,o.createExponentialRampToValueAutomationEvent,o.createLinearRampToValueAutomationEvent,o.createSetTargetAutomationEvent,o.createSetValueAutomationEvent,o.createSetValueCurveAutomationEvent,cn),Vn=Object(h.a)(xn,Fn,Nn,lt.a,qn,yn,an,nn.a),Ln=Object(Yt.a)(ln),zn=Object(d.a)(xn,m.a,ct.a,lt.a,Object(Mt.a)(Ln,Je.a),yn,an,fn),Bn=Object(Ft.a)(ln),Wn=Object(T.a)(Rn,Bn,Ge.a,In,fn),Un=Object(O.a)(xn,Nn,Wn,ut.a,Bn,yn,an),Gn=Object(kt.a)(Ze.a,vn),Yn=Object(Ve.a)(lt.a,ln,Gn),Xn=Object(Nt.a)(ln,Yn),Zn=Object(k.a)(Xn,Ge.a,fn),Qn=Object(C.a)(xn,Zn,Xn,yn,an),Hn=Object(Vt.a)(ln),$n=Object(j.a)(Hn,Ge.a,fn),Jn=Object(A.a)(xn,$n,Hn,yn,an),Kn=Object(zt.a)(qn,Ln,Gn),to=Object(Lt.a)(on,ln,Kn,jn,En),eo=Object(R.a)(Rn,to,Ge.a,In,fn),no=Object(P.a)(xn,Nn,eo,to,yn,an,nn.a),oo=Object(Wt.a)(ln,Ln,Gn),io=Object(Bt.a)(ln,oo,ce.a,Je.a),ro=Object(F.a)(io,Ge.a,fn),so=Object(I.a)(xn,ro,io,yn,an),ao=Object(Ut.a)(ln),co=Object(W.a)(Rn,ao,Ge.a,In,fn),uo=Object(B.a)(xn,Nn,co,ao,yn,an),lo=Object(Gt.a)(ln,ce.a),ho=Object(X.a)(Rn,lo,Ge.a,In,fn),po=Object(Y.a)(xn,Nn,ho,lo,ce.a,yn,an),fo=Object(tt.a)(Rn,Ln,Ge.a,In,fn),mo=Object(K.a)(xn,Nn,fo,Ln,yn,an),yo=Object(oe.a)(ln),_o=Object(Zt.a)(ut.a,lt.a,yo,ce.a),go=Object(ge.a)(on,Ln,yo,Object(De.a)(Ln,sn)),vo=Object(st.a)(qn,ln,Ge.a,sn,fn,go),bo=Object(Xt.a)(ln,_o),xo=Object(rt.a)(xn,bo,vo,yn,an),wo=Object(y.a)(Nn,Xn,to,yo,an),Oo=Object(St.a)(zn,wo,gn,nn.a),To=Object(Kt.a)(on,ln,jn,Dn,En,Mn),So=Object(he.a)(Rn,To,Ge.a,In,fn),Co=Object(le.a)(xn,Nn,lt.a,To,So,yn,an,nn.a),ko=Object(M.a)(qn),Ao=Object(ae.a)(ko,lt.a,ln,Ln,He.a,Gn),jo=Object(se.a)(ko,lt.a,ln,Ao,He.a,Gn,Je.a),Do=Object(ee.a)(ze.a,lt.a,ln,Xn,Ln,yo,jo,ce.a,Be.a,Gn),Eo=Object(te.a)(ln,Do),Mo=Object(fe.a)(Rn,Eo,Ge.a,In,fn),Po=Object(pe.a)(xn,Nn,Eo,Mo,yn,an),Ro=Object(ne.a)(un),qo=Object(de.a)(Ro,yn,new WeakSet),Io=Object(re.a)(Xn,Hn,Ln,jo,ce.a,Gn),Fo=Object(ie.a)(ln,Io,ce.a),No=Object(xe.a)(Rn,Fo,Ge.a,In,fn),Vo=Object(be.a)(xn,Nn,Fo,No,yn,an),Lo=Object(Pe.a)(jo,Ge.a,fn),zo=Object(Me.a)(xn,lt.a,jo,Lo,yn,an),Bo=Object(bt.a)(rn),Wo=Object($.a)(rn),Uo=Bo?Object(a.a)(i.a,ce.a,Object(Q.a)(rn),Wo,Object(J.a)(i.a),un,yn,new WeakMap,new WeakMap):void 0,Go=Object(mt.a)(cn),Yo=Object(gt.a)(Go,an),Xo=Object(L.a)(On,on,V.a,Z.a,new WeakSet,yn,Yo,an,sn,Ke.a,tn.a,Cn,kn),Zo=Object(w.a)(Uo,wn,An,Vn,Un,Qn,Jn,no,so,Xo,uo,po,mo,xo,Oo,Co,Po,qo,Vo,zo),Qo=Object(Qt.a)(ln),Ho=Object(xt.a)(xn,Qo,ce.a,yn,an),$o=Object(Ht.a)(ln),Jo=Object(wt.a)(xn,$o,ce.a,yn,an),Ko=Object($t.a)(lt.a,ln),ti=Object(Ot.a)(xn,Ko,ce.a,yn,an),ei=Object(f.a)(Zo,lt.a,ce.a,Ee.a,Ho,Jo,ti,cn),ni=Object(E.a)(ct.a),oi=Object(G.a)(ct.a),ii=Object(It.a)(mn,ni,ct.a,lt.a,Xn,Hn,to,Ln,yo,ce.a,oi,Wo,Gn),ri=Object(qt.a)(lt.a,ln,ii,ce.a,an),si=Object(Rt.a)(rn),ai=Object(x.a)(Rn,ni,qn,Xn,Hn,to,Ln,oi,Wo,Ge.a,si,sn,In,fn,go),ci=Bo?Object(b.a)(xn,Nn,ai,ri,mo,yn,an,si,nn.a):void 0,ui=(Object(Tt.a)(lt.a,ce.a,Ee.a,Oo,cn),Object(N.a)(ce.a,sn)),li=Object(ve.a)(On,on,pn,go,Ke.a,Cn,kn),hi=(Object(Ct.a)(on,lt.a,ui,Oo,li),Object(ue.a)(Zo,on,lt.a,ui,li)),pi=Object(ht.a)(Le.g,Go),fi=Object(pt.a)(Le.c,vn),di=Object(ft.a)(Le.e,bn),mi=Object(dt.a)(Le.g,an)},function(t,e,n){!function(t,e,n,o){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n,o=o&&o.hasOwnProperty("default")?o.default:o;var i=function(t,e,n){return{endTime:e,insertTime:n,type:"exponentialRampToValue",value:t}},r=function(t,e,n){return{endTime:e,insertTime:n,type:"linearRampToValue",value:t}},s=function(t,e){return{startTime:e,type:"setValue",value:t}},a=function(t,e,n){return{duration:n,startTime:e,type:"setValueCurve",values:t}},c=function(t,e,n){var o=n.startTime,i=n.target,r=n.timeConstant;return i+(e-i)*Math.exp((o-t)/r)},u=function(t){return"exponentialRampToValue"===t.type},l=function(t){return"linearRampToValue"===t.type},h=function(t){return u(t)||l(t)},p=function(t){return"setValue"===t.type},f=function(t){return"setValueCurve"===t.type},d=function t(e,n,o,i){var r=e[n];return void 0===r?i:h(r)||p(r)?r.value:f(r)?r.values[r.values.length-1]:c(o,t(e,n-1,r.startTime,i),r)},m=function(t,e,n,o,i){return void 0===n?[o.insertTime,i]:h(n)?[n.endTime,n.value]:p(n)?[n.startTime,n.value]:f(n)?[n.startTime+n.duration,n.values[n.values.length-1]]:[n.startTime,d(t,e-1,n.startTime,i)]},y=function(t){return"cancelAndHold"===t.type},_=function(t){return"cancelScheduledValues"===t.type},g=function(t){return y(t)||_(t)?t.cancelTime:u(t)||l(t)?t.endTime:t.startTime},v=function(t,e,n,o){var i=o.endTime,r=o.value;return n===r?r:0<n&&0<r||n<0&&r<0?n*Math.pow(r/n,(t-e)/(i-e)):0},b=function(t,e,n,o){return n+(t-e)/(o.endTime-e)*(o.value-n)},x=function(t,e){var n=e.duration,o=e.startTime,i=e.values;return function(t,e){var n=Math.floor(e),o=Math.ceil(e);return n===o?t[n]:(1-(e-n))*t[n]+(1-(o-e))*t[o]}(i,(t-o)/n*(i.length-1))},w=function(t){return"setTarget"===t.type},O=function(){function t(e){n(this,t),this._automationEvents=[],this._currenTime=0,this._defaultValue=e}return o(t,[{key:Symbol.iterator,value:function(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function(t){var e=g(t);if(y(t)||_(t)){var n=this._automationEvents.findIndex((function(t){return g(t)>=e})),o=this._automationEvents[n];if(-1!==n&&(this._automationEvents=this._automationEvents.slice(0,n)),y(t)){var c=this._automationEvents[this._automationEvents.length-1];if(void 0!==o&&h(o)){if(w(c))throw new Error("The internal list is malformed.");var p=f(c)?c.startTime+c.duration:g(c),d=f(c)?c.values[c.values.length-1]:c.value,m=u(o)?v(e,p,d,o):b(e,p,d,o),x=u(o)?i(m,e,this._currenTime):r(m,e,this._currenTime);this._automationEvents.push(x)}void 0!==c&&w(c)&&this._automationEvents.push(s(this.getValue(e),e)),void 0!==c&&f(c)&&c.startTime+c.duration>e&&(this._automationEvents[this._automationEvents.length-1]=a(new Float32Array([6,7]),c.startTime,e-c.startTime))}}else{var O=this._automationEvents.findIndex((function(t){return g(t)>e})),T=-1===O?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[O-1];if(void 0!==T&&f(T)&&g(T)+T.duration>e)return!1;var S=u(t)?i(t.value,t.endTime,this._currenTime):l(t)?r(t.value,e,this._currenTime):t;if(-1===O)this._automationEvents.push(S);else{if(f(t)&&e+t.duration>g(this._automationEvents[O]))return!1;this._automationEvents.splice(O,0,S)}}return!0}},{key:"flush",value:function(t){var e=this._automationEvents.findIndex((function(e){return g(e)>t}));if(e>1){var n=this._automationEvents.slice(e-1),o=n[0];w(o)&&n.unshift(s(d(this._automationEvents,e-2,o.startTime,this._defaultValue),o.startTime)),this._automationEvents=n}}},{key:"getValue",value:function(t){if(0===this._automationEvents.length)return this._defaultValue;var n=this._automationEvents[this._automationEvents.length-1],o=this._automationEvents.findIndex((function(e){return g(e)>t})),i=this._automationEvents[o],r=g(n)<=t?n:this._automationEvents[o-1];if(void 0!==r&&w(r)&&(void 0===i||!h(i)||i.insertTime>t))return c(t,d(this._automationEvents,o-2,r.startTime,this._defaultValue),r);if(void 0!==r&&p(r)&&(void 0===i||!h(i)))return r.value;if(void 0!==r&&f(r)&&(void 0===i||!h(i)||r.startTime+r.duration>t))return t<r.startTime+r.duration?x(t,r):r.values[r.values.length-1];if(void 0!==r&&h(r)&&(void 0===i||!h(i)))return r.value;if(void 0!==i&&u(i)){var s=m(this._automationEvents,o-1,r,i,this._defaultValue),a=e(s,2),y=a[0],_=a[1];return v(t,y,_,i)}if(void 0!==i&&l(i)){var O=m(this._automationEvents,o-1,r,i,this._defaultValue),T=e(O,2),S=T[0],C=T[1];return b(t,S,C,i)}return this._defaultValue}}]),t}();t.AutomationEventList=O,t.createCancelAndHoldAutomationEvent=function(t){return{cancelTime:t,type:"cancelAndHold"}},t.createCancelScheduledValuesAutomationEvent=function(t){return{cancelTime:t,type:"cancelScheduledValues"}},t.createExponentialRampToValueAutomationEvent=function(t,e){return{endTime:e,type:"exponentialRampToValue",value:t}},t.createLinearRampToValueAutomationEvent=function(t,e){return{endTime:e,type:"linearRampToValue",value:t}},t.createSetTargetAutomationEvent=function(t,e,n){return{startTime:e,target:t,timeConstant:n,type:"setTarget"}},t.createSetValueAutomationEvent=s,t.createSetValueCurveAutomationEvent=a,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(660),n(666),n(667))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(0);const i=t=>o.h.has(t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(10);const r=t=>Object(i.a)(o.i,t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(20);const r=t=>{if(!o.a.has(t))throw new Error("The AudioNode is not stored.");o.a.delete(t),Object(i.a)(t).forEach(t=>t(!1))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(24);const i=t=>Object(o.a)(t[0])},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(0);const i=t=>o.a.has(t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>"context"in t},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>"context"in t},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(10);const r=t=>Object(i.a)(o.d,t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(0),i=n(10);const r=t=>Object(i.a)(o.e,t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>{const o={value:t};return Object.defineProperties(n,{currentTarget:o,target:o}),"function"==typeof e?e.call(t,n):e.handleEvent.call(t,n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(14);const i=t=>{var e;t.getChannelData=(e=t.getChannelData,n=>{try{return e.call(t,n)}catch(t){if(12===t.code)throw Object(o.a)();throw t}})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{var e;t.start=(e=t.start,(n=0,o=0,i)=>{if("number"==typeof i&&i<0||o<0||n<0)throw new RangeError("The parameters can't be negative.");e.call(t,n,o,i)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{var e;t.stop=(e=t.stop,(n=0)=>{if(n<0)throw new RangeError("The parameter can't be negative.");e.call(t,n)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{try{t.copyToChannel(new Float32Array(1),0,-1)}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(12);const i=(t,e,n,i)=>{if(Object(o.a)(e)){const o=e.inputs[i];return t.connect(o,n,0),[o,n,0]}return t.connect(e,n,i),[e,n,i]}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(12);const i=(t,e,n,i)=>{Object(o.a)(e)?t.disconnect(e.inputs[i],n,0):t.disconnect(e,n,i)}},function(t,e,n){"use strict";function o(t,e,n,o,i){if("function"==typeof t.copyFromChannel)0===e[n].byteLength&&(e[n]=new Float32Array(128)),t.copyFromChannel(e[n],o,i);else{const r=t.getChannelData(o);if(0===e[n].byteLength)e[n]=r.slice(i,i+128);else{const t=new Float32Array(r.buffer,i*Float32Array.BYTES_PER_ELEMENT,128);e[n].set(t)}}}n.d(e,"a",(function(){return o}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>{const n=[];for(let o=0;o<t;o+=1){const t=[],i="number"==typeof e?e:e[o];for(let e=0;e<i;e+=1)t.push(new Float32Array(128));n.push(t)}return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","InvalidAccessError")}catch(t){return t.code=15,t.name="InvalidAccessError",t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Options=e.Chord=e.Note=void 0;const o=n(46),i=n(673);e.Note=class{constructor(t,e=new r,n=-1,i=null){if(this.fretboardPosition=-1,!this.isValidName(t))throw"Invalid note name";this.name=o.Frequency(t).transpose(i).toNote(),this.options=e,this.fretboardPosition=n}isValidName(t){let e=t.toUpperCase().trim().replace(/([^ABCDEFG][^#b][^0-9]|[^ABCDEFG][^0-9])/g,"");return e.length>1&&e.length<4}};e.Chord=class{constructor(t,e="",n="",o=null){this.name=e,this.notes=t,this.description=n}returnContent(){let t="";return this.notes.forEach(e=>{t=t.concat(e.name," ^ ")}),t.slice(0,t.length-2)}addChord(t){return t.notes.forEach(t=>this.notes.push(t)),this}};class r{constructor(t=.5,e=1,n=0){this._volume=.5,this._duration=1,this._delay=0;try{this.volume=Number.parseFloat(t),this.delay=Number.parseFloat(n),this.duration=Number.parseFloat(e)}catch(t){throw this.duration=1,this.delay=0,"Argument Exception - Writing default options"}}get volume(){return this._volume}get delay(){return this._delay}get duration(){return this._duration}set volume(t){var e;this._volume=null!==(e=i.Library.clamp(Number.parseFloat(t),0,1))&&void 0!==e?e:.5}set delay(t){var e;this._delay=null!==(e=i.Library.clamp(Number.parseFloat(t),0,10))&&void 0!==e?e:0}set duration(t){var e;this._duration=null!==(e=i.Library.clamp(Number.parseFloat(t),0,10))&&void 0!==e?e:1}serialize(){return JSON.stringify({volume:this.volume,duration:this.duration,delay:this.delay})}setValues(t){var e,n,o;return this.delay=null!==(e=t.delay)&&void 0!==e?e:t._delay,this.duration=null!==(n=t.duration)&&void 0!==n?n:t._duration,this.volume=null!==(o=t.volume)&&void 0!==o?o:t._volume,this}}e.Options=r},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o)=>{let i=Object.getPrototypeOf(t);for(;!i.hasOwnProperty(e);)i=Object.getPrototypeOf(i);const{get:r,set:s}=Object.getOwnPropertyDescriptor(i,e);Object.defineProperty(t,e,{get:n(r),set:o(s)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>void 0===t||"number"==typeof t||"string"==typeof t&&("balanced"===t||"interactive"===t||"playback"===t)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));class o{constructor(t){this._map=new Map(t)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(t,e=null){return this._map.forEach((n,o)=>t.call(e,n,o,this))}get(t){return this._map.get(t)}has(t){return this._map.has(t)}keys(){return this._map.keys()}values(){return this._map.values()}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i)=>{"function"==typeof t.copyToChannel?0!==e[n].byteLength&&t.copyToChannel(e[n],o,i):0!==e[n].byteLength&&t.getChannelData(o).set(e[n],i)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i,r,s,a,c,u,l)=>{const h=u.length;let p=a;for(let a=0;a<h;a+=1){let h=n[0]*u[a];for(let e=1;e<i;e+=1){const o=p-e&c-1;h+=n[e]*r[o],h-=t[e]*s[o]}for(let t=i;t<o;t+=1)h+=n[t]*r[p-t&c-1];for(let n=i;n<e;n+=1)h-=t[n]*s[p-n&c-1];r[p]=u[a],s[p]=h,p=p+1&c-1,l[a]=h}return p}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>null===t?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(t*e)))))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GUI=void 0,function(t){class e{constructor(t,e=null,n=null,o="body",i=null,r=null,s=null){this.htmlElement=document.createElement(t),this.setClassName(e).setId(n).addListener(r,s).setImage(t,i),this.children=[],""!=o&&null!=o||(o="body"),document.querySelector(o).appendChild(this.htmlElement)}setId(t){return""!=t&&null!=t&&(this.htmlElement.id=t),this}setClassName(t){return""!=t&&null!=t&&(this.htmlElement.className=t),this}setImage(t,e){return""!=e&&null!=e&&null!=e&&(this.img=e,"img"==t?this.htmlElement.setAttribute("src",this.img):this.htmlElement.style.background=`url(${this.img})`),this}clearParenting(){return this.children.forEach(t=>{this.htmlElement.removeChild(t)}),this.children=null,this}parentElements(t){return t.forEach(t=>{this.htmlElement.appendChild(t)}),this.children=this.children.concat(t),this}setText(t){return this.htmlElement.innerText=t,this}modifyAttribute(t,e){return this.htmlElement.setAttribute(t,e),this}addListener(t,e){return null!=e&&""!=t&&null!=t&&this.htmlElement.addEventListener(t,e),this}delete(){this.htmlElement.remove()}}t.Element=e;t.InputElement=class extends e{constructor(t=null,e=null,n="body",o=null,i=null,r=null){super("input",t,e,n,o,i,r)}getValue(){return this.htmlElement.value}setValue(t){return this.htmlElement.value=t,this}}}(e.GUI||(e.GUI={}))},function(t,e,n){"use strict";n.r(e),n.d(e,"getContext",(function(){return ft})),n.d(e,"setContext",(function(){return dt})),n.d(e,"Clock",(function(){return Xt})),n.d(e,"Context",(function(){return it})),n.d(e,"BaseContext",(function(){return ot})),n.d(e,"Delay",(function(){return ne})),n.d(e,"Gain",(function(){return Vt})),n.d(e,"Offline",(function(){return re})),n.d(e,"OfflineContext",(function(){return lt})),n.d(e,"Param",(function(){return Rt})),n.d(e,"ToneAudioBuffer",(function(){return ut})),n.d(e,"ToneAudioBuffers",(function(){return se})),n.d(e,"ToneAudioNode",(function(){return qt})),n.d(e,"connectSeries",(function(){return It})),n.d(e,"connect",(function(){return Ft})),n.d(e,"disconnect",(function(){return Nt})),n.d(e,"FrequencyClass",(function(){return Ct})),n.d(e,"Frequency",(function(){return jt})),n.d(e,"MidiClass",(function(){return ae})),n.d(e,"Midi",(function(){return ce})),n.d(e,"TimeClass",(function(){return Tt})),n.d(e,"Time",(function(){return St})),n.d(e,"TicksClass",(function(){return Qt})),n.d(e,"Ticks",(function(){return Ht})),n.d(e,"TransportTimeClass",(function(){return Dt})),n.d(e,"TransportTime",(function(){return Et})),n.d(e,"Emitter",(function(){return nt})),n.d(e,"IntervalTimeline",(function(){return $t})),n.d(e,"StateTimeline",(function(){return Pt})),n.d(e,"Timeline",(function(){return $})),n.d(e,"isUndef",(function(){return x})),n.d(e,"isDefined",(function(){return w})),n.d(e,"isFunction",(function(){return O})),n.d(e,"isNumber",(function(){return T})),n.d(e,"isObject",(function(){return S})),n.d(e,"isBoolean",(function(){return C})),n.d(e,"isArray",(function(){return k})),n.d(e,"isString",(function(){return A})),n.d(e,"isNote",(function(){return j})),n.d(e,"dbToGain",(function(){return gt})),n.d(e,"gainToDb",(function(){return vt})),n.d(e,"intervalToFrequencyRatio",(function(){return bt})),n.d(e,"ftom",(function(){return wt})),n.d(e,"mtof",(function(){return Ot})),n.d(e,"optionsFromArguments",(function(){return B})),n.d(e,"defaultArg",(function(){return W})),n.d(e,"Unit",(function(){return le})),n.d(e,"debug",(function(){return o})),n.d(e,"Noise",(function(){return fe})),n.d(e,"UserMedia",(function(){return ye})),n.d(e,"Oscillator",(function(){return ve})),n.d(e,"AMOscillator",(function(){return Te})),n.d(e,"FMOscillator",(function(){return Se})),n.d(e,"PulseOscillator",(function(){return Ce})),n.d(e,"FatOscillator",(function(){return ke})),n.d(e,"PWMOscillator",(function(){return Ae})),n.d(e,"OmniOscillator",(function(){return De})),n.d(e,"ToneOscillatorNode",(function(){return ge})),n.d(e,"LFO",(function(){return Re})),n.d(e,"ToneBufferSource",(function(){return pe})),n.d(e,"Player",(function(){return Fe})),n.d(e,"Players",(function(){return Ne})),n.d(e,"GrainPlayer",(function(){return Ve})),n.d(e,"Add",(function(){return Ee})),n.d(e,"Abs",(function(){return Le})),n.d(e,"AudioToGain",(function(){return we})),n.d(e,"GainToAudio",(function(){return ze})),n.d(e,"GreaterThan",(function(){return Ge})),n.d(e,"GreaterThanZero",(function(){return Ue})),n.d(e,"Multiply",(function(){return Oe})),n.d(e,"Negate",(function(){return Be})),n.d(e,"Pow",(function(){return Ye})),n.d(e,"Signal",(function(){return Bt})),n.d(e,"connectSignal",(function(){return Wt})),n.d(e,"Scale",(function(){return Me})),n.d(e,"ScaleExp",(function(){return Xe})),n.d(e,"Subtract",(function(){return We})),n.d(e,"SyncedSignal",(function(){return Ze})),n.d(e,"WaveShaper",(function(){return xe})),n.d(e,"Zero",(function(){return Pe})),n.d(e,"AMSynth",(function(){return nn})),n.d(e,"DuoSynth",(function(){return an})),n.d(e,"FMSynth",(function(){return cn})),n.d(e,"MetalSynth",(function(){return ln})),n.d(e,"MembraneSynth",(function(){return hn})),n.d(e,"MonoSynth",(function(){return sn})),n.d(e,"NoiseSynth",(function(){return pn})),n.d(e,"PluckSynth",(function(){return _n})),n.d(e,"PolySynth",(function(){return gn})),n.d(e,"Sampler",(function(){return vn})),n.d(e,"Synth",(function(){return tn})),n.d(e,"Loop",(function(){return xn})),n.d(e,"Part",(function(){return wn})),n.d(e,"Pattern",(function(){return Pn})),n.d(e,"Sequence",(function(){return Rn})),n.d(e,"ToneEvent",(function(){return bn})),n.d(e,"AutoFilter",(function(){return Nn})),n.d(e,"AutoPanner",(function(){return Ln})),n.d(e,"AutoWah",(function(){return Bn})),n.d(e,"BitCrusher",(function(){return Wn})),n.d(e,"Chebyshev",(function(){return Gn})),n.d(e,"Chorus",(function(){return Hn})),n.d(e,"Distortion",(function(){return $n})),n.d(e,"FeedbackDelay",(function(){return Kn})),n.d(e,"FrequencyShifter",(function(){return eo})),n.d(e,"Freeverb",(function(){return io})),n.d(e,"JCReverb",(function(){return co})),n.d(e,"PingPongDelay",(function(){return lo})),n.d(e,"PitchShift",(function(){return ho})),n.d(e,"Phaser",(function(){return po})),n.d(e,"Reverb",(function(){return fo})),n.d(e,"StereoWidener",(function(){return go})),n.d(e,"Tremolo",(function(){return vo})),n.d(e,"Vibrato",(function(){return bo})),n.d(e,"Analyser",(function(){return xo})),n.d(e,"Meter",(function(){return Oo})),n.d(e,"FFT",(function(){return To})),n.d(e,"DCMeter",(function(){return So})),n.d(e,"Waveform",(function(){return Co})),n.d(e,"Follower",(function(){return zn})),n.d(e,"Channel",(function(){return jo})),n.d(e,"CrossFade",(function(){return qn})),n.d(e,"Merge",(function(){return Xn})),n.d(e,"MidSideMerge",(function(){return yo})),n.d(e,"MidSideSplit",(function(){return mo})),n.d(e,"MultibandSplit",(function(){return Do})),n.d(e,"Panner",(function(){return Vn})),n.d(e,"Panner3D",(function(){return Mo})),n.d(e,"PanVol",(function(){return Ao})),n.d(e,"Volume",(function(){return oe})),n.d(e,"Solo",(function(){return ko})),n.d(e,"Split",(function(){return Yn})),n.d(e,"Compressor",(function(){return Po})),n.d(e,"Gate",(function(){return Ro})),n.d(e,"Limiter",(function(){return qo})),n.d(e,"MidSideCompressor",(function(){return Io})),n.d(e,"MultibandCompressor",(function(){return Fo})),n.d(e,"AmplitudeEnvelope",(function(){return Ke})),n.d(e,"Envelope",(function(){return Qe})),n.d(e,"FrequencyEnvelope",(function(){return rn})),n.d(e,"EQ3",(function(){return No})),n.d(e,"Filter",(function(){return on})),n.d(e,"OnePoleFilter",(function(){return mn})),n.d(e,"FeedbackCombFilter",(function(){return dn})),n.d(e,"LowpassCombFilter",(function(){return yn})),n.d(e,"Convolver",(function(){return Vo})),n.d(e,"version",(function(){return i})),n.d(e,"start",(function(){return mt})),n.d(e,"now",(function(){return Lo})),n.d(e,"immediate",(function(){return zo})),n.d(e,"Transport",(function(){return Bo})),n.d(e,"Destination",(function(){return Wo})),n.d(e,"Listener",(function(){return Uo})),n.d(e,"Draw",(function(){return Go})),n.d(e,"context",(function(){return Yo})),n.d(e,"loaded",(function(){return Xo}));var o={};n.r(o),n.d(o,"assert",(function(){return d})),n.d(o,"assertRange",(function(){return m})),n.d(o,"assertContextRunning",(function(){return y})),n.d(o,"setLogger",(function(){return g})),n.d(o,"log",(function(){return v})),n.d(o,"warn",(function(){return b}));var i="14.5.28",r=n(17),s=function(t,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function a(t,e){function n(){this.constructor=t}s(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function c(t,e,n,o){var i,r=arguments.length,s=r<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,o);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(r<3?i(s):r>3?i(e,n,s):i(e,n))||s);return r>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e,n,o){return new(n||(n=Promise))((function(i,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}))}function l(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){s.label=r[1];break}if(6===r[0]&&s.label<i[1]){s.label=i[1],i=r;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(r);break}i[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}function h(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],o=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function p(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var o,i,r=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(o=r.next()).done;)s.push(o.value)}catch(t){i={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return s}function f(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(p(arguments[e]));return t}function d(t,e){if(!t)throw new Error(e)}function m(t,e,n){if(void 0===n&&(n=1/0),!(e<=t&&t<=n))throw new RangeError("Value must be within ["+e+", "+n+"], got: "+t)}function y(t){t.isOffline||"running"===t.state||b('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}var _=console;function g(t){_=t}function v(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];_.log.apply(_,f(t))}function b(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];_.warn.apply(_,f(t))}function x(t){return void 0===t}function w(t){return!x(t)}function O(t){return"function"==typeof t}function T(t){return"number"==typeof t}function S(t){return"[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object}function C(t){return"boolean"==typeof t}function k(t){return Array.isArray(t)}function A(t){return"string"==typeof t}function j(t){return A(t)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t)}function D(){return new r.AudioContext}function E(t,e,n){return new r.OfflineAudioContext(t,e,n)}var M="object"==typeof self?self:null,P=M&&(M.hasOwnProperty("AudioContext")||M.hasOwnProperty("webkitAudioContext"));var R=function(){function t(t,e,n){this._callback=t,this._type=e,this._updateInterval=n,this._createClock()}return t.prototype._createWorker=function(){var t=new Blob(["\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  "+(1e3*this._updateInterval).toFixed(1)+";\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t"],{type:"text/javascript"}),e=URL.createObjectURL(t),n=new Worker(e);n.onmessage=this._callback.bind(this),this._worker=n},t.prototype._createTimeout=function(){var t=this;this._timeout=setTimeout((function(){t._createTimeout(),t._callback()}),1e3*this._updateInterval)},t.prototype._createClock=function(){if("worker"===this._type)try{this._createWorker()}catch(t){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()},t.prototype._disposeClock=function(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)},Object.defineProperty(t.prototype,"updateInterval",{get:function(){return this._updateInterval},set:function(t){this._updateInterval=Math.max(t,128/44100),"worker"===this._type&&this._worker.postMessage(Math.max(1e3*t,1))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this._type},set:function(t){this._disposeClock(),this._type=t,this._createClock()},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this._disposeClock()},t}();function q(t){return Object(r.isAnyAudioParam)(t)}function I(t){return Object(r.isAnyAudioNode)(t)}function F(t){return Object(r.isAnyOfflineAudioContext)(t)}function N(t){return Object(r.isAnyAudioContext)(t)}function V(t){return t instanceof AudioBuffer}function L(t,e){return"value"===t||q(e)||I(e)||V(e)}function z(t){for(var e,n,o=[],i=1;i<arguments.length;i++)o[i-1]=arguments[i];if(!o.length)return t;var r=o.shift();if(S(t)&&S(r))for(var s in r)L(s,r[s])?t[s]=r[s]:S(r[s])?(t[s]||Object.assign(t,((e={})[s]={},e)),z(t[s],r[s])):Object.assign(t,((n={})[s]=r[s],n));return z.apply(void 0,f([t],o))}function B(t,e,n,o){var i;void 0===n&&(n=[]);var r={},s=Array.from(e);S(s[0])&&o&&!Reflect.has(s[0],o)&&(Object.keys(s[0]).some((function(e){return Reflect.has(t,e)}))||(z(r,((i={})[o]=s[0],i)),n.splice(n.indexOf(o),1),s.shift()));if(1===s.length&&S(s[0]))z(r,s[0]);else for(var a=0;a<n.length;a++)w(s[a])&&(r[n[a]]=s[a]);return z(t,r)}function W(t,e){return x(t)?e:t}function U(t,e){return e.forEach((function(e){Reflect.has(t,e)&&delete t[e]})),t}
/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2019 Yotam Mann
 */var G=function(){function t(){this.debug=!1,this._wasDisposed=!1}return t.getDefaults=function(){return{}},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];(this.debug||M&&this.toString()===M.TONE_DEBUG_CLASS)&&v.apply(void 0,f([this],t))},t.prototype.dispose=function(){return this._wasDisposed=!0,this},Object.defineProperty(t.prototype,"disposed",{get:function(){return this._wasDisposed},enumerable:!0,configurable:!0}),t.prototype.toString=function(){return this.name},t.version=i,t}();function Y(t,e){return t>e+1e-6}function X(t,e){return Y(t,e)||Q(t,e)}function Z(t,e){return t+1e-6<e}function Q(t,e){return Math.abs(t-e)<1e-6}function H(t,e,n){return Math.max(Math.min(t,n),e)}var $=function(t){function e(){var n=t.call(this)||this;n.name="Timeline",n._timeline=[];var o=B(e.getDefaults(),arguments,["memory"]);return n.memory=o.memory,n.increasing=o.increasing,n}return a(e,t),e.getDefaults=function(){return{memory:1/0,increasing:!1}},Object.defineProperty(e.prototype,"length",{get:function(){return this._timeline.length},enumerable:!0,configurable:!0}),e.prototype.add=function(t){if(d(Reflect.has(t,"time"),"Timeline: events must have a time attribute"),t.time=t.time.valueOf(),this.increasing&&this.length){var e=this._timeline[this.length-1];d(X(t.time,e.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(t)}else{var n=this._search(t.time);this._timeline.splice(n+1,0,t)}if(this.length>this.memory){var o=this.length-this.memory;this._timeline.splice(0,o)}return this},e.prototype.remove=function(t){var e=this._timeline.indexOf(t);return-1!==e&&this._timeline.splice(e,1),this},e.prototype.get=function(t,e){void 0===e&&(e="time");var n=this._search(t,e);return-1!==n?this._timeline[n]:null},e.prototype.peek=function(){return this._timeline[0]},e.prototype.shift=function(){return this._timeline.shift()},e.prototype.getAfter=function(t,e){void 0===e&&(e="time");var n=this._search(t,e);return n+1<this._timeline.length?this._timeline[n+1]:null},e.prototype.getBefore=function(t){var e=this._timeline.length;if(e>0&&this._timeline[e-1].time<t)return this._timeline[e-1];var n=this._search(t);return n-1>=0?this._timeline[n-1]:null},e.prototype.cancel=function(t){if(this._timeline.length>1){var e=this._search(t);if(e>=0)if(Q(this._timeline[e].time,t)){for(var n=e;n>=0&&Q(this._timeline[n].time,t);n--)e=n;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&X(this._timeline[0].time,t)&&(this._timeline=[]);return this},e.prototype.cancelBefore=function(t){var e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this},e.prototype.previousEvent=function(t){var e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null},e.prototype._search=function(t,e){if(void 0===e&&(e="time"),0===this._timeline.length)return-1;var n=0,o=this._timeline.length,i=o;if(o>0&&this._timeline[o-1][e]<=t)return o-1;for(;n<i;){var r=Math.floor(n+(i-n)/2),s=this._timeline[r],a=this._timeline[r+1];if(Q(s[e],t)){for(var c=r;c<this._timeline.length;c++){Q(this._timeline[c][e],t)&&(r=c)}return r}if(Z(s[e],t)&&Y(a[e],t))return r;Y(s[e],t)?i=r:n=r+1}return-1},e.prototype._iterate=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this._timeline.length-1),this._timeline.slice(e,n+1).forEach(t)},e.prototype.forEach=function(t){return this._iterate(t),this},e.prototype.forEachBefore=function(t,e){var n=this._search(t);return-1!==n&&this._iterate(e,0,n),this},e.prototype.forEachAfter=function(t,e){var n=this._search(t);return this._iterate(e,n+1),this},e.prototype.forEachBetween=function(t,e,n){var o=this._search(t),i=this._search(e);return-1!==o&&-1!==i?(this._timeline[o].time!==t&&(o+=1),this._timeline[i].time===e&&(i-=1),this._iterate(n,o,i)):-1===o&&this._iterate(n,0,i),this},e.prototype.forEachFrom=function(t,e){for(var n=this._search(t);n>=0&&this._timeline[n].time>=t;)n--;return this._iterate(e,n+1),this},e.prototype.forEachAtTime=function(t,e){var n=this._search(t);return-1!==n&&this._iterate((function(n){n.time===t&&e(n)}),0,n),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._timeline=[],this},e}(G),J=[];function K(t){J.push(t)}var tt=[];function et(t){tt.push(t)}var nt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Emitter",e}return a(e,t),e.prototype.on=function(t,e){var n=this;return t.split(/\W+/).forEach((function(t){x(n._events)&&(n._events={}),n._events.hasOwnProperty(t)||(n._events[t]=[]),n._events[t].push(e)})),this},e.prototype.once=function(t,e){var n=this,o=function(){for(var i=[],r=0;r<arguments.length;r++)i[r]=arguments[r];e.apply(void 0,f(i)),n.off(t,o)};return this.on(t,o),this},e.prototype.off=function(t,e){var n=this;return t.split(/\W+/).forEach((function(o){if(x(n._events)&&(n._events={}),n._events.hasOwnProperty(t))if(x(e))n._events[t]=[];else for(var i=n._events[t],r=0;r<i.length;r++)i[r]===e&&i.splice(r,1)})),this},e.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];if(this._events&&this._events.hasOwnProperty(t))for(var o=this._events[t].slice(0),i=0,r=o.length;i<r;i++)o[i].apply(this,e);return this},e.mixin=function(t){["on","once","off","emit"].forEach((function(n){var o=Object.getOwnPropertyDescriptor(e.prototype,n);Object.defineProperty(t.prototype,n,o)}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._events=void 0,this},e}(G),ot=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isOffline=!1,e}return a(e,t),e}(nt),it=function(t){function e(){var n=t.call(this)||this;n.name="Context",n._constants=new Map,n._timeouts=new $,n._timeoutIds=0,n._initialized=!1,n.isOffline=!1,n._workletModules=new Map;var o=B(e.getDefaults(),arguments,["context"]);return o.context?n._context=o.context:n._context=D(),n._latencyHint=o.latencyHint,n.lookAhead=o.lookAhead,n._ticker=new R(n.emit.bind(n,"tick"),o.clockSource,o.updateInterval),n.on("tick",n._timeoutLoop.bind(n)),n._context.onstatechange=function(){n.emit("statechange",n.state)},n}return a(e,t),e.getDefaults=function(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}},e.prototype.initialize=function(){var t;return this._initialized||(t=this,J.forEach((function(e){return e(t)})),this._initialized=!0),this},e.prototype.createAnalyser=function(){return this._context.createAnalyser()},e.prototype.createOscillator=function(){return this._context.createOscillator()},e.prototype.createBufferSource=function(){return this._context.createBufferSource()},e.prototype.createBiquadFilter=function(){return this._context.createBiquadFilter()},e.prototype.createBuffer=function(t,e,n){return this._context.createBuffer(t,e,n)},e.prototype.createChannelMerger=function(t){return this._context.createChannelMerger(t)},e.prototype.createChannelSplitter=function(t){return this._context.createChannelSplitter(t)},e.prototype.createConstantSource=function(){return this._context.createConstantSource()},e.prototype.createConvolver=function(){return this._context.createConvolver()},e.prototype.createDelay=function(t){return this._context.createDelay(t)},e.prototype.createDynamicsCompressor=function(){return this._context.createDynamicsCompressor()},e.prototype.createGain=function(){return this._context.createGain()},e.prototype.createIIRFilter=function(t,e){return this._context.createIIRFilter(t,e)},e.prototype.createPanner=function(){return this._context.createPanner()},e.prototype.createPeriodicWave=function(t,e,n){return this._context.createPeriodicWave(t,e,n)},e.prototype.createStereoPanner=function(){return this._context.createStereoPanner()},e.prototype.createWaveShaper=function(){return this._context.createWaveShaper()},e.prototype.createMediaStreamSource=function(t){if(N(this._context))return this._context.createMediaStreamSource(t);throw new Error("Only available on online audio context")},e.prototype.decodeAudioData=function(t){return this._context.decodeAudioData(t)},Object.defineProperty(e.prototype,"currentTime",{get:function(){return this._context.currentTime},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return this._context.state},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sampleRate",{get:function(){return this._context.sampleRate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"listener",{get:function(){return this.initialize(),this._listener},set:function(t){d(!this._initialized,"The listener cannot be set after initialization."),this._listener=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"transport",{get:function(){return this.initialize(),this._transport},set:function(t){d(!this._initialized,"The transport cannot be set after initialization."),this._transport=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"draw",{get:function(){return this.initialize(),this._draw},set:function(t){d(!this._initialized,"Draw cannot be set after initialization."),this._draw=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"destination",{get:function(){return this.initialize(),this._destination},set:function(t){d(!this._initialized,"The destination cannot be set after initialization."),this._destination=t},enumerable:!0,configurable:!0}),e.prototype.createAudioWorkletNode=function(t,e){return function(t,e,n){return d(w(r.AudioWorkletNode),"This node only works in a secure context (https or localhost)"),new r.AudioWorkletNode(t,e,n)}(this.rawContext,t,e)},e.prototype.addAudioWorkletModule=function(t,e){return u(this,void 0,void 0,(function(){return l(this,(function(n){switch(n.label){case 0:return d(w(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(e)||this._workletModules.set(e,this.rawContext.audioWorklet.addModule(t)),[4,this._workletModules.get(e)];case 1:return n.sent(),[2]}}))}))},e.prototype.workletsAreReady=function(){return u(this,void 0,void 0,(function(){var t;return l(this,(function(e){switch(e.label){case 0:return t=[],this._workletModules.forEach((function(e){return t.push(e)})),[4,Promise.all(t)];case 1:return e.sent(),[2]}}))}))},Object.defineProperty(e.prototype,"updateInterval",{get:function(){return this._ticker.updateInterval},set:function(t){this._ticker.updateInterval=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"clockSource",{get:function(){return this._ticker.type},set:function(t){this._ticker.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"latencyHint",{get:function(){return this._latencyHint},set:function(t){var e=0;if(this._latencyHint=t,A(t))switch(t){case"interactive":e=.1;break;case"playback":e=.8;break;case"balanced":e=.25;break;case"fastest":e=.01}this.lookAhead=e,this.updateInterval=e/2},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rawContext",{get:function(){return this._context},enumerable:!0,configurable:!0}),e.prototype.now=function(){return this._context.currentTime+this.lookAhead},e.prototype.immediate=function(){return this._context.currentTime},e.prototype.resume=function(){return"suspended"===this._context.state&&N(this._context)?this._context.resume():Promise.resolve()},e.prototype.close=function(){return u(this,void 0,void 0,(function(){return l(this,(function(t){switch(t.label){case 0:return N(this._context)?[4,this._context.close()]:[3,2];case 1:t.sent(),t.label=2;case 2:return this._initialized&&(e=this,tt.forEach((function(t){return t(e)}))),[2]}var e}))}))},e.prototype.getConstant=function(t){if(this._constants.has(t))return this._constants.get(t);for(var e=this._context.createBuffer(1,128,this._context.sampleRate),n=e.getChannelData(0),o=0;o<n.length;o++)n[o]=t;var i=this._context.createBufferSource();return i.channelCount=1,i.channelCountMode="explicit",i.buffer=e,i.loop=!0,i.start(0),this._constants.set(t,i),i},e.prototype.dispose=function(){var e=this;return t.prototype.dispose.call(this),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map((function(t){return e._constants[t].disconnect()})),this},e.prototype._timeoutLoop=function(){for(var t=this.now(),e=this._timeouts.peek();this._timeouts.length&&e&&e.time<=t;)e.callback(),this._timeouts.shift(),e=this._timeouts.peek()},e.prototype.setTimeout=function(t,e){this._timeoutIds++;var n=this.now();return this._timeouts.add({callback:t,id:this._timeoutIds,time:n+e}),this._timeoutIds},e.prototype.clearTimeout=function(t){var e=this;return this._timeouts.forEach((function(n){n.id===t&&e._timeouts.remove(n)})),this},e.prototype.clearInterval=function(t){return this.clearTimeout(t)},e.prototype.setInterval=function(t,e){var n=this,o=++this._timeoutIds,i=function(){var r=n.now();n._timeouts.add({callback:function(){t(),i()},id:o,time:r+e})};return i(),o},e}(ot),rt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.lookAhead=0,e.latencyHint=0,e.isOffline=!1,e}return a(e,t),e.prototype.createAnalyser=function(){return{}},e.prototype.createOscillator=function(){return{}},e.prototype.createBufferSource=function(){return{}},e.prototype.createBiquadFilter=function(){return{}},e.prototype.createBuffer=function(t,e,n){return{}},e.prototype.createChannelMerger=function(t){return{}},e.prototype.createChannelSplitter=function(t){return{}},e.prototype.createConstantSource=function(){return{}},e.prototype.createConvolver=function(){return{}},e.prototype.createDelay=function(t){return{}},e.prototype.createDynamicsCompressor=function(){return{}},e.prototype.createGain=function(){return{}},e.prototype.createIIRFilter=function(t,e){return{}},e.prototype.createPanner=function(){return{}},e.prototype.createPeriodicWave=function(t,e,n){return{}},e.prototype.createStereoPanner=function(){return{}},e.prototype.createWaveShaper=function(){return{}},e.prototype.createMediaStreamSource=function(t){return{}},e.prototype.decodeAudioData=function(t){return Promise.resolve({})},e.prototype.createAudioWorkletNode=function(t,e){return{}},Object.defineProperty(e.prototype,"rawContext",{get:function(){return{}},enumerable:!0,configurable:!0}),e.prototype.addAudioWorkletModule=function(t,e){return u(this,void 0,void 0,(function(){return l(this,(function(t){return[2,Promise.resolve()]}))}))},e.prototype.resume=function(){return Promise.resolve()},e.prototype.setTimeout=function(t,e){return 0},e.prototype.clearTimeout=function(t){return this},e.prototype.setInterval=function(t,e){return 0},e.prototype.clearInterval=function(t){return this},e.prototype.getConstant=function(t){return{}},Object.defineProperty(e.prototype,"currentTime",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sampleRate",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"listener",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"transport",{get:function(){return{}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"draw",{get:function(){return{}},set:function(t){},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"destination",{get:function(){return{}},set:function(t){},enumerable:!0,configurable:!0}),e.prototype.now=function(){return 0},e.prototype.immediate=function(){return 0},e}(ot);function st(t,e){k(e)?e.forEach((function(e){return st(t,e)})):Object.defineProperty(t,e,{enumerable:!0,writable:!1})}function at(t,e){k(e)?e.forEach((function(e){return at(t,e)})):Object.defineProperty(t,e,{writable:!0})}var ct=function(){},ut=function(t){function e(){var n=t.call(this)||this;n.name="ToneAudioBuffer",n.onload=ct;var o=B(e.getDefaults(),arguments,["url","onload","onerror"]);return n.reverse=o.reverse,n.onload=o.onload,o.url&&V(o.url)||o.url instanceof e?n.set(o.url):A(o.url)&&n.load(o.url).catch(o.onerror),n}return a(e,t),e.getDefaults=function(){return{onerror:ct,onload:ct,reverse:!1}},Object.defineProperty(e.prototype,"sampleRate",{get:function(){return this._buffer?this._buffer.sampleRate:ft().sampleRate},enumerable:!0,configurable:!0}),e.prototype.set=function(t){var n=this;return t instanceof e?t.loaded?this._buffer=t.get():t.onload=function(){n.set(t),n.onload(n)}:this._buffer=t,this._reversed&&this._reverse(),this},e.prototype.get=function(){return this._buffer},e.prototype.load=function(t){return u(this,void 0,void 0,(function(){var n,o,i,r;return l(this,(function(s){switch(s.label){case 0:n=e.load(t),e.downloads.push(n),s.label=1;case 1:return s.trys.push([1,3,,4]),[4,n];case 2:return o=s.sent(),this.set(o),this.onload(this),[3,4];case 3:throw i=s.sent(),r=e.downloads.indexOf(n),e.downloads.splice(r,1),i;case 4:return[2,this]}}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._buffer=void 0,this},e.prototype.fromArray=function(t){for(var e=k(t)&&t[0].length>0,n=e?t.length:1,o=e?t[0].length:t.length,i=ft(),r=i.createBuffer(n,o,i.sampleRate),s=e||1!==n?t:[t],a=0;a<n;a++)r.copyToChannel(s[a],a);return this._buffer=r,this},e.prototype.toMono=function(t){if(T(t))this.fromArray(this.toArray(t));else{for(var e=new Float32Array(this.length),n=this.numberOfChannels,o=0;o<n;o++)for(var i=this.toArray(o),r=0;r<i.length;r++)e[r]+=i[r];e=e.map((function(t){return t/n})),this.fromArray(e)}return this},e.prototype.toArray=function(t){if(T(t))return this.getChannelData(t);if(1===this.numberOfChannels)return this.toArray(0);for(var e=[],n=0;n<this.numberOfChannels;n++)e[n]=this.getChannelData(n);return e},e.prototype.getChannelData=function(t){return this._buffer?this._buffer.getChannelData(t):new Float32Array(0)},e.prototype.slice=function(t,n){void 0===n&&(n=this.duration);var o=Math.floor(t*this.sampleRate),i=Math.floor(n*this.sampleRate);d(o<i,"The start time must be less than the end time");for(var r=i-o,s=ft().createBuffer(this.numberOfChannels,r,this.sampleRate),a=0;a<this.numberOfChannels;a++)s.copyToChannel(this.getChannelData(a).subarray(o,i),a);return new e(s)},e.prototype._reverse=function(){if(this.loaded)for(var t=0;t<this.numberOfChannels;t++)this.getChannelData(t).reverse();return this},Object.defineProperty(e.prototype,"loaded",{get:function(){return this.length>0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"duration",{get:function(){return this._buffer?this._buffer.duration:0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._buffer?this._buffer.length:0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"numberOfChannels",{get:function(){return this._buffer?this._buffer.numberOfChannels:0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"reverse",{get:function(){return this._reversed},set:function(t){this._reversed!==t&&(this._reversed=t,this._reverse())},enumerable:!0,configurable:!0}),e.fromArray=function(t){return(new e).fromArray(t)},e.fromUrl=function(t){return u(this,void 0,void 0,(function(){return l(this,(function(n){switch(n.label){case 0:return[4,(new e).load(t)];case 1:return[2,n.sent()]}}))}))},e.load=function(t){return u(this,void 0,void 0,(function(){var n,o,i,r,s,a,c,u,p,f,d;return l(this,(function(l){switch(l.label){case 0:if(n=t.match(/\[(.+\|?)+\]$/)){o=n[1].split("|"),i=o[0];try{for(r=h(o),s=r.next();!s.done;s=r.next())if(a=s.value,e.supportsType(a)){i=a;break}}catch(t){f={error:t}}finally{try{s&&!s.done&&(d=r.return)&&d.call(r)}finally{if(f)throw f.error}}t=t.replace(n[0],i)}return c=""===e.baseUrl||e.baseUrl.endsWith("/")?e.baseUrl:e.baseUrl+"/",[4,fetch(c+t)];case 1:if(!(u=l.sent()).ok)throw new Error("could not load url: "+t);return[4,u.arrayBuffer()];case 2:return p=l.sent(),[4,ft().decodeAudioData(p)];case 3:return[2,l.sent()]}}))}))},e.supportsType=function(t){var e=t.split("."),n=e[e.length-1];return""!==document.createElement("audio").canPlayType("audio/"+n)},e.loaded=function(){return u(this,void 0,void 0,(function(){var t,n,o,i,r;return l(this,(function(s){switch(s.label){case 0:s.trys.push([0,5,6,7]),t=h(e.downloads),n=t.next(),s.label=1;case 1:return n.done?[3,4]:[4,n.value];case 2:s.sent(),s.label=3;case 3:return n=t.next(),[3,1];case 4:return[3,7];case 5:return o=s.sent(),i={error:o},[3,7];case 6:try{n&&!n.done&&(r=t.return)&&r.call(t)}finally{if(i)throw i.error}return[7];case 7:return[2]}}))}))},e.baseUrl="",e.downloads=[],e}(G),lt=function(t){function e(){var e=t.call(this,{clockSource:"offline",context:F(arguments[0])?arguments[0]:E(arguments[0],arguments[1]*arguments[2],arguments[2]),lookAhead:0,updateInterval:F(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]})||this;return e.name="OfflineContext",e._currentTime=0,e.isOffline=!0,e._duration=F(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1],e}return a(e,t),e.prototype.now=function(){return this._currentTime},Object.defineProperty(e.prototype,"currentTime",{get:function(){return this._currentTime},enumerable:!0,configurable:!0}),e.prototype._renderClock=function(t){return u(this,void 0,void 0,(function(){var e,n;return l(this,(function(o){switch(o.label){case 0:e=0,o.label=1;case 1:return this._duration-this._currentTime>=0?(this.emit("tick"),this._currentTime+=128/this.sampleRate,e++,n=Math.floor(this.sampleRate/128),t&&e%n==0?[4,new Promise((function(t){return setTimeout(t,1)}))]:[3,3]):[3,4];case 2:o.sent(),o.label=3;case 3:return[3,1];case 4:return[2]}}))}))},e.prototype.render=function(t){return void 0===t&&(t=!0),u(this,void 0,void 0,(function(){var e;return l(this,(function(n){switch(n.label){case 0:return[4,this.workletsAreReady()];case 1:return n.sent(),[4,this._renderClock(t)];case 2:return n.sent(),[4,this._context.startRendering()];case 3:return e=n.sent(),[2,new ut(e)]}}))}))},e.prototype.close=function(){return Promise.resolve()},e}(it),ht=new rt,pt=ht;function ft(){return pt===ht&&P&&dt(new it),pt}function dt(t){pt=N(t)?new it(t):F(t)?new lt(t):t}function mt(){return pt.resume()}if(M&&!M.TONE_SILENCE_LOGGING){var yt="v";"dev"===i&&(yt="");var _t=" * Tone.js "+yt+i+" * ";console.log("%c"+_t,"background: #000; color: #fff")}function gt(t){return Math.pow(10,t/20)}function vt(t){return Math.log(t)/Math.LN10*20}function bt(t){return Math.pow(2,t/12)}var xt=440;function wt(t){return Math.round(function(t){return 69+12*Math.log2(t/xt)}(t))}function Ot(t){return xt*Math.pow(2,(t-69)/12)}var Tt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="TimeClass",e}return a(e,t),e.prototype._getExpressions=function(){var n=this;return Object.assign(t.prototype._getExpressions.call(this),{now:{method:function(t){return n._now()+new n.constructor(n.context,t).valueOf()},regexp:/^\+(.+)/},quantize:{method:function(t){var o=new e(n.context,t).valueOf();return n._secondsToUnits(n.context.transport.nextSubdivision(o))},regexp:/^@(.+)/}})},e.prototype.quantize=function(t,e){void 0===e&&(e=1);var n=new this.constructor(this.context,t).valueOf(),o=this.valueOf();return o+(Math.round(o/n)*n-o)*e},e.prototype.toNotation=function(){for(var t=this,n=this.toSeconds(),o=["1m"],i=1;i<9;i++){var r=Math.pow(2,i);o.push(r+"n."),o.push(r+"n"),o.push(r+"t")}o.push("0");var s=o[0],a=new e(this.context,o[0]).toSeconds();return o.forEach((function(o){var i=new e(t.context,o).toSeconds();Math.abs(i-n)<Math.abs(a-n)&&(s=o,a=i)})),s},e.prototype.toBarsBeatsSixteenths=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;e=parseFloat(e.toFixed(4));var n=Math.floor(e/this._getTimeSignature()),o=e%1*4;e=Math.floor(e)%this._getTimeSignature();var i=o.toString();return i.length>3&&(o=parseFloat(parseFloat(i).toFixed(3))),[n,e,o].join(":")},e.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())},e.prototype.toSeconds=function(){return this.valueOf()},e.prototype.toMidi=function(){return wt(this.toFrequency())},e.prototype._now=function(){return this.context.now()},e}(function(t){function e(e,n,o){var i=t.call(this)||this;return i.defaultUnits="s",i._val=n,i._units=o,i.context=e,i._expressions=i._getExpressions(),i}return a(e,t),e.prototype._getExpressions=function(){var t=this;return{hz:{method:function(e){return t._frequencyToUnits(parseFloat(e))},regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:function(e){return t._ticksToUnits(parseInt(e,10))},regexp:/^(\d+)i$/i},m:{method:function(e){return t._beatsToUnits(parseInt(e,10)*t._getTimeSignature())},regexp:/^(\d+)m$/i},n:{method:function(e,n){var o=parseInt(e,10),i="."===n?1.5:1;return 1===o?t._beatsToUnits(t._getTimeSignature())*i:t._beatsToUnits(4/o)*i},regexp:/^(\d+)n(\.?)$/i},number:{method:function(e){return t._expressions[t.defaultUnits].method.call(t,e)},regexp:/^(\d+(?:\.\d+)?)$/},s:{method:function(e){return t._secondsToUnits(parseFloat(e))},regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:function(e){return parseInt(e,10)/t.context.sampleRate},regexp:/^(\d+)samples$/},t:{method:function(e){var n=parseInt(e,10);return t._beatsToUnits(8/(3*Math.floor(n)))},regexp:/^(\d+)t$/i},tr:{method:function(e,n,o){var i=0;return e&&"0"!==e&&(i+=t._beatsToUnits(t._getTimeSignature()*parseFloat(e))),n&&"0"!==n&&(i+=t._beatsToUnits(parseFloat(n))),o&&"0"!==o&&(i+=t._beatsToUnits(parseFloat(o)/4)),i},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}},e.prototype.valueOf=function(){if(this._val instanceof e&&this.fromType(this._val),x(this._val))return this._noArg();if(A(this._val)&&x(this._units)){for(var t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(S(this._val)){var n=0;for(var o in this._val)if(w(this._val[o])){var i=this._val[o];n+=new this.constructor(this.context,o).valueOf()*i}return n}if(w(this._units)){var r=this._expressions[this._units],s=this._val.toString().trim().match(r.regexp);return s?r.method.apply(this,s.slice(1)):r.method.call(this,this._val)}return A(this._val)?parseFloat(this._val):this._val},e.prototype._frequencyToUnits=function(t){return 1/t},e.prototype._beatsToUnits=function(t){return 60/this._getBpm()*t},e.prototype._secondsToUnits=function(t){return t},e.prototype._ticksToUnits=function(t){return t*this._beatsToUnits(1)/this._getPPQ()},e.prototype._noArg=function(){return this._now()},e.prototype._getBpm=function(){return this.context.transport.bpm.value},e.prototype._getTimeSignature=function(){return this.context.transport.timeSignature},e.prototype._getPPQ=function(){return this.context.transport.PPQ},e.prototype.fromType=function(t){switch(this._units=void 0,this.defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi()}return this},e.prototype.toFrequency=function(){return 1/this.toSeconds()},e.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate},e.prototype.toMilliseconds=function(){return 1e3*this.toSeconds()},e}(G));function St(t,e){return new Tt(ft(),t,e)}var Ct=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Frequency",e.defaultUnits="hz",e}return a(e,t),Object.defineProperty(e,"A4",{get:function(){return xt},set:function(t){!function(t){xt=t}(t)},enumerable:!0,configurable:!0}),e.prototype._getExpressions=function(){return Object.assign({},t.prototype._getExpressions.call(this),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method:function(t){return"midi"===this.defaultUnits?t:e.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function(t,n){var o=kt[t.toLowerCase()]+12*(parseInt(n,10)+1);return"midi"===this.defaultUnits?o:e.mtof(o)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method:function(t,e,n){var o=1;return t&&"0"!==t&&(o*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(o*=this._beatsToUnits(parseFloat(e))),n&&"0"!==n&&(o*=this._beatsToUnits(parseFloat(n)/4)),o}}})},e.prototype.transpose=function(t){return new e(this.context,this.valueOf()*bt(t))},e.prototype.harmonize=function(t){var e=this;return t.map((function(t){return e.transpose(t)}))},e.prototype.toMidi=function(){return wt(this.valueOf())},e.prototype.toNote=function(){var t=this.toFrequency(),n=Math.log2(t/e.A4),o=Math.round(12*n)+57,i=Math.floor(o/12);return i<0&&(o+=-12*i),At[o%12]+i.toString()},e.prototype.toSeconds=function(){return 1/t.prototype.toSeconds.call(this)},e.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*this._getPPQ())},e.prototype._noArg=function(){return 0},e.prototype._frequencyToUnits=function(t){return t},e.prototype._ticksToUnits=function(t){return 1/(60*t/(this._getBpm()*this._getPPQ()))},e.prototype._beatsToUnits=function(e){return 1/t.prototype._beatsToUnits.call(this,e)},e.prototype._secondsToUnits=function(t){return 1/t},e.mtof=function(t){return Ot(t)},e.ftom=function(t){return wt(t)},e}(Tt),kt={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},At=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];function jt(t,e){return new Ct(ft(),t,e)}var Dt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="TransportTime",e}return a(e,t),e.prototype._now=function(){return this.context.transport.seconds},e}(Tt);function Et(t,e){return new Dt(ft(),t,e)}var Mt=function(t){function e(){var n=t.call(this)||this,o=B(e.getDefaults(),arguments,["context"]);return n.defaultContext?n.context=n.defaultContext:n.context=o.context,n}return a(e,t),e.getDefaults=function(){return{context:ft()}},e.prototype.now=function(){return this.context.currentTime+this.context.lookAhead},e.prototype.immediate=function(){return this.context.currentTime},Object.defineProperty(e.prototype,"sampleTime",{get:function(){return 1/this.context.sampleRate},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"blockTime",{get:function(){return 128/this.context.sampleRate},enumerable:!0,configurable:!0}),e.prototype.toSeconds=function(t){return new Tt(this.context,t).toSeconds()},e.prototype.toFrequency=function(t){return new Ct(this.context,t).toFrequency()},e.prototype.toTicks=function(t){return new Dt(this.context,t).toTicks()},e.prototype._getPartialProperties=function(t){var e=this.get();return Object.keys(e).forEach((function(n){x(t[n])&&delete e[n]})),e},e.prototype.get=function(){var t=this,n=this.constructor.getDefaults();return Object.keys(n).forEach((function(o){if(Reflect.has(t,o)){var i=t[o];w(i)&&w(i.value)&&w(i.setValueAtTime)?n[o]=i.value:i instanceof e?n[o]=i._getPartialProperties(n[o]):k(i)||T(i)||A(i)||C(i)?n[o]=i:delete n[o]}})),n},e.prototype.set=function(t){var n=this;return Object.keys(t).forEach((function(o){Reflect.has(n,o)&&w(n[o])&&(n[o]&&w(n[o].value)&&w(n[o].setValueAtTime)?n[o].value!==t[o]&&(n[o].value=t[o]):n[o]instanceof e?n[o].set(t[o]):n[o]=t[o])})),this},e}(G),Pt=function(t){function e(e){void 0===e&&(e="stopped");var n=t.call(this)||this;return n.name="StateTimeline",n._initial=e,n.setStateAtTime(n._initial,0),n}return a(e,t),e.prototype.getValueAtTime=function(t){var e=this.get(t);return null!==e?e.state:this._initial},e.prototype.setStateAtTime=function(t,e,n){return m(e,0),this.add(Object.assign({},n,{state:t,time:e})),this},e.prototype.getLastState=function(t,e){for(var n=this._search(e);n>=0;n--){var o=this._timeline[n];if(o.state===t)return o}},e.prototype.getNextState=function(t,e){var n=this._search(e);if(-1!==n)for(var o=n;o<this._timeline.length;o++){var i=this._timeline[o];if(i.state===t)return i}},e}($),Rt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["param","units","convert"]))||this;n.name="Param",n.overridden=!1,n._minOutput=1e-7;var o=B(e.getDefaults(),arguments,["param","units","convert"]);for(d(w(o.param)&&(q(o.param)||o.param instanceof e),"param must be an AudioParam");!q(o.param);)o.param=o.param._param;return n._swappable=!!w(o.swappable)&&o.swappable,n._swappable?(n.input=n.context.createGain(),n._param=o.param,n.input.connect(n._param)):n._param=n.input=o.param,n._events=new $(1e3),n._initialValue=n._param.defaultValue,n.units=o.units,n.convert=o.convert,n._minValue=o.minValue,n._maxValue=o.maxValue,w(o.value)&&o.value!==n._toType(n._initialValue)&&n.setValueAtTime(o.value,0),n}return a(e,t),e.getDefaults=function(){return Object.assign(Mt.getDefaults(),{convert:!0,units:"number"})},Object.defineProperty(e.prototype,"value",{get:function(){var t=this.now();return this.getValueAtTime(t)},set:function(t){this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minValue",{get:function(){return w(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxValue",{get:function(){return w(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue},enumerable:!0,configurable:!0}),e.prototype._is=function(t,e){return this.units===e},e.prototype._assertRange=function(t){return w(this.maxValue)&&w(this.minValue)&&m(t,this._fromType(this.minValue),this._fromType(this.maxValue)),t},e.prototype._fromType=function(t){return this.convert&&!this.overridden?this._is(t,"time")?this.toSeconds(t):this._is(t,"decibels")?gt(t):this._is(t,"frequency")?this.toFrequency(t):t:this.overridden?0:t},e.prototype._toType=function(t){return this.convert&&"decibels"===this.units?vt(t):t},e.prototype.setValueAtTime=function(t,e){var n=this.toSeconds(e),o=this._fromType(t);return d(isFinite(o)&&isFinite(n),"Invalid argument(s) to setValueAtTime: "+JSON.stringify(t)+", "+JSON.stringify(e)),this._assertRange(o),this.log(this.units,"setValueAtTime",t,n),this._events.add({time:n,type:"setValueAtTime",value:o}),this._param.setValueAtTime(o,n),this},e.prototype.getValueAtTime=function(t){var e=Math.max(this.toSeconds(t),0),n=this._events.getAfter(e),o=this._events.get(e),i=this._initialValue;if(null===o)i=this._initialValue;else if("setTargetAtTime"!==o.type||null!==n&&"setValueAtTime"!==n.type)if(null===n)i=o.value;else if("linearRampToValueAtTime"===n.type||"exponentialRampToValueAtTime"===n.type){var r=o.value;if("setTargetAtTime"===o.type)r=null===(s=this._events.getBefore(o.time))?this._initialValue:s.value;i="linearRampToValueAtTime"===n.type?this._linearInterpolate(o.time,r,n.time,n.value,e):this._exponentialInterpolate(o.time,r,n.time,n.value,e)}else i=o.value;else{var s,a=void 0;a=null===(s=this._events.getBefore(o.time))?this._initialValue:s.value,"setTargetAtTime"===o.type&&(i=this._exponentialApproach(o.time,a,o.value,o.constant,e))}return this._toType(i)},e.prototype.setRampPoint=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===this._fromType(e)&&(e=this._toType(this._minOutput)),this.setValueAtTime(e,t),this},e.prototype.linearRampToValueAtTime=function(t,e){var n=this._fromType(t),o=this.toSeconds(e);return d(isFinite(n)&&isFinite(o),"Invalid argument(s) to linearRampToValueAtTime: "+JSON.stringify(t)+", "+JSON.stringify(e)),this._assertRange(n),this._events.add({time:o,type:"linearRampToValueAtTime",value:n}),this.log(this.units,"linearRampToValueAtTime",t,o),this._param.linearRampToValueAtTime(n,o),this},e.prototype.exponentialRampToValueAtTime=function(t,e){var n=this._fromType(t);n=Math.max(this._minOutput,n),this._assertRange(n);var o=this.toSeconds(e);return d(isFinite(n)&&isFinite(o),"Invalid argument(s) to exponentialRampToValueAtTime: "+JSON.stringify(t)+", "+JSON.stringify(e)),this._events.add({time:o,type:"exponentialRampToValueAtTime",value:n}),this.log(this.units,"exponentialRampToValueAtTime",t,o),this._param.exponentialRampToValueAtTime(n,o),this},e.prototype.exponentialRampTo=function(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialRampToValueAtTime(t,n+this.toSeconds(e)),this},e.prototype.linearRampTo=function(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.linearRampToValueAtTime(t,n+this.toSeconds(e)),this},e.prototype.targetRampTo=function(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialApproachValueAtTime(t,n,e),this},e.prototype.exponentialApproachValueAtTime=function(t,e,n){e=this.toSeconds(e),n=this.toSeconds(n);var o=Math.log(n+1)/Math.log(200);return this.setTargetAtTime(t,e,o),this.cancelAndHoldAtTime(e+.9*n),this.linearRampToValueAtTime(t,e+n),this},e.prototype.setTargetAtTime=function(t,e,n){var o=this._fromType(t);d(isFinite(n)&&n>0,"timeConstant must be a number greater than 0");var i=this.toSeconds(e);return this._assertRange(o),d(isFinite(o)&&isFinite(i),"Invalid argument(s) to setTargetAtTime: "+JSON.stringify(t)+", "+JSON.stringify(e)),this._events.add({constant:n,time:i,type:"setTargetAtTime",value:o}),this.log(this.units,"setTargetAtTime",t,i,n),this._param.setTargetAtTime(o,i,n),this},e.prototype.setValueCurveAtTime=function(t,e,n,o){void 0===o&&(o=1),n=this.toSeconds(n),e=this.toSeconds(e);var i=this._fromType(t[0])*o;this.setValueAtTime(this._toType(i),e);for(var r=n/(t.length-1),s=1;s<t.length;s++){var a=this._fromType(t[s])*o;this.linearRampToValueAtTime(this._toType(a),e+s*r)}return this},e.prototype.cancelScheduledValues=function(t){var e=this.toSeconds(t);return d(isFinite(e),"Invalid argument to cancelScheduledValues: "+JSON.stringify(t)),this._events.cancel(e),this._param.cancelScheduledValues(e),this.log(this.units,"cancelScheduledValues",e),this},e.prototype.cancelAndHoldAtTime=function(t){var e=this.toSeconds(t),n=this._fromType(this.getValueAtTime(e));d(isFinite(e),"Invalid argument to cancelAndHoldAtTime: "+JSON.stringify(t)),this.log(this.units,"cancelAndHoldAtTime",e,"value="+n);var o=this._events.get(e),i=this._events.getAfter(e);return o&&Q(o.time,e)?i?(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time)):(this._param.cancelAndHoldAtTime(e),this._events.cancel(e+this.sampleTime)):i&&(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time),"linearRampToValueAtTime"===i.type?this.linearRampToValueAtTime(this._toType(n),e):"exponentialRampToValueAtTime"===i.type&&this.exponentialRampToValueAtTime(this._toType(n),e)),this._events.add({time:e,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,e),this},e.prototype.rampTo=function(t,e,n){return void 0===e&&(e=.1),"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(t,e,n):this.linearRampTo(t,e,n),this},e.prototype.apply=function(t){var e=this.context.currentTime;t.setValueAtTime(this.getValueAtTime(e),e);var n=this._events.get(e);if(n&&"setTargetAtTime"===n.type)for(var o=this._events.getAfter(n.time),i=o?o.time:e+2,r=(i-e)/10,s=e;s<i;s+=r)t.linearRampToValueAtTime(this.getValueAtTime(s),s);return this._events.forEachAfter(this.context.currentTime,(function(e){"cancelScheduledValues"===e.type?t.cancelScheduledValues(e.time):"setTargetAtTime"===e.type?t.setTargetAtTime(e.value,e.time,e.constant):t[e.type](e.value,e.time)})),this},e.prototype.setParam=function(t){d(this._swappable,"The Param must be assigned as 'swappable' in the constructor");var e=this.input;return e.disconnect(this._param),this.apply(t),this._param=t,e.connect(this._param),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._events.dispose(),this},Object.defineProperty(e.prototype,"defaultValue",{get:function(){return this._toType(this._param.defaultValue)},enumerable:!0,configurable:!0}),e.prototype._exponentialApproach=function(t,e,n,o,i){return n+(e-n)*Math.exp(-(i-t)/o)},e.prototype._linearInterpolate=function(t,e,n,o,i){return e+(i-t)/(n-t)*(o-e)},e.prototype._exponentialInterpolate=function(t,e,n,o,i){return e*Math.pow(o/e,(i-t)/(n-t))},e}(Mt),qt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="ToneAudioNode",e._internalChannels=[],e}return a(e,t),Object.defineProperty(e.prototype,"numberOfInputs",{get:function(){return w(this.input)?q(this.input)||this.input instanceof Rt?1:this.input.numberOfInputs:0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"numberOfOutputs",{get:function(){return w(this.output)?this.output.numberOfOutputs:0},enumerable:!0,configurable:!0}),e.prototype._isAudioNode=function(t){return w(t)&&(t instanceof e||I(t))},e.prototype._getInternalNodes=function(){var t=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&t.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&t.push(this.output),t},e.prototype._setChannelProperties=function(t){this._getInternalNodes().forEach((function(e){e.channelCount=t.channelCount,e.channelCountMode=t.channelCountMode,e.channelInterpretation=t.channelInterpretation}))},e.prototype._getChannelProperties=function(){var t=this._getInternalNodes();d(t.length>0,"ToneAudioNode does not have any internal nodes");var e=t[0];return{channelCount:e.channelCount,channelCountMode:e.channelCountMode,channelInterpretation:e.channelInterpretation}},Object.defineProperty(e.prototype,"channelCount",{get:function(){return this._getChannelProperties().channelCount},set:function(t){var e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCount:t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"channelCountMode",{get:function(){return this._getChannelProperties().channelCountMode},set:function(t){var e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCountMode:t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"channelInterpretation",{get:function(){return this._getChannelProperties().channelInterpretation},set:function(t){var e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelInterpretation:t}))},enumerable:!0,configurable:!0}),e.prototype.connect=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),Ft(this,t,e,n),this},e.prototype.toDestination=function(){return this.connect(this.context.destination),this},e.prototype.toMaster=function(){return b("toMaster() has been renamed toDestination()"),this.toDestination()},e.prototype.disconnect=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),Nt(this,t,e,n),this},e.prototype.chain=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return It.apply(void 0,f([this],t)),this},e.prototype.fan=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return e.forEach((function(e){return t.connect(e)})),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),w(this.input)&&(this.input instanceof e?this.input.dispose():I(this.input)&&this.input.disconnect()),w(this.output)&&(this.output instanceof e?this.output.dispose():I(this.output)&&this.output.disconnect()),this._internalChannels=[],this},e}(Mt);function It(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();t.reduce((function(t,e){return t instanceof qt?t.connect(e):I(t)&&Ft(t,e),e}),n)}function Ft(t,e,n,o){for(void 0===n&&(n=0),void 0===o&&(o=0),d(w(t),"Cannot connect from undefined node"),d(w(e),"Cannot connect to undefined node"),(e instanceof qt||I(e))&&d(e.numberOfInputs>0,"Cannot connect to node with no inputs"),d(t.numberOfOutputs>0,"Cannot connect from node with no outputs");e instanceof qt||e instanceof Rt;)w(e.input)&&(e=e.input);for(;t instanceof qt;)w(t.output)&&(t=t.output);q(e)?t.connect(e,n):t.connect(e,n,o)}function Nt(t,e,n,o){if(void 0===n&&(n=0),void 0===o&&(o=0),w(e))for(;e instanceof qt;)e=e.input;for(;!I(t);)w(t.output)&&(t=t.output);q(e)?t.disconnect(e,n):I(e)?t.disconnect(e,n,o):t.disconnect()}var Vt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["gain","units"]))||this;n.name="Gain",n._gainNode=n.context.createGain(),n.input=n._gainNode,n.output=n._gainNode;var o=B(e.getDefaults(),arguments,["gain","units"]);return n.gain=new Rt({context:n.context,convert:o.convert,param:n._gainNode.gain,units:o.units,value:o.gain,minValue:o.minValue,maxValue:o.maxValue}),st(n,"gain"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{convert:!0,gain:1,units:"gain"})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._gainNode.disconnect(),this.gain.dispose(),this},e}(qt),Lt=function(t){function e(e){var n=t.call(this,e)||this;return n.onended=ct,n._startTime=-1,n._stopTime=-1,n._timeout=-1,n.output=new Vt({context:n.context,gain:0}),n._gainNode=n.output,n.getStateAtTime=function(t){var e=this.toSeconds(t);return-1!==this._startTime&&e>=this._startTime&&(-1===this._stopTime||e<=this._stopTime)?"started":"stopped"},n._fadeIn=e.fadeIn,n._fadeOut=e.fadeOut,n._curve=e.curve,n.onended=e.onended,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:ct})},e.prototype._startGain=function(t,e){void 0===e&&(e=1),d(-1===this._startTime,"Source cannot be started more than once");var n=this.toSeconds(this._fadeIn);return this._startTime=t+n,this._startTime=Math.max(this._startTime,this.context.currentTime),n>0?(this._gainNode.gain.setValueAtTime(0,t),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(e,t+n):this._gainNode.gain.exponentialApproachValueAtTime(e,t,n)):this._gainNode.gain.setValueAtTime(e,t),this},e.prototype.stop=function(t){return this.log("stop",t),this._stopGain(this.toSeconds(t)),this},e.prototype._stopGain=function(t){var e=this;d(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();var n=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(t)+n,this._stopTime=Math.max(this._stopTime,this.context.currentTime),n>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,n,t):this._gainNode.gain.targetRampTo(0,n,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout((function(){var t="exponential"===e._curve?2*n:0;e._stopSource(e.now()+t),e._onended()}),this._stopTime-this.context.currentTime),this},e.prototype._onended=function(){var t=this;this.onended!==ct&&(this.onended(this),this.onended=ct,this.context.isOffline||setTimeout((function(){return t.dispose()}),1e3))},Object.defineProperty(e.prototype,"state",{get:function(){return this.getStateAtTime(this.now())},enumerable:!0,configurable:!0}),e.prototype.cancelStop=function(){return this.log("cancelStop"),d(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._gainNode.disconnect(),this},e}(qt),zt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["offset"]))||this;n.name="ToneConstantSource",n._source=n.context.createConstantSource();var o=B(e.getDefaults(),arguments,["offset"]);return Ft(n._source,n._gainNode),n.offset=new Rt({context:n.context,convert:o.convert,param:n._source.offset,units:o.units,value:o.offset,minValue:o.minValue,maxValue:o.maxValue}),n}return a(e,t),e.getDefaults=function(){return Object.assign(Lt.getDefaults(),{convert:!0,offset:1,units:"number"})},e.prototype.start=function(t){var e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._source.start(e),this},e.prototype._stopSource=function(t){this._source.stop(t)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this},e}(Lt),Bt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["value","units"]))||this;n.name="Signal",n.override=!0;var o=B(e.getDefaults(),arguments,["value","units"]);return n.output=n._constantSource=new zt({context:n.context,convert:o.convert,offset:o.value,units:o.units,minValue:o.minValue,maxValue:o.maxValue}),n._constantSource.start(0),n.input=n._param=n._constantSource.offset,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{convert:!0,units:"number",value:0})},e.prototype.connect=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),Wt(this,t,e,n),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._param.dispose(),this._constantSource.dispose(),this},e.prototype.setValueAtTime=function(t,e){return this._param.setValueAtTime(t,e),this},e.prototype.getValueAtTime=function(t){return this._param.getValueAtTime(t)},e.prototype.setRampPoint=function(t){return this._param.setRampPoint(t),this},e.prototype.linearRampToValueAtTime=function(t,e){return this._param.linearRampToValueAtTime(t,e),this},e.prototype.exponentialRampToValueAtTime=function(t,e){return this._param.exponentialRampToValueAtTime(t,e),this},e.prototype.exponentialRampTo=function(t,e,n){return this._param.exponentialRampTo(t,e,n),this},e.prototype.linearRampTo=function(t,e,n){return this._param.linearRampTo(t,e,n),this},e.prototype.targetRampTo=function(t,e,n){return this._param.targetRampTo(t,e,n),this},e.prototype.exponentialApproachValueAtTime=function(t,e,n){return this._param.exponentialApproachValueAtTime(t,e,n),this},e.prototype.setTargetAtTime=function(t,e,n){return this._param.setTargetAtTime(t,e,n),this},e.prototype.setValueCurveAtTime=function(t,e,n,o){return this._param.setValueCurveAtTime(t,e,n,o),this},e.prototype.cancelScheduledValues=function(t){return this._param.cancelScheduledValues(t),this},e.prototype.cancelAndHoldAtTime=function(t){return this._param.cancelAndHoldAtTime(t),this},e.prototype.rampTo=function(t,e,n){return this._param.rampTo(t,e,n),this},Object.defineProperty(e.prototype,"value",{get:function(){return this._param.value},set:function(t){this._param.value=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"convert",{get:function(){return this._param.convert},set:function(t){this._param.convert=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"units",{get:function(){return this._param.units},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"overridden",{get:function(){return this._param.overridden},set:function(t){this._param.overridden=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxValue",{get:function(){return this._param.maxValue},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"minValue",{get:function(){return this._param.minValue},enumerable:!0,configurable:!0}),e.prototype.apply=function(t){return this._param.apply(t),this},e}(qt);function Wt(t,e,n,o){(e instanceof Rt||q(e)||e instanceof Bt&&e.override)&&(e.cancelScheduledValues(0),e.setValueAtTime(0,0),e instanceof Bt&&(e.overridden=!0)),Ft(t,e,n,o)}var Ut=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["value"]))||this;n.name="TickParam",n._events=new $(1/0),n._multiplier=1;var o=B(e.getDefaults(),arguments,["value"]);return n._multiplier=o.multiplier,n._events.cancel(0),n._events.add({ticks:0,time:0,type:"setValueAtTime",value:n._fromType(o.value)}),n.setValueAtTime(o.value,0),n}return a(e,t),e.getDefaults=function(){return Object.assign(Rt.getDefaults(),{multiplier:1,units:"hertz",value:1})},e.prototype.setTargetAtTime=function(t,e,n){e=this.toSeconds(e),this.setRampPoint(e);for(var o=this._fromType(t),i=this._events.get(e),r=Math.round(Math.max(1/n,1)),s=0;s<=r;s++){var a=n*s+e,c=this._exponentialApproach(i.time,i.value,o,n,a);this.linearRampToValueAtTime(this._toType(c),a)}return this},e.prototype.setValueAtTime=function(e,n){var o=this.toSeconds(n);t.prototype.setValueAtTime.call(this,e,n);var i=this._events.get(o),r=this._events.previousEvent(i),s=this._getTicksUntilEvent(r,o);return i.ticks=Math.max(s,0),this},e.prototype.linearRampToValueAtTime=function(e,n){var o=this.toSeconds(n);t.prototype.linearRampToValueAtTime.call(this,e,n);var i=this._events.get(o),r=this._events.previousEvent(i),s=this._getTicksUntilEvent(r,o);return i.ticks=Math.max(s,0),this},e.prototype.exponentialRampToValueAtTime=function(t,e){e=this.toSeconds(e);for(var n=this._fromType(t),o=this._events.get(e),i=Math.round(Math.max(10*(e-o.time),1)),r=(e-o.time)/i,s=0;s<=i;s++){var a=r*s+o.time,c=this._exponentialInterpolate(o.time,o.value,e,n,a);this.linearRampToValueAtTime(this._toType(c),a)}return this},e.prototype._getTicksUntilEvent=function(t,e){if(null===t)t={ticks:0,time:0,type:"setValueAtTime",value:0};else if(x(t.ticks)){var n=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(n,t.time)}var o=this._fromType(this.getValueAtTime(t.time)),i=this._fromType(this.getValueAtTime(e)),r=this._events.get(e);return r&&r.time===e&&"setValueAtTime"===r.type&&(i=this._fromType(this.getValueAtTime(e-this.sampleTime))),.5*(e-t.time)*(o+i)+t.ticks},e.prototype.getTicksAtTime=function(t){var e=this.toSeconds(t),n=this._events.get(e);return Math.max(this._getTicksUntilEvent(n,e),0)},e.prototype.getDurationOfTicks=function(t,e){var n=this.toSeconds(e),o=this.getTicksAtTime(e);return this.getTimeOfTick(o+t)-n},e.prototype.getTimeOfTick=function(t){var e=this._events.get(t,"ticks"),n=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&n&&"linearRampToValueAtTime"===n.type&&e.value!==n.value){var o=this._fromType(this.getValueAtTime(e.time)),i=(this._fromType(this.getValueAtTime(n.time))-o)/(n.time-e.time),r=Math.sqrt(Math.pow(o,2)-2*i*(e.ticks-t)),s=(-o+r)/i;return(s>0?s:(-o-r)/i)+e.time}return e?0===e.value?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue},e.prototype.ticksToTime=function(t,e){return this.getDurationOfTicks(t,e)},e.prototype.timeToTicks=function(t,e){var n=this.toSeconds(e),o=this.toSeconds(t),i=this.getTicksAtTime(n);return this.getTicksAtTime(n+o)-i},e.prototype._fromType=function(e){return"bpm"===this.units&&this.multiplier?1/(60/e/this.multiplier):t.prototype._fromType.call(this,e)},e.prototype._toType=function(e){return"bpm"===this.units&&this.multiplier?e/this.multiplier*60:t.prototype._toType.call(this,e)},Object.defineProperty(e.prototype,"multiplier",{get:function(){return this._multiplier},set:function(t){var e=this.value;this._multiplier=t,this.cancelScheduledValues(0),this.setValueAtTime(e,0)},enumerable:!0,configurable:!0}),e}(Rt),Gt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["value"]))||this;n.name="TickSignal";var o=B(e.getDefaults(),arguments,["value"]);return n.input=n._param=new Ut({context:n.context,convert:o.convert,multiplier:o.multiplier,param:n._constantSource.offset,units:o.units,value:o.value}),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{multiplier:1,units:"hertz",value:1})},e.prototype.ticksToTime=function(t,e){return this._param.ticksToTime(t,e)},e.prototype.timeToTicks=function(t,e){return this._param.timeToTicks(t,e)},e.prototype.getTimeOfTick=function(t){return this._param.getTimeOfTick(t)},e.prototype.getDurationOfTicks=function(t,e){return this._param.getDurationOfTicks(t,e)},e.prototype.getTicksAtTime=function(t){return this._param.getTicksAtTime(t)},Object.defineProperty(e.prototype,"multiplier",{get:function(){return this._param.multiplier},set:function(t){this._param.multiplier=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._param.dispose(),this},e}(Bt),Yt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency"]))||this;n.name="TickSource",n._state=new Pt,n._tickOffset=new $;var o=B(e.getDefaults(),arguments,["frequency"]);return n.frequency=new Gt({context:n.context,units:o.units,value:o.frequency}),st(n,"frequency"),n._state.setStateAtTime("stopped",0),n.setTicksAtTime(0,0),n}return a(e,t),e.getDefaults=function(){return Object.assign({frequency:1,units:"hertz"},Mt.getDefaults())},Object.defineProperty(e.prototype,"state",{get:function(){return this.getStateAtTime(this.now())},enumerable:!0,configurable:!0}),e.prototype.start=function(t,e){var n=this.toSeconds(t);return"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),w(e)&&this.setTicksAtTime(e,n)),this},e.prototype.stop=function(t){var e=this.toSeconds(t);if("stopped"===this._state.getValueAtTime(e)){var n=this._state.get(e);n&&n.time>0&&(this._tickOffset.cancel(n.time),this._state.cancel(n.time))}return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this.setTicksAtTime(0,e),this},e.prototype.pause=function(t){var e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&this._state.setStateAtTime("paused",e),this},e.prototype.cancel=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this},e.prototype.getTicksAtTime=function(t){var e=this,n=this.toSeconds(t),o=this._state.getLastState("stopped",n),i={state:"paused",time:n};this._state.add(i);var r=o,s=0;return this._state.forEachBetween(o.time,n+this.sampleTime,(function(t){var n=r.time,o=e._tickOffset.get(t.time);o&&o.time>=r.time&&(s=o.ticks,n=o.time),"started"===r.state&&"started"!==t.state&&(s+=e.frequency.getTicksAtTime(t.time)-e.frequency.getTicksAtTime(n)),r=t})),this._state.remove(i),s},Object.defineProperty(e.prototype,"ticks",{get:function(){return this.getTicksAtTime(this.now())},set:function(t){this.setTicksAtTime(t,this.now())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"seconds",{get:function(){return this.getSecondsAtTime(this.now())},set:function(t){var e=this.now(),n=this.frequency.timeToTicks(t,e);this.setTicksAtTime(n,e)},enumerable:!0,configurable:!0}),e.prototype.getSecondsAtTime=function(t){var e=this;t=this.toSeconds(t);var n=this._state.getLastState("stopped",t),o={state:"paused",time:t};this._state.add(o);var i=n,r=0;return this._state.forEachBetween(n.time,t+this.sampleTime,(function(t){var n=i.time,o=e._tickOffset.get(t.time);o&&o.time>=i.time&&(r=o.seconds,n=o.time),"started"===i.state&&"started"!==t.state&&(r+=t.time-n),i=t})),this._state.remove(o),r},e.prototype.setTicksAtTime=function(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(t,e),ticks:t,time:e}),this},e.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},e.prototype.getTimeOfTick=function(t,e){void 0===e&&(e=this.now());var n=this._tickOffset.get(e),o=this._state.get(e),i=Math.max(n.time,o.time),r=this.frequency.getTicksAtTime(i)+t-n.ticks;return this.frequency.getTimeOfTick(r)},e.prototype.forEachTickBetween=function(t,e,n){var o=this,i=this._state.get(t);this._state.forEachBetween(t,e,(function(e){i&&"started"===i.state&&"started"!==e.state&&o.forEachTickBetween(Math.max(i.time,t),e.time-o.sampleTime,n),i=e}));var r=null;if(i&&"started"===i.state)for(var s=Math.max(i.time,t),a=this.frequency.getTicksAtTime(s),c=a-this.frequency.getTicksAtTime(i.time),u=Math.ceil(c)-c,l=this.frequency.getTimeOfTick(a+u);l<e;){try{n(l,Math.round(this.getTicksAtTime(l)))}catch(t){r=t;break}l+=this.frequency.getDurationOfTicks(1,l)}if(r)throw r;return this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this},e}(Mt),Xt=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","frequency"]))||this;n.name="Clock",n.callback=ct,n._lastUpdate=0,n._state=new Pt("stopped"),n._boundLoop=n._loop.bind(n);var o=B(e.getDefaults(),arguments,["callback","frequency"]);return n.callback=o.callback,n._tickSource=new Yt({context:n.context,frequency:o.frequency,units:o.units}),n._lastUpdate=0,n.frequency=n._tickSource.frequency,st(n,"frequency"),n._state.setStateAtTime("stopped",0),n.context.on("tick",n._boundLoop),n}return a(e,t),e.getDefaults=function(){return Object.assign(Mt.getDefaults(),{callback:ct,frequency:1,units:"hertz"})},Object.defineProperty(e.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())},enumerable:!0,configurable:!0}),e.prototype.start=function(t,e){y(this.context);var n=this.toSeconds(t);return this.log("start",n),"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),this._tickSource.start(n,e),n<this._lastUpdate&&this.emit("start",n,e)),this},e.prototype.stop=function(t){var e=this.toSeconds(t);return this.log("stop",e),this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._tickSource.stop(e),e<this._lastUpdate&&this.emit("stop",e),this},e.prototype.pause=function(t){var e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&(this._state.setStateAtTime("paused",e),this._tickSource.pause(e),e<this._lastUpdate&&this.emit("pause",e)),this},Object.defineProperty(e.prototype,"ticks",{get:function(){return Math.ceil(this.getTicksAtTime(this.now()))},set:function(t){this._tickSource.ticks=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"seconds",{get:function(){return this._tickSource.seconds},set:function(t){this._tickSource.seconds=t},enumerable:!0,configurable:!0}),e.prototype.getSecondsAtTime=function(t){return this._tickSource.getSecondsAtTime(t)},e.prototype.setTicksAtTime=function(t,e){return this._tickSource.setTicksAtTime(t,e),this},e.prototype.getTimeOfTick=function(t,e){return void 0===e&&(e=this.now()),this._tickSource.getTimeOfTick(t,e)},e.prototype.getTicksAtTime=function(t){return this._tickSource.getTicksAtTime(t)},e.prototype.nextTickTime=function(t,e){var n=this.toSeconds(e),o=this.getTicksAtTime(n);return this._tickSource.getTimeOfTick(o+t,n)},e.prototype._loop=function(){var t=this,e=this._lastUpdate,n=this.now();this._lastUpdate=n,this.log("loop",e,n),e!==n&&(this._state.forEachBetween(e,n,(function(e){switch(e.state){case"started":var n=t._tickSource.getTicksAtTime(e.time);t.emit("start",e.time,n);break;case"stopped":0!==e.time&&t.emit("stop",e.time);break;case"paused":t.emit("pause",e.time)}})),this._tickSource.forEachTickBetween(e,n,(function(e,n){t.callback(e,n)})))},e.prototype.getStateAtTime=function(t){var e=this.toSeconds(t);return this._state.getValueAtTime(e)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this},e}(Mt);nt.mixin(Xt);var Zt=function(t){function e(e){var n=t.call(this)||this;return n.name="TimelineValue",n._timeline=new $({memory:10}),n._initialValue=e,n}return a(e,t),e.prototype.set=function(t,e){return this._timeline.add({value:t,time:e}),this},e.prototype.get=function(t){var e=this._timeline.get(t);return e?e.value:this._initialValue},e}(G),Qt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Ticks",e.defaultUnits="i",e}return a(e,t),e.prototype._now=function(){return this.context.transport.ticks},e.prototype._beatsToUnits=function(t){return this._getPPQ()*t},e.prototype._secondsToUnits=function(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())},e.prototype._ticksToUnits=function(t){return t},e.prototype.toTicks=function(){return this.valueOf()},e.prototype.toSeconds=function(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())},e}(Dt);function Ht(t,e){return new Qt(ft(),t,e)}var $t=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="IntervalTimeline",e._root=null,e._length=0,e}return a(e,t),e.prototype.add=function(t){d(w(t.time),"Events must have a time property"),d(w(t.duration),"Events must have a duration parameter"),t.time=t.time.valueOf();var e=new Jt(t.time,t.time+t.duration,t);for(null===this._root?this._root=e:this._root.insert(e),this._length++;null!==e;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this},e.prototype.remove=function(t){var e,n;if(null!==this._root){var o=[];this._root.search(t.time,o);try{for(var i=h(o),r=i.next();!r.done;r=i.next()){var s=r.value;if(s.event===t){this._removeNode(s),this._length--;break}}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}return this},Object.defineProperty(e.prototype,"length",{get:function(){return this._length},enumerable:!0,configurable:!0}),e.prototype.cancel=function(t){var e=this;return this.forEachFrom(t,(function(t){return e.remove(t)})),this},e.prototype._setRoot=function(t){this._root=t,null!==this._root&&(this._root.parent=null)},e.prototype._replaceNodeInParent=function(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)},e.prototype._removeNode=function(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else{var e=void 0,n=null;if(t.getBalance()>0)if(null===t.left.right)(e=t.left).right=t.right,n=e;else{for(e=t.left.right;null!==e.right;)e=e.right;e.parent&&(e.parent.right=e.left,n=e.parent,e.left=t.left,e.right=t.right)}else if(null===t.right.left)(e=t.right).left=t.left,n=e;else{for(e=t.right.left;null!==e.left;)e=e.left;e.parent&&(e.parent.left=e.right,n=e.parent,e.left=t.left,e.right=t.right)}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),n&&this._rebalance(n)}t.dispose()},e.prototype._rotateLeft=function(t){var e=t.parent,n=t.isLeftChild(),o=t.right;o&&(t.right=o.left,o.left=t),null!==e?n?e.left=o:e.right=o:this._setRoot(o)},e.prototype._rotateRight=function(t){var e=t.parent,n=t.isLeftChild(),o=t.left;o&&(t.left=o.right,o.right=t),null!==e?n?e.left=o:e.right=o:this._setRoot(o)},e.prototype._rebalance=function(t){var e=t.getBalance();e>1&&t.left?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&t.right&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))},e.prototype.get=function(t){if(null!==this._root){var e=[];if(this._root.search(t,e),e.length>0){for(var n=e[0],o=1;o<e.length;o++)e[o].low>n.low&&(n=e[o]);return n.event}}return null},e.prototype.forEach=function(t){if(null!==this._root){var e=[];this._root.traverse((function(t){return e.push(t)})),e.forEach((function(e){e.event&&t(e.event)}))}return this},e.prototype.forEachAtTime=function(t,e){if(null!==this._root){var n=[];this._root.search(t,n),n.forEach((function(t){t.event&&e(t.event)}))}return this},e.prototype.forEachFrom=function(t,e){if(null!==this._root){var n=[];this._root.searchAfter(t,n),n.forEach((function(t){t.event&&e(t.event)}))}return this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),null!==this._root&&this._root.traverse((function(t){return t.dispose()})),this._root=null,this},e}(G),Jt=function(){function t(t,e,n){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=n,this.low=t,this.high=e,this.max=this.high}return t.prototype.insert=function(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t)},t.prototype.search=function(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e))},t.prototype.searchAfter=function(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e)},t.prototype.traverse=function(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t)},t.prototype.updateHeight=function(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0},t.prototype.updateMax=function(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))},t.prototype.getBalance=function(){var t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t},t.prototype.isLeftChild=function(){return null!==this.parent&&this.parent.left===this},Object.defineProperty(t.prototype,"left",{get:function(){return this._left},set:function(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"right",{get:function(){return this._right},set:function(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this.parent=null,this._left=null,this._right=null,this.event=null},t}(),Kt=function(){function t(e,n){this.id=t._eventId++;var o=Object.assign(t.getDefaults(),n);this.transport=e,this.callback=o.callback,this._once=o.once,this.time=o.time}return t.getDefaults=function(){return{callback:ct,once:!1,time:0}},t.prototype.invoke=function(t){this.callback&&(this.callback(t),this._once&&this.transport.clear(this.id))},t.prototype.dispose=function(){return this.callback=void 0,this},t._eventId=0,t}(),te=function(t){function e(n,o){var i=t.call(this,n,o)||this;i._currentId=-1,i._nextId=-1,i._nextTick=i.time,i._boundRestart=i._restart.bind(i);var r=Object.assign(e.getDefaults(),o);return i.duration=new Qt(n.context,r.duration).valueOf(),i._interval=new Qt(n.context,r.interval).valueOf(),i._nextTick=r.time,i.transport.on("start",i._boundRestart),i.transport.on("loopStart",i._boundRestart),i.context=i.transport.context,i._restart(),i}return a(e,t),e.getDefaults=function(){return Object.assign({},Kt.getDefaults(),{duration:1/0,interval:1,once:!1})},e.prototype.invoke=function(e){this._createEvents(e),t.prototype.invoke.call(this,e)},e.prototype._createEvents=function(t){var e=this.transport.getTicksAtTime(t);e>=this.time&&e>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new Qt(this.context,this._nextTick).toSeconds()))},e.prototype._restart=function(t){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;var e=this.transport.getTicksAtTime(t);e>this.time&&(this._nextTick=this.time+Math.ceil((e-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new Qt(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new Qt(this.context,this._nextTick).toSeconds())},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this},e}(Kt),ee=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="Transport",n._loop=new Zt(!1),n._loopStart=0,n._loopEnd=0,n._scheduledEvents={},n._timeline=new $,n._repeatedEvents=new $t,n._syncedSignals=[],n._swingAmount=0;var o=B(e.getDefaults(),arguments);return n._ppq=o.ppq,n._clock=new Xt({callback:n._processTick.bind(n),context:n.context,frequency:0,units:"bpm"}),n._bindClockEvents(),n.bpm=n._clock.frequency,n._clock.frequency.multiplier=o.ppq,n.bpm.setValueAtTime(o.bpm,0),st(n,"bpm"),n._timeSignature=o.timeSignature,n._swingTicks=o.ppq/2,n}return a(e,t),e.getDefaults=function(){return Object.assign(Mt.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})},e.prototype._processTick=function(t,e){if(this._swingAmount>0&&e%this._ppq!=0&&e%(2*this._swingTicks)!=0){var n=e%(2*this._swingTicks)/(2*this._swingTicks),o=Math.sin(n*Math.PI)*this._swingAmount;t+=new Qt(this.context,2*this._swingTicks/3).toSeconds()*o}this._loop.get(t)&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._timeline.forEachAtTime(e,(function(e){return e.invoke(t)}))},e.prototype.schedule=function(t,e){var n=new Kt(this,{callback:t,time:new Dt(this.context,e).toTicks()});return this._addEvent(n,this._timeline)},e.prototype.scheduleRepeat=function(t,e,n,o){void 0===o&&(o=1/0);var i=new te(this,{callback:t,duration:new Tt(this.context,o).toTicks(),interval:new Tt(this.context,e).toTicks(),time:new Dt(this.context,n).toTicks()});return this._addEvent(i,this._repeatedEvents)},e.prototype.scheduleOnce=function(t,e){var n=new Kt(this,{callback:t,once:!0,time:new Dt(this.context,e).toTicks()});return this._addEvent(n,this._timeline)},e.prototype.clear=function(t){if(this._scheduledEvents.hasOwnProperty(t)){var e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this},e.prototype._addEvent=function(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id},e.prototype.cancel=function(t){var e=this;void 0===t&&(t=0);var n=this.toTicks(t);return this._timeline.forEachFrom(n,(function(t){return e.clear(t.id)})),this._repeatedEvents.forEachFrom(n,(function(t){return e.clear(t.id)})),this},e.prototype._bindClockEvents=function(){var t=this;this._clock.on("start",(function(e,n){n=new Qt(t.context,n).toSeconds(),t.emit("start",e,n)})),this._clock.on("stop",(function(e){t.emit("stop",e)})),this._clock.on("pause",(function(e){t.emit("pause",e)}))},Object.defineProperty(e.prototype,"state",{get:function(){return this._clock.getStateAtTime(this.now())},enumerable:!0,configurable:!0}),e.prototype.start=function(t,e){var n;return w(e)&&(n=this.toTicks(e)),this._clock.start(t,n),this},e.prototype.stop=function(t){return this._clock.stop(t),this},e.prototype.pause=function(t){return this._clock.pause(t),this},e.prototype.toggle=function(t){return t=this.toSeconds(t),"started"!==this._clock.getStateAtTime(t)?this.start(t):this.stop(t),this},Object.defineProperty(e.prototype,"timeSignature",{get:function(){return this._timeSignature},set:function(t){k(t)&&(t=t[0]/t[1]*4),this._timeSignature=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return new Tt(this.context,this._loopStart,"i").toSeconds()},set:function(t){this._loopStart=this.toTicks(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return new Tt(this.context,this._loopEnd,"i").toSeconds()},set:function(t){this._loopEnd=this.toTicks(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loop",{get:function(){return this._loop.get(this.now())},set:function(t){this._loop.set(t,this.now())},enumerable:!0,configurable:!0}),e.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(e.prototype,"swing",{get:function(){return this._swingAmount},set:function(t){this._swingAmount=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"swingSubdivision",{get:function(){return new Qt(this.context,this._swingTicks).toNotation()},set:function(t){this._swingTicks=this.toTicks(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){var t=this.now(),e=this._clock.getTicksAtTime(t);return new Qt(this.context,e).toBarsBeatsSixteenths()},set:function(t){var e=this.toTicks(t);this.ticks=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"seconds",{get:function(){return this._clock.seconds},set:function(t){var e=this.now(),n=this._clock.frequency.timeToTicks(t,e);this.ticks=n},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"progress",{get:function(){if(this.loop){var t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"ticks",{get:function(){return this._clock.ticks},set:function(t){if(this._clock.ticks!==t){var e=this.now();if("started"===this.state){var n=this._clock.getTicksAtTime(e),o=this._clock.getTimeOfTick(Math.ceil(n));this.emit("stop",o),this._clock.setTicksAtTime(t,o),this.emit("start",o,this._clock.getSecondsAtTime(o))}else this._clock.setTicksAtTime(t,e)}},enumerable:!0,configurable:!0}),e.prototype.getTicksAtTime=function(t){return Math.round(this._clock.getTicksAtTime(t))},e.prototype.getSecondsAtTime=function(t){return this._clock.getSecondsAtTime(t)},Object.defineProperty(e.prototype,"PPQ",{get:function(){return this._clock.frequency.multiplier},set:function(t){this._clock.frequency.multiplier=t},enumerable:!0,configurable:!0}),e.prototype.nextSubdivision=function(t){if(t=this.toTicks(t),"started"!==this.state)return 0;var e=this.now(),n=t-this.getTicksAtTime(e)%t;return this._clock.nextTickTime(n,e)},e.prototype.syncSignal=function(t,e){if(!e){var n=this.now();if(0!==t.getValueAtTime(n)){var o=1/(60/this.bpm.getValueAtTime(n)/this.PPQ);e=t.getValueAtTime(n)/o}else e=0}var i=new Vt(e);return this.bpm.connect(i),i.connect(t._param),this._syncedSignals.push({initial:t.value,ratio:i,signal:t}),t.value=0,this},e.prototype.unsyncSignal=function(t){for(var e=this._syncedSignals.length-1;e>=0;e--){var n=this._syncedSignals[e];n.signal===t&&(n.ratio.dispose(),n.signal.value=n.initial,this._syncedSignals.splice(e,1))}return this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._clock.dispose(),at(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this},e}(Mt);nt.mixin(ee),K((function(t){t.transport=new ee({context:t})})),et((function(t){t.transport.dispose()}));var ne=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["delayTime","maxDelay"]))||this;n.name="Delay";var o=B(e.getDefaults(),arguments,["delayTime","maxDelay"]),i=n.toSeconds(o.maxDelay);return n._maxDelay=Math.max(i,n.toSeconds(o.delayTime)),n._delayNode=n.input=n.output=n.context.createDelay(i),n.delayTime=new Rt({context:n.context,param:n._delayNode.delayTime,units:"time",value:o.delayTime,minValue:0,maxValue:n.maxDelay}),st(n,"delayTime"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{delayTime:0,maxDelay:1})},Object.defineProperty(e.prototype,"maxDelay",{get:function(){return this._maxDelay},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._delayNode.disconnect(),this.delayTime.dispose(),this},e}(qt),oe=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["volume"]))||this;n.name="Volume";var o=B(e.getDefaults(),arguments,["volume"]);return n.input=n.output=new Vt({context:n.context,gain:o.volume,units:"decibels"}),n.volume=n.output.gain,st(n,"volume"),n._unmutedVolume=o.volume,n.mute=o.mute,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mute:!1,volume:0})},Object.defineProperty(e.prototype,"mute",{get:function(){return this.volume.value===-1/0},set:function(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this.volume.dispose(),this},e}(qt),ie=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="Destination",n.input=new oe({context:n.context}),n.output=new Vt({context:n.context}),n.volume=n.input.volume;var o=B(e.getDefaults(),arguments);return It(n.input,n.output,n.context.rawContext.destination),n.mute=o.mute,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mute:!1,volume:0})},Object.defineProperty(e.prototype,"mute",{get:function(){return this.input.mute},set:function(t){this.input.mute=t},enumerable:!0,configurable:!0}),e.prototype.chain=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this.input.disconnect(),t.unshift(this.input),t.push(this.output),It.apply(void 0,f(t)),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.volume.dispose(),this},e}(qt);function re(t,e,n,o){return void 0===n&&(n=2),void 0===o&&(o=ft().sampleRate),u(this,void 0,void 0,(function(){var i,r,s,a;return l(this,(function(c){switch(c.label){case 0:return i=ft(),dt(r=new lt(n,e,o)),[4,t(r)];case 1:return c.sent(),s=r.render(),dt(i),[4,s];case 2:return a=c.sent(),[2,new ut(a)]}}))}))}K((function(t){t.destination=new ie({context:t})})),et((function(t){t.destination.dispose()}));var se=function(t){function e(){var n=t.call(this)||this;n.name="ToneAudioBuffers",n._buffers=new Map,n._loadingCount=0;var o=B(e.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");return n.baseUrl=o.baseUrl,Object.keys(o.urls).forEach((function(t){n._loadingCount++;var e=o.urls[t];n.add(t,e,n._bufferLoaded.bind(n,o.onload))})),n}return a(e,t),e.getDefaults=function(){return{baseUrl:"",onerror:ct,onload:ct,urls:{}}},e.prototype.has=function(t){return this._buffers.has(t.toString())},e.prototype.get=function(t){return d(this.has(t),"ToneAudioBuffers has no buffer named: "+t),this._buffers.get(t.toString())},e.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t()},Object.defineProperty(e.prototype,"loaded",{get:function(){return Array.from(this._buffers).every((function(t){var e=p(t,2);e[0];return e[1].loaded}))},enumerable:!0,configurable:!0}),e.prototype.add=function(t,e,n){return void 0===n&&(n=ct),A(e)?this._buffers.set(t.toString(),new ut(this.baseUrl+e,n)):this._buffers.set(t.toString(),new ut(e,n)),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._buffers.forEach((function(t){return t.dispose()})),this._buffers.clear(),this},e}(G),ae=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="MidiClass",e.defaultUnits="midi",e}return a(e,t),e.prototype._frequencyToUnits=function(e){return wt(t.prototype._frequencyToUnits.call(this,e))},e.prototype._ticksToUnits=function(e){return wt(t.prototype._ticksToUnits.call(this,e))},e.prototype._beatsToUnits=function(e){return wt(t.prototype._beatsToUnits.call(this,e))},e.prototype._secondsToUnits=function(e){return wt(t.prototype._secondsToUnits.call(this,e))},e.prototype.toMidi=function(){return this.valueOf()},e.prototype.toFrequency=function(){return Ot(this.toMidi())},e.prototype.transpose=function(t){return new e(this.context,this.toMidi()+t)},e}(Ct);function ce(t,e){return new ae(ft(),t,e)}var ue=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Draw",e.expiration=.25,e.anticipation=.008,e._events=new $,e._boundDrawLoop=e._drawLoop.bind(e),e._animationFrame=-1,e}return a(e,t),e.prototype.schedule=function(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this},e.prototype.cancel=function(t){return this._events.cancel(this.toSeconds(t)),this},e.prototype._drawLoop=function(){for(var t=this.context.currentTime;this._events.length&&this._events.peek().time-this.anticipation<=t;){var e=this._events.shift();e&&t-e.time<=this.expiration&&e.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this},e}(Mt);K((function(t){t.draw=new ue({context:t})})),et((function(t){t.draw.dispose()}));var le=n(501),he=function(t){function e(e){var n=t.call(this,e)||this;return n.input=void 0,n._state=new Pt("stopped"),n._synced=!1,n._scheduled=[],n._syncedStart=ct,n._syncedStop=ct,n._state.memory=100,n._state.increasing=!0,n._volume=n.output=new oe({context:n.context,mute:e.mute,volume:e.volume}),n.volume=n._volume.volume,st(n,"volume"),n.onstop=e.onstop,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mute:!1,onstop:ct,volume:0})},Object.defineProperty(e.prototype,"state",{get:function(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t},enumerable:!0,configurable:!0}),e.prototype._clampToCurrentTime=function(t){return this._synced?t:Math.max(t,this.context.currentTime)},e.prototype.start=function(t,e,n){var o=this,i=x(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(i=this._clampToCurrentTime(i),"started"===this._state.getValueAtTime(i))d(Y(i,this._state.get(i).time),"Start time must be strictly greater than previous start time"),this._state.cancel(i),this._state.setStateAtTime("started",i),this.log("restart",i),this.restart(i,e,n);else{if(this.log("start",i),this._state.setStateAtTime("started",i),this._synced){var r=this._state.get(i);r&&(r.offset=this.toSeconds(W(e,0)),r.duration=n?this.toSeconds(n):void 0);var s=this.context.transport.schedule((function(t){o._start(t,e,n)}),i);this._scheduled.push(s),"started"===this.context.transport.state&&this._syncedStart(this.now(),this.context.transport.seconds)}else this._start(i,e,n);y(this.context)}return this},e.prototype.stop=function(t){var e=x(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(e=this._clampToCurrentTime(e),"started"===this._state.getValueAtTime(e)||w(this._state.getNextState("started",e))){if(this.log("stop",e),this._synced){var n=this.context.transport.schedule(this._stop.bind(this),e);this._scheduled.push(n)}else this._stop(e);this._state.cancel(e),this._state.setStateAtTime("stopped",e)}return this},e.prototype.restart=function(t,e,n){return t=this.toSeconds(t),"started"===this._state.getValueAtTime(t)&&(this._state.cancel(t),this._restart(t,e,n)),this},e.prototype.sync=function(){var t=this;return this._synced||(this._synced=!0,this._syncedStart=function(e,n){if(n>0){var o=t._state.get(n);if(o&&"started"===o.state&&o.time!==n){var i=n-t.toSeconds(o.time),r=void 0;o.duration&&(r=t.toSeconds(o.duration)-i),t._start(e,t.toSeconds(o.offset)+i,r)}}},this._syncedStop=function(e){var n=t.context.transport.getSecondsAtTime(Math.max(e-t.sampleTime,0));"started"===t._state.getValueAtTime(n)&&t._stop(e)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this},e.prototype.unsync=function(){var t=this;return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach((function(e){return t.context.transport.clear(e)})),this._scheduled=[],this._state.cancel(0),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.onstop=ct,this.unsync(),this._volume.dispose(),this._state.dispose(),this},e}(qt),pe=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["buffer","onload"]))||this;n.name="ToneBufferSource",n._source=n.context.createBufferSource(),n._internalChannels=[n._source],n._sourceStarted=!1,n._sourceStopped=!1;var o=B(e.getDefaults(),arguments,["buffer","onload"]);return Ft(n._source,n._gainNode),n._source.onended=function(){return n._stopSource()},n.playbackRate=new Rt({context:n.context,param:n._source.playbackRate,units:"positive",value:o.playbackRate}),n.loop=o.loop,n.loopStart=o.loopStart,n.loopEnd=o.loopEnd,n._buffer=new ut(o.buffer,o.onload),n._internalChannels.push(n._source),n}return a(e,t),e.getDefaults=function(){return Object.assign(Lt.getDefaults(),{buffer:new ut,loop:!1,loopEnd:0,loopStart:0,onload:ct,playbackRate:1})},Object.defineProperty(e.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"curve",{get:function(){return this._curve},set:function(t){this._curve=t},enumerable:!0,configurable:!0}),e.prototype.start=function(t,e,n,o){void 0===o&&(o=1),d(this.buffer.loaded,"buffer is either not set or not loaded");var i=this.toSeconds(t);this._startGain(i,o),e=this.loop?W(e,this.loopStart):W(e,0);var r=Math.max(this.toSeconds(e),0);if(this.loop){var s=this.toSeconds(this.loopEnd)||this.buffer.duration,a=this.toSeconds(this.loopStart),c=s-a;X(r,s)&&(r=(r-a)%c+a),Q(r,this.buffer.duration)&&(r=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,Z(r,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(i,r)),w(n)){var u=this.toSeconds(n);u=Math.max(u,0),this.stop(i+u)}return this},e.prototype._stopSource=function(t){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(t)),this._onended())},Object.defineProperty(e.prototype,"loopStart",{get:function(){return this._source.loopStart},set:function(t){this._source.loopStart=this.toSeconds(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this._source.loopEnd},set:function(t){this._source.loopEnd=this.toSeconds(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loop",{get:function(){return this._source.loop},set:function(t){this._source.loop=t,this._sourceStarted&&this.cancelStop()},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this},e}(Lt),fe=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["type"]))||this;n.name="Noise",n._source=null;var o=B(e.getDefaults(),arguments,["type"]);return n._playbackRate=o.playbackRate,n.type=o.type,n._fadeIn=o.fadeIn,n._fadeOut=o.fadeOut,n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{fadeIn:0,fadeOut:0,playbackRate:1,type:"white"})},Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){if(d(t in me,"Noise: invalid type: "+t),this._type!==t&&(this._type=t,"started"===this.state)){var e=this.now();this._stop(e),this._start(e)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._source&&(this._source.playbackRate.value=t)},enumerable:!0,configurable:!0}),e.prototype._start=function(t){var e=this,n=me[this._type];this._source=new pe({buffer:n,context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,loop:!0,onended:function(){return e.onstop(e)},playbackRate:this._playbackRate}).connect(this.output),this._source.start(this.toSeconds(t),Math.random()*(n.duration-.001))},e.prototype._stop=function(t){this._source&&(this._source.stop(this.toSeconds(t)),this._source=null)},Object.defineProperty(e.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t,this._source&&(this._source.fadeIn=this._fadeIn)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t,this._source&&(this._source.fadeOut=this._fadeOut)},enumerable:!0,configurable:!0}),e.prototype._restart=function(t){this._stop(t),this._start(t)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._source&&this._source.disconnect(),this},e}(he),de={brown:null,pink:null,white:null},me={get brown(){if(!de.brown){for(var t=[],e=0;e<2;e++){var n=new Float32Array(220500);t[e]=n;for(var o=0,i=0;i<220500;i++){var r=2*Math.random()-1;n[i]=(o+.02*r)/1.02,o=n[i],n[i]*=3.5}}de.brown=(new ut).fromArray(t)}return de.brown},get pink(){if(!de.pink){for(var t=[],e=0;e<2;e++){var n=new Float32Array(220500);t[e]=n;var o=void 0,i=void 0,r=void 0,s=void 0,a=void 0,c=void 0,u=void 0;o=i=r=s=a=c=u=0;for(var l=0;l<220500;l++){var h=2*Math.random()-1;o=.99886*o+.0555179*h,i=.99332*i+.0750759*h,r=.969*r+.153852*h,s=.8665*s+.3104856*h,a=.55*a+.5329522*h,c=-.7616*c-.016898*h,n[l]=o+i+r+s+a+c+u+.5362*h,n[l]*=.11,u=.115926*h}}de.pink=(new ut).fromArray(t)}return de.pink},get white(){if(!de.white){for(var t=[],e=0;e<2;e++){var n=new Float32Array(220500);t[e]=n;for(var o=0;o<220500;o++)n[o]=2*Math.random()-1}de.white=(new ut).fromArray(t)}return de.white}},ye=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["volume"]))||this;n.name="UserMedia";var o=B(e.getDefaults(),arguments,["volume"]);return n._volume=n.output=new oe({context:n.context,volume:o.volume}),n.volume=n._volume.volume,st(n,"volume"),n.mute=o.mute,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mute:!1,volume:0})},e.prototype.open=function(t){return u(this,void 0,void 0,(function(){var n,o,i,r;return l(this,(function(s){switch(s.label){case 0:return d(e.supported,"UserMedia is not supported"),"started"===this.state&&this.close(),[4,e.enumerateDevices()];case 1:return n=s.sent(),T(t)?this._device=n[t]:(this._device=n.find((function(e){return e.label===t||e.deviceId===t})),!this._device&&n.length>0&&(this._device=n[0]),d(w(this._device),"No matching device "+t)),o={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate,noiseSuppression:!1,mozNoiseSuppression:!1}},this._device&&(o.audio.deviceId=this._device.deviceId),[4,navigator.mediaDevices.getUserMedia(o)];case 2:return i=s.sent(),this._stream||(this._stream=i,Ft(r=this.context.createMediaStreamSource(i),this.output),this._mediaStream=r),[2,this]}}))}))},e.prototype.close=function(){return this._stream&&this._mediaStream&&(this._stream.getAudioTracks().forEach((function(t){t.stop()})),this._stream=void 0,this._mediaStream.disconnect(),this._mediaStream=void 0),this._device=void 0,this},e.enumerateDevices=function(){return u(this,void 0,void 0,(function(){return l(this,(function(t){switch(t.label){case 0:return[4,navigator.mediaDevices.enumerateDevices()];case 1:return[2,t.sent().filter((function(t){return"audioinput"===t.kind}))]}}))}))},Object.defineProperty(e.prototype,"state",{get:function(){return this._stream&&this._stream.active?"started":"stopped"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"deviceId",{get:function(){return this._device?this._device.deviceId:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"groupId",{get:function(){return this._device?this._device.groupId:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this._device?this._device.label:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.close(),this._volume.dispose(),this.volume.dispose(),this},Object.defineProperty(e,"supported",{get:function(){return w(navigator.mediaDevices)&&w(navigator.mediaDevices.getUserMedia)},enumerable:!0,configurable:!0}),e}(qt);function _e(t,e){return u(this,void 0,void 0,(function(){var n,o;return l(this,(function(i){switch(i.label){case 0:return n=e/t.context.sampleRate,o=new lt(1,n,t.context.sampleRate),new t.constructor(Object.assign(t.get(),{frequency:2/n,detune:0,context:o})).toDestination().start(0),[4,o.render()];case 1:return[2,i.sent().getChannelData(0)]}}))}))}var ge=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type"]))||this;n.name="ToneOscillatorNode",n._oscillator=n.context.createOscillator(),n._internalChannels=[n._oscillator];var o=B(e.getDefaults(),arguments,["frequency","type"]);return Ft(n._oscillator,n._gainNode),n.type=o.type,n.frequency=new Rt({context:n.context,param:n._oscillator.frequency,units:"frequency",value:o.frequency}),n.detune=new Rt({context:n.context,param:n._oscillator.detune,units:"cents",value:o.detune}),n}return a(e,t),e.getDefaults=function(){return Object.assign(Lt.getDefaults(),{detune:0,frequency:440,type:"sine"})},e.prototype.start=function(t){var e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._oscillator.start(e),this},e.prototype._stopSource=function(t){this._oscillator.stop(t)},e.prototype.setPeriodicWave=function(t){return this._oscillator.setPeriodicWave(t),this},Object.defineProperty(e.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this},e}(Lt),ve=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type"]))||this;n.name="Oscillator",n._oscillator=null;var o=B(e.getDefaults(),arguments,["frequency","type"]);return n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency}),st(n,"frequency"),n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),st(n,"detune"),n._partials=o.partials,n._partialCount=o.partialCount,n._type=o.type,o.partialCount&&"custom"!==o.type&&(n._type=n.baseType+o.partialCount.toString()),n.phase=o.phase,n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})},e.prototype._start=function(t){var e=this,n=this.toSeconds(t),o=new ge({context:this.context,onended:function(){return e.onstop(e)}});this._oscillator=o,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(n)},e.prototype._stop=function(t){var e=this.toSeconds(t);this._oscillator&&this._oscillator.stop(e)},e.prototype._restart=function(t){var e=this.toSeconds(t);return this.log("restart",e),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(e),this},e.prototype.syncFrequency=function(){return this.context.transport.syncSignal(this.frequency),this},e.prototype.unsyncFrequency=function(){return this.context.transport.unsyncSignal(this.frequency),this},e.prototype._getCachedPeriodicWave=function(){var t=this;if("custom"===this._type)return n=e._periodicWaveCache.find((function(e){return e.phase===t._phase&&(n=e.partials,o=t._partials,n.length===o.length&&n.every((function(t,e){return o[e]===t})));var n,o}));var n=e._periodicWaveCache.find((function(e){return e.type===t._type&&e.phase===t._phase}));return this._partialCount=n?n.partialCount:this._partialCount,n},Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t;var n=-1!==["sine","square","sawtooth","triangle"].indexOf(t);if(0===this._phase&&n)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=t);else{var o=this._getCachedPeriodicWave();if(w(o)){var i=o.partials,r=o.wave;this._wave=r,this._partials=i,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{var s=p(this._getRealImaginary(t,this._phase),2),a=s[0],c=s[1],u=this.context.createPeriodicWave(a,c);this._wave=u,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),e._periodicWaveCache.push({imag:c,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:a,type:this._type,wave:this._wave}),e._periodicWaveCache.length>100&&e._periodicWaveCache.shift()}}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return this._type.replace(this.partialCount.toString(),"")},set:function(t){this.partialCount&&"custom"!==this._type&&"custom"!==t?this.type=t+this.partialCount:this.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return this._partialCount},set:function(t){m(t,0);var e=this._type,n=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(n&&(e=n[1]),"custom"!==this._type)this.type=0===t?e:e+t.toString();else{var o=new Float32Array(t);this._partials.forEach((function(t,e){return o[e]=t})),this._partials=Array.from(o),this.type=this._type}},enumerable:!0,configurable:!0}),e.prototype._getRealImaginary=function(t,e){var n=2048,o=new Float32Array(n),i=new Float32Array(n),r=1;if("custom"===t){if(r=this._partials.length+1,this._partialCount=this._partials.length,n=r,0===this._partials.length)return[o,i]}else{var s=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);s?(r=parseInt(s[2],10)+1,this._partialCount=parseInt(s[2],10),t=s[1],n=r=Math.max(r,2)):this._partialCount=0,this._partials=[]}for(var a=1;a<n;++a){var c=2/(a*Math.PI),u=void 0;switch(t){case"sine":u=a<=r?1:0,this._partials[a-1]=u;break;case"square":u=1&a?2*c:0,this._partials[a-1]=u;break;case"sawtooth":u=c*(1&a?1:-1),this._partials[a-1]=u;break;case"triangle":u=1&a?c*c*2*(a-1>>1&1?-1:1):0,this._partials[a-1]=u;break;case"custom":u=this._partials[a-1];break;default:throw new TypeError("Oscillator: invalid type: "+t)}0!==u?(o[a]=-u*Math.sin(e*a),i[a]=u*Math.cos(e*a)):(o[a]=0,i[a]=0)}return[o,i]},e.prototype._inverseFFT=function(t,e,n){for(var o=0,i=t.length,r=0;r<i;r++)o+=t[r]*Math.cos(r*n)+e[r]*Math.sin(r*n);return o},e.prototype.getInitialValue=function(){for(var t=p(this._getRealImaginary(this._type,0),2),e=t[0],n=t[1],o=0,i=2*Math.PI,r=0;r<32;r++)o=Math.max(this._inverseFFT(e,n,r/32*i),o);return H(-this._inverseFFT(e,n,this._phase)/o,-1,1)},Object.defineProperty(e.prototype,"partials",{get:function(){return this._partials.slice(0,this.partialCount)},set:function(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this.type="custom")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._phase*(180/Math.PI)},set:function(t){this._phase=t*Math.PI/180,this.type=this._type},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this},e._periodicWaveCache=[],e}(he),be=function(t){function e(){return t.call(this,Object.assign(B(e.getDefaults(),arguments,["context"])))||this}return a(e,t),e.prototype.connect=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),Wt(this,t,e,n),this},e}(qt),xe=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["mapping","length"])))||this;n.name="WaveShaper",n._shaper=n.context.createWaveShaper(),n.input=n._shaper,n.output=n._shaper;var o=B(e.getDefaults(),arguments,["mapping","length"]);return k(o.mapping)||o.mapping instanceof Float32Array?n.curve=Float32Array.from(o.mapping):O(o.mapping)&&n.setMap(o.mapping,o.length),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{length:1024})},e.prototype.setMap=function(t,e){void 0===e&&(e=1024);for(var n=new Float32Array(e),o=0,i=e;o<i;o++){var r=o/(i-1)*2-1;n[o]=t(r,o)}return this.curve=n,this},Object.defineProperty(e.prototype,"curve",{get:function(){return this._shaper.curve},set:function(t){this._shaper.curve=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){d(["none","2x","4x"].some((function(e){return e.includes(t)})),"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._shaper.disconnect(),this},e}(be),we=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="AudioToGain",e._norm=new xe({context:e.context,mapping:function(t){return(t+1)/2}}),e.input=e._norm,e.output=e._norm,e}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._norm.dispose(),this},e}(be),Oe=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["value"])))||this;n.name="Multiply",n.override=!1;var o=B(e.getDefaults(),arguments,["value"]);return n._mult=n.input=n.output=new Vt({context:n.context,minValue:o.minValue,maxValue:o.maxValue}),n.factor=n._param=n._mult.gain,n.factor.setValueAtTime(o.value,0),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{value:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._mult.dispose(),this},e}(Bt),Te=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type","modulationType"]))||this;n.name="AMOscillator",n._modulationScale=new we({context:n.context}),n._modulationNode=new Vt({context:n.context});var o=B(e.getDefaults(),arguments,["frequency","type","modulationType"]);return n._carrier=new ve({context:n.context,detune:o.detune,frequency:o.frequency,onstop:function(){return n.onstop(n)},phase:o.phase,type:o.type}),n.frequency=n._carrier.frequency,n.detune=n._carrier.detune,n._modulator=new ve({context:n.context,phase:o.phase,type:o.modulationType}),n.harmonicity=new Oe({context:n.context,units:"positive",value:o.harmonicity}),n.frequency.chain(n.harmonicity,n._modulator.frequency),n._modulator.chain(n._modulationScale,n._modulationNode.gain),n._carrier.chain(n._modulationNode,n.output),st(n,["frequency","detune","harmonicity"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(ve.getDefaults(),{harmonicity:1,modulationType:"square"})},e.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},e.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},e.prototype._restart=function(t){this._modulator.restart(t),this._carrier.restart(t)},Object.defineProperty(e.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this},e}(he),Se=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type","modulationType"]))||this;n.name="FMOscillator",n._modulationNode=new Vt({context:n.context,gain:0});var o=B(e.getDefaults(),arguments,["frequency","type","modulationType"]);return n._carrier=new ve({context:n.context,detune:o.detune,frequency:0,onstop:function(){return n.onstop(n)},phase:o.phase,type:o.type}),n.detune=n._carrier.detune,n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency}),n._modulator=new ve({context:n.context,phase:o.phase,type:o.modulationType}),n.harmonicity=new Oe({context:n.context,units:"positive",value:o.harmonicity}),n.modulationIndex=new Oe({context:n.context,units:"positive",value:o.modulationIndex}),n.frequency.connect(n._carrier.frequency),n.frequency.chain(n.harmonicity,n._modulator.frequency),n.frequency.chain(n.modulationIndex,n._modulationNode),n._modulator.connect(n._modulationNode.gain),n._modulationNode.connect(n._carrier.frequency),n._carrier.connect(n.output),n.detune.connect(n._modulator.detune),st(n,["modulationIndex","frequency","detune","harmonicity"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(ve.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})},e.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},e.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},e.prototype._restart=function(t){return this._modulator.restart(t),this._carrier.restart(t),this},Object.defineProperty(e.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this},e}(he),Ce=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","width"]))||this;n.name="PulseOscillator",n._widthGate=new Vt({context:n.context,gain:0}),n._thresh=new xe({context:n.context,mapping:function(t){return t<=0?-1:1}});var o=B(e.getDefaults(),arguments,["frequency","width"]);return n.width=new Bt({context:n.context,units:"audioRange",value:o.width}),n._sawtooth=new ve({context:n.context,detune:o.detune,frequency:o.frequency,onstop:function(){return n.onstop(n)},phase:o.phase,type:"sawtooth"}),n.frequency=n._sawtooth.frequency,n.detune=n._sawtooth.detune,n._sawtooth.chain(n._thresh,n.output),n.width.chain(n._widthGate,n._thresh),st(n,["width","frequency","detune"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})},e.prototype._start=function(t){t=this.toSeconds(t),this._sawtooth.start(t),this._widthGate.gain.setValueAtTime(1,t)},e.prototype._stop=function(t){t=this.toSeconds(t),this._sawtooth.stop(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(0,t)},e.prototype._restart=function(t){this._sawtooth.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t)},Object.defineProperty(e.prototype,"phase",{get:function(){return this._sawtooth.phase},set:function(t){this._sawtooth.phase=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return"pulse"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return"pulse"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return 0},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._sawtooth.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this},e}(he),ke=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type","spread"]))||this;n.name="FatOscillator",n._oscillators=[];var o=B(e.getDefaults(),arguments,["frequency","type","spread"]);return n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency}),n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),n._spread=o.spread,n._type=o.type,n._phase=o.phase,n._partials=o.partials,n._partialCount=o.partialCount,n.count=o.count,st(n,["frequency","detune"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(ve.getDefaults(),{count:3,spread:20,type:"sawtooth"})},e.prototype._start=function(t){t=this.toSeconds(t),this._forEach((function(e){return e.start(t)}))},e.prototype._stop=function(t){t=this.toSeconds(t),this._forEach((function(e){return e.stop(t)}))},e.prototype._restart=function(t){this._forEach((function(e){return e.restart(t)}))},e.prototype._forEach=function(t){for(var e=0;e<this._oscillators.length;e++)t(this._oscillators[e],e)},Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._forEach((function(e){return e.type=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"spread",{get:function(){return this._spread},set:function(t){if(this._spread=t,this._oscillators.length>1){var e=-t/2,n=t/(this._oscillators.length-1);this._forEach((function(t,o){return t.detune.value=e+n*o}))}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"count",{get:function(){return this._oscillators.length},set:function(t){var e=this;if(m(t,1),this._oscillators.length!==t){this._forEach((function(t){return t.dispose()})),this._oscillators=[];for(var n=0;n<t;n++){var o=new ve({context:this.context,volume:-6-1.1*t,type:this._type,phase:this._phase+n/t*360,partialCount:this._partialCount,onstop:0===n?function(){return e.onstop(e)}:ct});"custom"===this.type&&(o.partials=this._partials),this.frequency.connect(o.frequency),this.detune.connect(o.detune),o.detune.overridden=!1,o.connect(this.output),this._oscillators[n]=o}this.spread=this._spread,"started"===this.state&&this._forEach((function(t){return t.start()}))}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._phase},set:function(t){this._phase=t,this._forEach((function(e){return e.phase=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return this._oscillators[0].baseType},set:function(t){this._forEach((function(e){return e.baseType=t})),this._type=this._oscillators[0].type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return this._oscillators[0].partials},set:function(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this._type="custom",this._forEach((function(e){return e.partials=t})))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return this._oscillators[0].partialCount},set:function(t){this._partialCount=t,this._forEach((function(e){return e.partialCount=t})),this._type=this._oscillators[0].type},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.frequency.dispose(),this.detune.dispose(),this._forEach((function(t){return t.dispose()})),this},e}(he),Ae=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","modulationFrequency"]))||this;n.name="PWMOscillator",n.sourceType="pwm",n._scale=new Oe({context:n.context,value:2});var o=B(e.getDefaults(),arguments,["frequency","modulationFrequency"]);return n._pulse=new Ce({context:n.context,frequency:o.modulationFrequency}),n._pulse._sawtooth.type="sine",n.modulationFrequency=n._pulse.frequency,n._modulator=new ve({context:n.context,detune:o.detune,frequency:o.frequency,onstop:function(){return n.onstop(n)},phase:o.phase}),n.frequency=n._modulator.frequency,n.detune=n._modulator.detune,n._modulator.chain(n._scale,n._pulse.width),n._pulse.connect(n.output),st(n,["modulationFrequency","frequency","detune"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})},e.prototype._start=function(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)},e.prototype._stop=function(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)},e.prototype._restart=function(t){this._modulator.restart(t),this._pulse.restart(t)},Object.defineProperty(e.prototype,"type",{get:function(){return"pwm"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseType",{get:function(){return"pwm"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return[]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._modulator.phase},set:function(t){this._modulator.phase=t},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this},e}(he),je={am:Te,fat:ke,fm:Se,oscillator:ve,pulse:Ce,pwm:Ae},De=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type"]))||this;n.name="OmniOscillator";var o=B(e.getDefaults(),arguments,["frequency","type"]);return n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency}),n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),st(n,["frequency","detune"]),n.set(o),n}return a(e,t),e.getDefaults=function(){return Object.assign(ve.getDefaults(),Se.getDefaults(),Te.getDefaults(),ke.getDefaults(),Ce.getDefaults(),Ae.getDefaults())},e.prototype._start=function(t){this._oscillator.start(t)},e.prototype._stop=function(t){this._oscillator.stop(t)},e.prototype._restart=function(t){return this._oscillator.restart(t),this},Object.defineProperty(e.prototype,"type",{get:function(){var t=this,e="";return["am","fm","fat"].some((function(e){return t._sourceType===e}))&&(e=this._sourceType),e+this._oscillator.type},set:function(t){"fm"===t.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(3)):"pwm"===t?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===t?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partials",{get:function(){return this._oscillator.partials},set:function(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"partialCount",{get:function(){return this._oscillator.partialCount},set:function(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=t)},enumerable:!0,configurable:!0}),e.prototype.set=function(e){return Reflect.has(e,"type")&&e.type&&(this.type=e.type),t.prototype.set.call(this,e),this},e.prototype._createNewOscillator=function(t){var e=this;if(t!==this._sourceType){this._sourceType=t;var n=je[t],o=this.now();if(this._oscillator){var i=this._oscillator;i.stop(o),this.context.setTimeout((function(){return i.dispose()}),this.blockTime)}this._oscillator=new n({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=function(){return e.onstop(e)},"started"===this.state&&this._oscillator.start(o)}},Object.defineProperty(e.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sourceType",{get:function(){return this._sourceType},set:function(t){var e="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(e=this._oscillator.type),"fm"===t?this.type="fm"+e:"am"===t?this.type="am"+e:"fat"===t?this.type="fat"+e:"oscillator"===t?this.type=e:"pulse"===t?this.type="pulse":"pwm"===t&&(this.type="pwm")},enumerable:!0,configurable:!0}),e.prototype._getOscType=function(t,e){return t instanceof je[e]},Object.defineProperty(e.prototype,"baseType",{get:function(){return this._oscillator.baseType},set:function(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===t||"pwm"===t||(this._oscillator.baseType=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"count",{get:function(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0},set:function(t){this._getOscType(this._oscillator,"fat")&&T(t)&&(this._oscillator.count=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"spread",{get:function(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0},set:function(t){this._getOscType(this._oscillator,"fat")&&T(t)&&(this._oscillator.spread=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"modulationType",{get:function(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0},set:function(t){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&A(t)&&(this._oscillator.modulationType=t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"modulationIndex",{get:function(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"harmonicity",{get:function(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"modulationFrequency",{get:function(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0},enumerable:!0,configurable:!0}),e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){return l(this,(function(e){return[2,_e(this,t)]}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this},e}(he),Ee=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["value"])))||this;return n.override=!1,n.name="Add",n._sum=new Vt({context:n.context}),n.input=n._sum,n.output=n._sum,n.addend=n._param,It(n._constantSource,n._sum),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{value:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._sum.dispose(),this},e}(Bt),Me=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["min","max"])))||this;n.name="Scale";var o=B(e.getDefaults(),arguments,["min","max"]);return n._mult=n.input=new Oe({context:n.context,value:o.max-o.min}),n._add=n.output=new Ee({context:n.context,value:o.min}),n._min=o.min,n._max=o.max,n.input.connect(n.output),n}return a(e,t),e.getDefaults=function(){return Object.assign(be.getDefaults(),{max:1,min:0})},Object.defineProperty(e.prototype,"min",{get:function(){return this._min},set:function(t){this._min=t,this._setRange()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"max",{get:function(){return this._max},set:function(t){this._max=t,this._setRange()},enumerable:!0,configurable:!0}),e.prototype._setRange=function(){this._add.value=this._min,this._mult.value=this._max-this._min},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._add.dispose(),this._mult.dispose(),this},e}(be),Pe=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments)))||this;return n.name="Zero",n._gain=new Vt({context:n.context}),n.output=n._gain,n.input=void 0,Ft(n.context.getConstant(0),n._gain),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),Nt(this.context.getConstant(0),this._gain),this},e}(be),Re=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","min","max"]))||this;n.name="LFO",n._stoppedValue=0,n._units="number",n.convert=!0,n._fromType=Rt.prototype._fromType,n._toType=Rt.prototype._toType,n._is=Rt.prototype._is,n._clampValue=Rt.prototype._clampValue;var o=B(e.getDefaults(),arguments,["frequency","min","max"]);return n._oscillator=new ve({context:n.context,frequency:o.frequency,type:o.type}),n.frequency=n._oscillator.frequency,n._amplitudeGain=new Vt({context:n.context,gain:o.amplitude,units:"normalRange"}),n.amplitude=n._amplitudeGain.gain,n._stoppedSignal=new Bt({context:n.context,units:"audioRange",value:0}),n._zeros=new Pe({context:n.context}),n._a2g=new we({context:n.context}),n._scaler=n.output=new Me({context:n.context,max:o.max,min:o.min}),n.min=o.min,n.max=o.max,n.units=o.units,n._oscillator.chain(n._a2g,n._amplitudeGain,n._scaler),n._zeros.connect(n._a2g),n._stoppedSignal.connect(n._a2g),st(n,["amplitude","frequency"]),n.phase=o.phase,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{amplitude:1,frequency:"4n",max:1,min:0,phase:0,type:"sine",units:"number"})},e.prototype.start=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this},e.prototype.stop=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this},e.prototype.sync=function(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this},e.prototype.unsync=function(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this},Object.defineProperty(e.prototype,"min",{get:function(){return this._toType(this._scaler.min)},set:function(t){t=this._fromType(t),this._scaler.min=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"max",{get:function(){return this._toType(this._scaler.max)},set:function(t){t=this._fromType(t),this._scaler.max=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t,this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t,this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"units",{get:function(){return this._units},set:function(t){var e=this.min,n=this.max;this._units=t,this.min=e,this.max=n},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return this._oscillator.state},enumerable:!0,configurable:!0}),e.prototype.connect=function(t,e,n){return(t instanceof Rt||t instanceof Bt)&&(this.convert=t.convert,this.units=t.units),Wt(this,t,e,n),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._oscillator.dispose(),this._stoppedSignal.dispose(),this._zeros.dispose(),this._scaler.dispose(),this._a2g.dispose(),this._amplitudeGain.dispose(),this.amplitude.dispose(),this},e}(qt);function qe(t,e){void 0===e&&(e=1/0);var n=new WeakMap;return function(o,i){Reflect.defineProperty(o,i,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(o){m(o,t,e),n.set(this,o)}})}}function Ie(t,e){void 0===e&&(e=1/0);var n=new WeakMap;return function(o,i){Reflect.defineProperty(o,i,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(o){m(this.toSeconds(o),t,e),n.set(this,o)}})}}var Fe=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["url","onload"]))||this;n.name="Player",n._activeSources=new Set;var o=B(e.getDefaults(),arguments,["url","onload"]);return n._buffer=new ut({onload:n._onload.bind(n,o.onload),reverse:o.reverse,url:o.url}),n.autostart=o.autostart,n._loop=o.loop,n._loopStart=o.loopStart,n._loopEnd=o.loopEnd,n._playbackRate=o.playbackRate,n.fadeIn=o.fadeIn,n.fadeOut=o.fadeOut,n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:ct,playbackRate:1,reverse:!1})},e.prototype.load=function(t){return u(this,void 0,void 0,(function(){return l(this,(function(e){switch(e.label){case 0:return[4,this._buffer.load(t)];case 1:return e.sent(),this._onload(),[2,this]}}))}))},e.prototype._onload=function(t){void 0===t&&(t=ct),t(),this.autostart&&this.start()},e.prototype._onSourceEnd=function(t){this.onstop(this),this._activeSources.delete(t),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||this._state.setStateAtTime("stopped",this.now())},e.prototype.start=function(e,n,o){return t.prototype.start.call(this,e,n,o),this},e.prototype._start=function(t,e,n){e=this._loop?W(e,this._loopStart):W(e,0);var o=this.toSeconds(e);this._synced&&(o*=this._playbackRate);var i=n;n=W(n,Math.max(this._buffer.duration-o,0));var r=this.toSeconds(n);r/=this._playbackRate,t=this.toSeconds(t);var s=new pe({buffer:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(t+r),this._state.setStateAtTime("stopped",t+r,{implicitEnd:!0})),this._activeSources.add(s),this._loop&&x(i)?s.start(t,o):s.start(t,o,r-this.toSeconds(this.fadeOut))},e.prototype._stop=function(t){var e=this.toSeconds(t);this._activeSources.forEach((function(t){return t.stop(e)}))},e.prototype.restart=function(e,n,o){return t.prototype.restart.call(this,e,n,o),this},e.prototype._restart=function(t,e,n){this._stop(t),this._start(t,e,n)},e.prototype.seek=function(t,e){var n=this.toSeconds(e);if("started"===this._state.getValueAtTime(n)){var o=this.toSeconds(t);this._stop(n),this._start(n,o)}return this},e.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(e.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=t,this.buffer.loaded&&m(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach((function(e){e.loopStart=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=t,this.buffer.loaded&&m(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach((function(e){e.loopEnd=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loop",{get:function(){return this._loop},set:function(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach((function(e){e.loop=t})),t)){var e=this._state.getNextState("stopped",this.now());e&&this._state.cancel(e.time)}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t;var e=this.now(),n=this._state.getNextState("stopped",e);n&&n.implicitEnd&&(this._state.cancel(n.time),this._activeSources.forEach((function(t){return t.cancelStop()}))),this._activeSources.forEach((function(n){n.playbackRate.setValueAtTime(t,e)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"reverse",{get:function(){return this._buffer.reverse},set:function(t){this._buffer.reverse=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loaded",{get:function(){return this._buffer.loaded},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._activeSources.forEach((function(t){return t.dispose()})),this._activeSources.clear(),this._buffer.dispose(),this},c([Ie(0)],e.prototype,"fadeIn",void 0),c([Ie(0)],e.prototype,"fadeOut",void 0),e}(he),Ne=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["urls","onload"],"urls"))||this;n.name="Players",n.input=void 0,n._players=new Map;var o=B(e.getDefaults(),arguments,["urls","onload"],"urls");return n._volume=n.output=new oe({context:n.context,volume:o.volume}),n.volume=n._volume.volume,st(n,"volume"),n._buffers=new se(o.urls,o.onload,o.baseUrl),n.mute=o.mute,n._fadeIn=o.fadeIn,n._fadeOut=o.fadeOut,n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{baseUrl:"",fadeIn:0,fadeOut:0,mute:!1,onload:ct,urls:{},volume:0})},Object.defineProperty(e.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t,this._players.forEach((function(e){e.fadeIn=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t,this._players.forEach((function(e){e.fadeOut=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return Array.from(this._players).some((function(t){var e=p(t,2);e[0];return"started"===e[1].state}))?"started":"stopped"},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._buffers.has(t)},e.prototype.player=function(t){if(d(this.has(t),"No Player with the name "+t+" exists on this object"),!this._players.has(t)){var e=new Fe({context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,url:this._buffers.get(t)}).connect(this.output);this._players.set(t,e)}return this._players.get(t)},Object.defineProperty(e.prototype,"loaded",{get:function(){return this._buffers.loaded},enumerable:!0,configurable:!0}),e.prototype.add=function(t,e,n){return d(!this._buffers.has(t),"A buffer with that name already exists on this object"),this._buffers.add(t,e,n),this},e.prototype.stopAll=function(t){return this._players.forEach((function(e){return e.stop(t)})),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._volume.dispose(),this.volume.dispose(),this._players.forEach((function(t){return t.dispose()})),this._buffers.dispose(),this},e}(qt),Ve=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["url","onload"]))||this;n.name="GrainPlayer",n._loopStart=0,n._loopEnd=0,n._activeSources=[];var o=B(e.getDefaults(),arguments,["url","onload"]);return n.buffer=new ut({onload:o.onload,reverse:o.reverse,url:o.url}),n._clock=new Xt({context:n.context,callback:n._tick.bind(n),frequency:1/o.grainSize}),n._playbackRate=o.playbackRate,n._grainSize=o.grainSize,n._overlap=o.overlap,n.detune=o.detune,n.overlap=o.overlap,n.loop=o.loop,n.playbackRate=o.playbackRate,n.grainSize=o.grainSize,n.loopStart=o.loopStart,n.loopEnd=o.loopEnd,n.reverse=o.reverse,n._clock.on("stop",n._onstop.bind(n)),n}return a(e,t),e.getDefaults=function(){return Object.assign(he.getDefaults(),{onload:ct,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1})},e.prototype._start=function(t,e,n){e=W(e,0),e=this.toSeconds(e),t=this.toSeconds(t);var o=1/this._clock.frequency.getValueAtTime(t);this._clock.start(t,e/o),n&&this.stop(t+this.toSeconds(n))},e.prototype.restart=function(e,n,o){return t.prototype.restart.call(this,e,n,o),this},e.prototype._restart=function(t,e,n){this._stop(t),this._start(t,e,n)},e.prototype._stop=function(t){this._clock.stop(t)},e.prototype._onstop=function(t){this._activeSources.forEach((function(e){e.fadeOut=0,e.stop(t)})),this.onstop(this)},e.prototype._tick=function(t){var e=this,n=this._clock.getTicksAtTime(t),o=n*(1/this._clock.frequency.getValueAtTime(t));if(this.log("offset",o),!this.loop&&o>this.buffer.duration)this.stop(t);else{var i=o<this._overlap?0:this._overlap,r=new pe({context:this.context,buffer:this.buffer,fadeIn:i,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:bt(this.detune/100)}).connect(this.output);r.start(t,this._grainSize*n),r.stop(t+this._grainSize/this.playbackRate),this._activeSources.push(r),r.onended=function(){var t=e._activeSources.indexOf(r);-1!==t&&e._activeSources.splice(t,1)}}},Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){m(t,.001),this._playbackRate=t,this.grainSize=this._grainSize},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this.buffer.loaded&&m(this.toSeconds(t),0,this.buffer.duration),this._loopStart=this.toSeconds(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this.buffer.loaded&&m(this.toSeconds(t),0,this.buffer.duration),this._loopEnd=this.toSeconds(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"reverse",{get:function(){return this.buffer.reverse},set:function(t){this.buffer.reverse=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"grainSize",{get:function(){return this._grainSize},set:function(t){this._grainSize=this.toSeconds(t),this._clock.frequency.setValueAtTime(this._playbackRate/this._grainSize,this.now())},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"overlap",{get:function(){return this._overlap},set:function(t){this._overlap=this.toSeconds(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loaded",{get:function(){return this.buffer.loaded},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.buffer.dispose(),this._clock.dispose(),this._activeSources.forEach((function(t){return t.dispose()})),this},e}(he),Le=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Abs",e._abs=new xe({context:e.context,mapping:function(t){return Math.abs(t)<.001?0:Math.abs(t)}}),e.input=e._abs,e.output=e._abs,e}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._abs.dispose(),this},e}(be),ze=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="GainToAudio",e._norm=new xe({context:e.context,mapping:function(t){return 2*Math.abs(t)-1}}),e.input=e._norm,e.output=e._norm,e}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._norm.dispose(),this},e}(be),Be=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Negate",e._multiply=new Oe({context:e.context,value:-1}),e.input=e._multiply,e.output=e._multiply,e}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._multiply.dispose(),this},e}(be),We=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["value"])))||this;return n.override=!1,n.name="Subtract",n._sum=new Vt({context:n.context}),n.input=n._sum,n.output=n._sum,n._neg=new Be({context:n.context}),n.subtrahend=n._param,It(n._constantSource,n._neg,n._sum),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{value:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._neg.dispose(),this._sum.dispose(),this},e}(Bt),Ue=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments)))||this;return n.name="GreaterThanZero",n._thresh=n.output=new xe({context:n.context,length:127,mapping:function(t){return t<=0?0:1}}),n._scale=n.input=new Oe({context:n.context,value:1e4}),n._scale.connect(n._thresh),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._scale.dispose(),this._thresh.dispose(),this},e}(be),Ge=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["value"])))||this;n.name="GreaterThan",n.override=!1;var o=B(e.getDefaults(),arguments,["value"]);return n._subtract=n.input=new We({context:n.context,value:o.value}),n._gtz=n.output=new Ue({context:n.context}),n.comparator=n._param=n._subtract.subtrahend,st(n,"comparator"),n._subtract.connect(n._gtz),n}return a(e,t),e.getDefaults=function(){return Object.assign(Bt.getDefaults(),{value:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._gtz.dispose(),this._subtract.dispose(),this.comparator.dispose(),this},e}(Bt),Ye=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["value"])))||this;n.name="Pow";var o=B(e.getDefaults(),arguments,["value"]);return n._exponentScaler=n.input=n.output=new xe({context:n.context,mapping:n._expFunc(o.value),length:8192}),n._exponent=o.value,n}return a(e,t),e.getDefaults=function(){return Object.assign(be.getDefaults(),{value:1})},e.prototype._expFunc=function(t){return function(e){return Math.pow(Math.abs(e),t)}},Object.defineProperty(e.prototype,"value",{get:function(){return this._exponent},set:function(t){this._exponent=t,this._exponentScaler.setMap(this._expFunc(this._exponent))},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._exponentScaler.dispose(),this},e}(be),Xe=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["min","max","exponent"])))||this;n.name="ScaleExp";var o=B(e.getDefaults(),arguments,["min","max","exponent"]);return n.input=n._exp=new Ye({context:n.context,value:o.exponent}),n._exp.connect(n._mult),n}return a(e,t),e.getDefaults=function(){return Object.assign(Me.getDefaults(),{exponent:1})},Object.defineProperty(e.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._exp.dispose(),this},e}(Me),Ze=function(t){function e(){var e=t.call(this,B(Bt.getDefaults(),arguments,["value","units"]))||this;e.name="SyncedSignal",e.override=!1;var n=B(Bt.getDefaults(),arguments,["value","units"]);return e._lastVal=n.value,e._synced=e.context.transport.scheduleRepeat(e._onTick.bind(e),"1i"),e._syncedCallback=e._anchorValue.bind(e),e.context.transport.on("start",e._syncedCallback),e.context.transport.on("pause",e._syncedCallback),e.context.transport.on("stop",e._syncedCallback),e._constantSource.disconnect(),e._constantSource.stop(0),e._constantSource=e.output=new zt({context:e.context,offset:n.value,units:n.units}).start(0),e.setValueAtTime(n.value,0),e}return a(e,t),e.prototype._onTick=function(e){var n=t.prototype.getValueAtTime.call(this,this.context.transport.seconds);this._lastVal!==n&&(this._lastVal=n,this._constantSource.offset.setValueAtTime(n,e))},e.prototype._anchorValue=function(e){var n=t.prototype.getValueAtTime.call(this,this.context.transport.seconds);this._lastVal=n,this._constantSource.offset.cancelAndHoldAtTime(e),this._constantSource.offset.setValueAtTime(n,e)},e.prototype.getValueAtTime=function(e){var n=new Dt(this.context,e).toSeconds();return t.prototype.getValueAtTime.call(this,n)},e.prototype.setValueAtTime=function(e,n){var o=new Dt(this.context,n).toSeconds();return t.prototype.setValueAtTime.call(this,e,o),this},e.prototype.linearRampToValueAtTime=function(e,n){var o=new Dt(this.context,n).toSeconds();return t.prototype.linearRampToValueAtTime.call(this,e,o),this},e.prototype.exponentialRampToValueAtTime=function(e,n){var o=new Dt(this.context,n).toSeconds();return t.prototype.exponentialRampToValueAtTime.call(this,e,o),this},e.prototype.setTargetAtTime=function(e,n,o){var i=new Dt(this.context,n).toSeconds();return t.prototype.setTargetAtTime.call(this,e,i,o),this},e.prototype.cancelScheduledValues=function(e){var n=new Dt(this.context,e).toSeconds();return t.prototype.cancelScheduledValues.call(this,n),this},e.prototype.setValueCurveAtTime=function(e,n,o,i){var r=new Dt(this.context,n).toSeconds();return o=this.toSeconds(o),t.prototype.setValueCurveAtTime.call(this,e,r,o,i),this},e.prototype.cancelAndHoldAtTime=function(e){var n=new Dt(this.context,e).toSeconds();return t.prototype.cancelAndHoldAtTime.call(this,n),this},e.prototype.setRampPoint=function(e){var n=new Dt(this.context,e).toSeconds();return t.prototype.setRampPoint.call(this,n),this},e.prototype.exponentialRampTo=function(e,n,o){var i=new Dt(this.context,o).toSeconds();return t.prototype.exponentialRampTo.call(this,e,n,i),this},e.prototype.linearRampTo=function(e,n,o){var i=new Dt(this.context,o).toSeconds();return t.prototype.linearRampTo.call(this,e,n,i),this},e.prototype.targetRampTo=function(e,n,o){var i=new Dt(this.context,o).toSeconds();return t.prototype.targetRampTo.call(this,e,n,i),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.context.transport.clear(this._synced),this.context.transport.off("start",this._syncedCallback),this.context.transport.off("pause",this._syncedCallback),this.context.transport.off("stop",this._syncedCallback),this._constantSource.dispose(),this},e}(Bt),Qe=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["attack","decay","sustain","release"]))||this;n.name="Envelope",n._sig=new Bt({context:n.context,value:0}),n.output=n._sig,n.input=void 0;var o=B(e.getDefaults(),arguments,["attack","decay","sustain","release"]);return n.attack=o.attack,n.decay=o.decay,n.sustain=o.sustain,n.release=o.release,n.attackCurve=o.attackCurve,n.releaseCurve=o.releaseCurve,n.decayCurve=o.decayCurve,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})},Object.defineProperty(e.prototype,"value",{get:function(){return this.getValueAtTime(this.now())},enumerable:!0,configurable:!0}),e.prototype._getCurve=function(t,e){if(A(t))return t;var n=void 0;for(n in He)if(He[n][e]===t)return n;return t},e.prototype._setCurve=function(t,e,n){if(A(n)&&Reflect.has(He,n)){var o=He[n];S(o)?"_decayCurve"!==t&&(this[t]=o[e]):this[t]=o}else{if(!k(n)||"_decayCurve"===t)throw new Error("Envelope: invalid curve: "+n);this[t]=n}},Object.defineProperty(e.prototype,"attackCurve",{get:function(){return this._getCurve(this._attackCurve,"In")},set:function(t){this._setCurve("_attackCurve","In",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"releaseCurve",{get:function(){return this._getCurve(this._releaseCurve,"Out")},set:function(t){this._setCurve("_releaseCurve","Out",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"decayCurve",{get:function(){return this._decayCurve},set:function(t){d(["linear","exponential"].some((function(e){return e===t})),"Invalid envelope curve: "+t),this._decayCurve=t},enumerable:!0,configurable:!0}),e.prototype.triggerAttack=function(t,e){void 0===e&&(e=1),this.log("triggerAttack",t,e),t=this.toSeconds(t);var n=this.toSeconds(this.attack),o=this.toSeconds(this.decay),i=this.getValueAtTime(t);i>0&&(n=(1-i)/(1/n));if(n<this.sampleTime)this._sig.setValueAtTime(e,t);else if("linear"===this._attackCurve)this._sig.linearRampTo(e,n,t);else if("exponential"===this._attackCurve)this._sig.targetRampTo(e,n,t);else{this._sig.cancelAndHoldAtTime(t);for(var r=this._attackCurve,s=1;s<r.length;s++)if(r[s-1]<=i&&i<=r[s]){(r=this._attackCurve.slice(s))[0]=i;break}this._sig.setValueCurveAtTime(r,t,n,e)}if(o){var a=e*this.sustain,c=t+n;this.log("decay",c),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(a,o+c):this._sig.exponentialApproachValueAtTime(a,c,o)}return this},e.prototype.triggerRelease=function(t){this.log("triggerRelease",t),t=this.toSeconds(t);var e=this.getValueAtTime(t);if(e>0){var n=this.toSeconds(this.release);n<this.sampleTime?this._sig.setValueAtTime(0,t):"linear"===this._releaseCurve?this._sig.linearRampTo(0,n,t):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,n,t):(d(k(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(this._releaseCurve,t,n,e))}return this},e.prototype.getValueAtTime=function(t){return this._sig.getValueAtTime(t)},e.prototype.triggerAttackRelease=function(t,e,n){return void 0===n&&(n=1),e=this.toSeconds(e),this.triggerAttack(e,n),this.triggerRelease(e+this.toSeconds(t)),this},e.prototype.cancel=function(t){return this._sig.cancelScheduledValues(this.toSeconds(t)),this},e.prototype.connect=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),Wt(this,t,e,n),this},e.prototype.asArray=function(t){return void 0===t&&(t=1024),u(this,void 0,void 0,(function(){var e,n,o,i,r,s,a;return l(this,(function(c){switch(c.label){case 0:return e=t/this.context.sampleRate,n=new lt(1,e,this.context.sampleRate),o=this.toSeconds(this.attack)+this.toSeconds(this.decay),i=o+this.toSeconds(this.release),s=i+(r=.1*i),(a=new this.constructor(Object.assign(this.get(),{attack:e*this.toSeconds(this.attack)/s,decay:e*this.toSeconds(this.decay)/s,release:e*this.toSeconds(this.release)/s,context:n})))._sig.toDestination(),a.triggerAttackRelease(e*(o+r)/s,0),[4,n.render()];case 1:return[2,c.sent().getChannelData(0)]}}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._sig.dispose(),this},c([Ie(0)],e.prototype,"attack",void 0),c([Ie(0)],e.prototype,"decay",void 0),c([qe(0,1)],e.prototype,"sustain",void 0),c([Ie(0)],e.prototype,"release",void 0),e}(qt),He=function(){var t,e,n=[];for(t=0;t<128;t++)n[t]=Math.sin(t/127*(Math.PI/2));var o=[];for(t=0;t<127;t++){e=t/127;var i=Math.sin(e*(2*Math.PI)*6.4-Math.PI/2)+1;o[t]=i/10+.83*e}o[127]=1;var r=[];for(t=0;t<128;t++)r[t]=Math.ceil(t/127*5)/5;var s=[];for(t=0;t<128;t++)e=t/127,s[t]=.5*(1-Math.cos(Math.PI*e));var a,c=[];for(t=0;t<128;t++){e=t/127;var u=4*Math.pow(e,3)+.2,l=Math.cos(u*Math.PI*2*e);c[t]=Math.abs(l*(1-e))}function h(t){for(var e=new Array(t.length),n=0;n<t.length;n++)e[n]=1-t[n];return e}return{bounce:{In:h(c),Out:c},cosine:{In:n,Out:(a=n,a.slice(0).reverse())},exponential:"exponential",linear:"linear",ripple:{In:o,Out:h(o)},sine:{In:s,Out:h(s)},step:{In:r,Out:h(r)}}}(),$e=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n._scheduledEvents=[],n._synced=!1,n._original_triggerAttack=n.triggerAttack,n._original_triggerRelease=n.triggerRelease;var o=B(e.getDefaults(),arguments);return n._volume=n.output=new oe({context:n.context,volume:o.volume}),n.volume=n._volume.volume,st(n,"volume"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{volume:0})},e.prototype.sync=function(){return this._synced||(this._synced=!0,this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this},e.prototype._syncMethod=function(t,e){var n=this,o=this["_original_"+t]=this[t];this[t]=function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];var r=t[e],s=n.context.transport.schedule((function(i){t[e]=i,o.apply(n,t)}),r);n._scheduledEvents.push(s)}},e.prototype.unsync=function(){var t=this;return this._scheduledEvents.forEach((function(e){return t.context.transport.clear(e)})),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this},e.prototype.triggerAttackRelease=function(t,e,n,o){var i=this.toSeconds(n),r=this.toSeconds(e);return this.triggerAttack(t,i,o),this.triggerRelease(i+r),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this},e}(qt),Je=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this,o=B(e.getDefaults(),arguments);return n.portamento=o.portamento,n.onsilence=o.onsilence,n}return a(e,t),e.getDefaults=function(){return Object.assign($e.getDefaults(),{detune:0,onsilence:ct,portamento:0})},e.prototype.triggerAttack=function(t,e,n){void 0===n&&(n=1),this.log("triggerAttack",t,e,n);var o=this.toSeconds(e);return this._triggerEnvelopeAttack(o,n),this.setNote(t,o),this},e.prototype.triggerRelease=function(t){this.log("triggerRelease",t);var e=this.toSeconds(t);return this._triggerEnvelopeRelease(e),this},e.prototype.setNote=function(t,e){var n=this.toSeconds(e),o=t instanceof Ct?t.toFrequency():t;if(this.portamento>0&&this.getLevelAtTime(n)>.05){var i=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(o,i,n)}else this.frequency.setValueAtTime(o,n);return this},c([Ie(0)],e.prototype,"portamento",void 0),e}($e),Ke=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["attack","decay","sustain","release"]))||this;return n.name="AmplitudeEnvelope",n._gainNode=new Vt({context:n.context,gain:0}),n.output=n._gainNode,n.input=n._gainNode,n._sig.connect(n._gainNode.gain),n.output=n._gainNode,n.input=n._gainNode,n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._gainNode.dispose(),this},e}(Qe),tn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="Synth";var o=B(e.getDefaults(),arguments);return n.oscillator=new De(Object.assign({context:n.context,detune:o.detune,onstop:function(){return n.onsilence(n)}},o.oscillator)),n.frequency=n.oscillator.frequency,n.detune=n.oscillator.detune,n.envelope=new Ke(Object.assign({context:n.context},o.envelope)),n.oscillator.chain(n.envelope,n.output),st(n,["oscillator","frequency","detune","envelope"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Je.getDefaults(),{envelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(U(De.getDefaults(),f(Object.keys(he.getDefaults()),["frequency","detune"])),{type:"triangle"})})},e.prototype._triggerEnvelopeAttack=function(t,e){if(this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain){var n=this.toSeconds(this.envelope.attack),o=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+n+o)}},e.prototype._triggerEnvelopeRelease=function(t){this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))},e.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.oscillator.dispose(),this.envelope.dispose(),this},e}(Je),en=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="ModulationSynth";var o=B(e.getDefaults(),arguments);return n._carrier=new tn({context:n.context,oscillator:o.oscillator,envelope:o.envelope,onsilence:function(){return n.onsilence(n)},volume:-10}),n._modulator=new tn({context:n.context,oscillator:o.modulation,envelope:o.modulationEnvelope,volume:-10}),n.oscillator=n._carrier.oscillator,n.envelope=n._carrier.envelope,n.modulation=n._modulator.oscillator,n.modulationEnvelope=n._modulator.envelope,n.frequency=new Bt({context:n.context,units:"frequency"}),n.detune=new Bt({context:n.context,value:o.detune,units:"cents"}),n.harmonicity=new Oe({context:n.context,value:o.harmonicity,minValue:0}),n._modulationNode=new Vt({context:n.context,gain:0}),st(n,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Je.getDefaults(),{harmonicity:3,oscillator:Object.assign(U(De.getDefaults(),f(Object.keys(he.getDefaults()),["frequency","detune"])),{type:"sine"}),envelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(U(De.getDefaults(),f(Object.keys(he.getDefaults()),["frequency","detune"])),{type:"square"}),modulationEnvelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})},e.prototype._triggerEnvelopeAttack=function(t,e){this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t,e)},e.prototype._triggerEnvelopeRelease=function(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},e.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this},e}(Je),nn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;return n.name="AMSynth",n._modulationScale=new we({context:n.context}),n.frequency.connect(n._carrier.frequency),n.frequency.chain(n.harmonicity,n._modulator.frequency),n.detune.fan(n._carrier.detune,n._modulator.detune),n._modulator.chain(n._modulationScale,n._modulationNode.gain),n._carrier.chain(n._modulationNode,n.output),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._modulationScale.dispose(),this},e}(en),on=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type","rolloff"]))||this;n.name="Filter",n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context}),n._filters=[];var o=B(e.getDefaults(),arguments,["frequency","type","rolloff"]);return n._filters=[],n.Q=new Bt({context:n.context,units:"positive",value:o.Q}),n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency}),n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),n.gain=new Bt({context:n.context,units:"decibels",value:o.gain}),n._type=o.type,n.rolloff=o.rolloff,st(n,["detune","frequency","gain","Q"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})},Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){d(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t),"Invalid filter type: "+t),this._type=t,this._filters.forEach((function(e){return e.type=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rolloff",{get:function(){return this._rolloff},set:function(t){var e=T(t)?t:parseInt(t,10),n=[-12,-24,-48,-96],o=n.indexOf(e);d(-1!==o,"rolloff can only be "+n.join(", ")),o+=1,this._rolloff=e,this.input.disconnect(),this._filters.forEach((function(t){return t.disconnect()})),this._filters=new Array(o);for(var i=0;i<o;i++){var r=this.context.createBiquadFilter();r.type=this._type,this.frequency.connect(r.frequency),this.detune.connect(r.detune),this.Q.connect(r.Q),this.gain.connect(r.gain),this._filters[i]=r}this._internalChannels=this._filters,It.apply(void 0,f([this.input],this._internalChannels,[this.output]))},enumerable:!0,configurable:!0}),e.prototype.getFrequencyResponse=function(t){var e=this;void 0===t&&(t=128);for(var n=new Float32Array(t).map((function(){return 1})),o=new Float32Array(t),i=0;i<t;i++){var r=19980*Math.pow(i/t,2)+20;o[i]=r}var s=new Float32Array(t),a=new Float32Array(t);return this._filters.forEach((function(){var t=e.context.createBiquadFilter();t.type=e._type,t.Q.value=e.Q.value,t.frequency.value=e.frequency.value,t.gain.value=e.gain.value,t.getFrequencyResponse(o,s,a),s.forEach((function(t,e){n[e]*=t}))})),n},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._filters.forEach((function(t){t.disconnect()})),at(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this},e}(qt),rn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["attack","decay","sustain","release"]))||this;n.name="FrequencyEnvelope";var o=B(e.getDefaults(),arguments,["attack","decay","sustain","release"]);return n._octaves=o.octaves,n._baseFrequency=n.toFrequency(o.baseFrequency),n._exponent=n.input=new Ye({context:n.context,value:o.exponent}),n._scale=n.output=new Me({context:n.context,min:n._baseFrequency,max:n._baseFrequency*Math.pow(2,n._octaves)}),n._sig.chain(n._exponent,n._scale),n}return a(e,t),e.getDefaults=function(){return Object.assign(Qe.getDefaults(),{baseFrequency:200,exponent:1,octaves:4})},Object.defineProperty(e.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){var e=this.toFrequency(t);m(e,0),this._baseFrequency=e,this._scale.min=this._baseFrequency,this.octaves=this._octaves},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"octaves",{get:function(){return this._octaves},set:function(t){m(t,0),this._octaves=t,this._scale.max=this._baseFrequency*Math.pow(2,t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"exponent",{get:function(){return this._exponent.value},set:function(t){this._exponent.value=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._exponent.dispose(),this._scale.dispose(),this},e}(Qe),sn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="MonoSynth";var o=B(e.getDefaults(),arguments);return n.oscillator=new De(Object.assign(o.oscillator,{context:n.context,detune:o.detune,onstop:function(){return n.onsilence(n)}})),n.frequency=n.oscillator.frequency,n.detune=n.oscillator.detune,n.filter=new on(Object.assign(o.filter,{context:n.context})),n.filterEnvelope=new rn(Object.assign(o.filterEnvelope,{context:n.context})),n.envelope=new Ke(Object.assign(o.envelope,{context:n.context})),n.oscillator.chain(n.filter,n.envelope,n.output),n.filterEnvelope.connect(n.filter.frequency),st(n,["oscillator","frequency","detune","filter","filterEnvelope","envelope"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Je.getDefaults(),{envelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.9}),filter:Object.assign(U(on.getDefaults(),Object.keys(qt.getDefaults())),{Q:1,rolloff:-12,type:"lowpass"}),filterEnvelope:Object.assign(U(rn.getDefaults(),Object.keys(qt.getDefaults())),{attack:.6,baseFrequency:200,decay:.2,exponent:2,octaves:3,release:2,sustain:.5}),oscillator:Object.assign(U(De.getDefaults(),Object.keys(he.getDefaults())),{type:"sawtooth"})})},e.prototype._triggerEnvelopeAttack=function(t,e){if(void 0===e&&(e=1),this.envelope.triggerAttack(t,e),this.filterEnvelope.triggerAttack(t),this.oscillator.start(t),0===this.envelope.sustain){var n=this.toSeconds(this.envelope.attack),o=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+n+o)}},e.prototype._triggerEnvelopeRelease=function(t){this.envelope.triggerRelease(t),this.filterEnvelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))},e.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.oscillator.dispose(),this.envelope.dispose(),this.filterEnvelope.dispose(),this.filter.dispose(),this},e}(Je),an=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="DuoSynth";var o=B(e.getDefaults(),arguments);return n.voice0=new sn(Object.assign(o.voice0,{context:n.context,onsilence:function(){return n.onsilence(n)}})),n.voice1=new sn(Object.assign(o.voice1,{context:n.context})),n.harmonicity=new Oe({context:n.context,units:"positive",value:o.harmonicity}),n._vibrato=new Re({frequency:o.vibratoRate,context:n.context,min:-50,max:50}),n._vibrato.start(),n.vibratoRate=n._vibrato.frequency,n._vibratoGain=new Vt({context:n.context,units:"normalRange",gain:o.vibratoAmount}),n.vibratoAmount=n._vibratoGain.gain,n.frequency=new Bt({context:n.context,units:"frequency",value:440}),n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),n.frequency.connect(n.voice0.frequency),n.frequency.chain(n.harmonicity,n.voice1.frequency),n._vibrato.connect(n._vibratoGain),n._vibratoGain.fan(n.voice0.detune,n.voice1.detune),n.detune.fan(n.voice0.detune,n.voice1.detune),n.voice0.connect(n.output),n.voice1.connect(n.output),st(n,["voice0","voice1","frequency","vibratoAmount","vibratoRate"]),n}return a(e,t),e.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.voice0.envelope.getValueAtTime(t)+this.voice1.envelope.getValueAtTime(t)},e.getDefaults=function(){return z(Je.getDefaults(),{vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:z(U(sn.getDefaults(),Object.keys(Je.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}),voice1:z(U(sn.getDefaults(),Object.keys(Je.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}})})},e.prototype._triggerEnvelopeAttack=function(t,e){this.voice0._triggerEnvelopeAttack(t,e),this.voice1._triggerEnvelopeAttack(t,e)},e.prototype._triggerEnvelopeRelease=function(t){return this.voice0._triggerEnvelopeRelease(t),this.voice1._triggerEnvelopeRelease(t),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.voice0.dispose(),this.voice1.dispose(),this.frequency.dispose(),this.detune.dispose(),this._vibrato.dispose(),this.vibratoRate.dispose(),this._vibratoGain.dispose(),this.harmonicity.dispose(),this},e}(Je),cn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="FMSynth";var o=B(e.getDefaults(),arguments);return n.modulationIndex=new Oe({context:n.context,value:o.modulationIndex}),n.frequency.connect(n._carrier.frequency),n.frequency.chain(n.harmonicity,n._modulator.frequency),n.frequency.chain(n.modulationIndex,n._modulationNode),n.detune.fan(n._carrier.detune,n._modulator.detune),n._modulator.connect(n._modulationNode.gain),n._modulationNode.connect(n._carrier.frequency),n._carrier.connect(n.output),n}return a(e,t),e.getDefaults=function(){return Object.assign(en.getDefaults(),{modulationIndex:10})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.modulationIndex.dispose(),this},e}(en),un=[1,1.483,1.932,2.546,2.63,3.897],ln=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="MetalSynth",n._oscillators=[],n._freqMultipliers=[];var o=B(e.getDefaults(),arguments);n.detune=new Bt({context:n.context,units:"cents",value:o.detune}),n.frequency=new Bt({context:n.context,units:"frequency"}),n._amplitude=new Vt({context:n.context,gain:0}).connect(n.output),n._highpass=new on({Q:0,context:n.context,type:"highpass"}).connect(n._amplitude);for(var i=0;i<un.length;i++){var r=new Se({context:n.context,harmonicity:o.harmonicity,modulationIndex:o.modulationIndex,modulationType:"square",onstop:0===i?function(){return n.onsilence(n)}:ct,type:"square"});r.connect(n._highpass),n._oscillators[i]=r;var s=new Oe({context:n.context,value:un[i]});n._freqMultipliers[i]=s,n.frequency.chain(s,r.frequency),n.detune.connect(r.detune)}return n._filterFreqScaler=new Me({context:n.context,max:7e3,min:n.toFrequency(o.resonance)}),n.envelope=new Qe({attack:o.envelope.attack,attackCurve:"linear",context:n.context,decay:o.envelope.decay,release:o.envelope.release,sustain:0}),n.envelope.chain(n._filterFreqScaler,n._highpass.frequency),n.envelope.connect(n._amplitude.gain),n._octaves=o.octaves,n.octaves=o.octaves,n}return a(e,t),e.getDefaults=function(){return z(Je.getDefaults(),{envelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{attack:.001,decay:1.4,release:.2}),harmonicity:5.1,modulationIndex:32,octaves:1.5,resonance:4e3})},e.prototype._triggerEnvelopeAttack=function(t,e){var n=this;return void 0===e&&(e=1),this.envelope.triggerAttack(t,e),this._oscillators.forEach((function(e){return e.start(t)})),0===this.envelope.sustain&&this._oscillators.forEach((function(e){e.stop(t+n.toSeconds(n.envelope.attack)+n.toSeconds(n.envelope.decay))})),this},e.prototype._triggerEnvelopeRelease=function(t){var e=this;return this.envelope.triggerRelease(t),this._oscillators.forEach((function(n){return n.stop(t+e.toSeconds(e.envelope.release))})),this},e.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},Object.defineProperty(e.prototype,"modulationIndex",{get:function(){return this._oscillators[0].modulationIndex.value},set:function(t){this._oscillators.forEach((function(e){return e.modulationIndex.value=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"harmonicity",{get:function(){return this._oscillators[0].harmonicity.value},set:function(t){this._oscillators.forEach((function(e){return e.harmonicity.value=t}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"resonance",{get:function(){return this._filterFreqScaler.min},set:function(t){this._filterFreqScaler.min=this.toFrequency(t),this.octaves=this._octaves},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,t)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._oscillators.forEach((function(t){return t.dispose()})),this._freqMultipliers.forEach((function(t){return t.dispose()})),this.frequency.dispose(),this.detune.dispose(),this._filterFreqScaler.dispose(),this._amplitude.dispose(),this.envelope.dispose(),this._highpass.dispose(),this},e}(Je),hn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="MembraneSynth",n.portamento=0;var o=B(e.getDefaults(),arguments);return n.pitchDecay=o.pitchDecay,n.octaves=o.octaves,st(n,["oscillator","envelope"]),n}return a(e,t),e.getDefaults=function(){return z(Je.getDefaults(),tn.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})},e.prototype.setNote=function(t,e){var n=this.toSeconds(e),o=this.toFrequency(t instanceof Ct?t.toFrequency():t),i=o*this.octaves;return this.oscillator.frequency.setValueAtTime(i,n),this.oscillator.frequency.exponentialRampToValueAtTime(o,n+this.toSeconds(this.pitchDecay)),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this},c([qe(0)],e.prototype,"octaves",void 0),c([Ie(0)],e.prototype,"pitchDecay",void 0),e}(tn),pn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="NoiseSynth";var o=B(e.getDefaults(),arguments);return n.noise=new fe(Object.assign({context:n.context},o.noise)),n.envelope=new Ke(Object.assign({context:n.context},o.envelope)),n.noise.chain(n.envelope,n.output),n}return a(e,t),e.getDefaults=function(){return Object.assign($e.getDefaults(),{envelope:Object.assign(U(Qe.getDefaults(),Object.keys(qt.getDefaults())),{decay:.1,sustain:0}),noise:Object.assign(U(fe.getDefaults(),Object.keys(he.getDefaults())),{type:"white"})})},e.prototype.triggerAttack=function(t,e){return void 0===e&&(e=1),t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.noise.start(t),0===this.envelope.sustain&&this.noise.stop(t+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay)),this},e.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.noise.stop(t+this.toSeconds(this.envelope.release)),this},e.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},e.prototype.triggerAttackRelease=function(t,e,n){return void 0===n&&(n=1),e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,n),this.triggerRelease(e+t),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.noise.dispose(),this.envelope.dispose(),this},e}($e),fn=function(t){function e(e){var n=t.call(this,e)||this;n.name="ToneAudioWorklet",n.workletOptions={},n.onprocessorerror=ct;var o=URL.createObjectURL(new Blob([n._audioWorklet()],{type:"text/javascript"})),i=n._audioWorkletName();return n.context.addAudioWorkletModule(o,i).then((function(){n.disposed||(n._worklet=n.context.createAudioWorkletNode(i,n.workletOptions),n._worklet.onprocessorerror=n.onprocessorerror.bind(n),n.onReady(n._worklet))})),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._worklet&&this._worklet.disconnect(),this},e}(qt),dn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["delayTime","resonance"]))||this;n.name="FeedbackCombFilter",n.workletOptions={numberOfInputs:1,numberOfOutputs:1,channelCount:1};var o=B(e.getDefaults(),arguments,["delayTime","resonance"]);n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context});var i=n.context.createGain();return n.delayTime=new Rt({context:n.context,value:o.delayTime,units:"time",minValue:0,maxValue:1,param:i.gain,swappable:!0}),n.resonance=new Rt({context:n.context,value:o.resonance,units:"normalRange",param:i.gain,swappable:!0}),st(n,["resonance","delayTime"]),n}return a(e,t),e.prototype._audioWorkletName=function(){return"feedback-comb-filter"},e.prototype._audioWorklet=function(){return' \n\t\t\tregisterProcessor("'+this._audioWorkletName()+'", class extends AudioWorkletProcessor {\n\t\t\t\tstatic get parameterDescriptors() {\n\t\t\t\t\treturn [{\n\t\t\t\t\t\tname: "delayTime",\n\t\t\t\t\t\tdefaultValue: 0.1,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: "feedback",\n\t\t\t\t\t\tdefaultValue: 0.5,\n\t\t\t\t\t\tminValue: 0,\n\t\t\t\t\t\tmaxValue: 0.9999,\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t\n\t\t\t\tconstructor(options) {\n\t\t\t\t\tsuper(options);\n\t\t\t\t\tthis.delayBuffer = new Float32Array(sampleRate);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tgetParameter(parameter, index) {\n\t\t\t\t\tif (parameter.length > 1) {\n\t\t\t\t\t\treturn parameter[index];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn parameter[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprocess(inputs, outputs, parameters) {\n\t\t\t\t\tconst input = inputs[0];\n\t\t\t\t\tconst output = outputs[0];\n\t\t\t\t\tconst delayLength = this.delayBuffer.length;\n\t\t\t\t\tconst inputChannel = input[0];\n\t\t\t\t\tconst outputChannel = output[0];\n\t\t\t\t\tconst delayTimeParam = parameters.delayTime;\n\t\t\t\t\tconst feedbackParam = parameters.feedback;\n\t\t\t\t\tinputChannel.forEach((value, index) => {\n\t\t\t\t\t\tconst delayTime = this.getParameter(delayTimeParam, index);\n\t\t\t\t\t\tconst feedback = this.getParameter(feedbackParam, index);\n\t\t\t\t\t\tconst delaySamples = Math.floor(delayTime * sampleRate);\n\t\t\t\t\t\tconst currentIndex = (currentFrame + index) % delayLength;\n\t\t\t\t\t\tconst delayedIndex = (currentFrame + index + delaySamples) % delayLength;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// the current value to output\n\t\t\t\t\t\tconst currentValue = this.delayBuffer[currentIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// write the current value to the delayBuffer in the future\n\t\t\t\t\t\tthis.delayBuffer[delayedIndex] = value + currentValue * feedback;\n\n\t\t\t\t\t\t// set all of the output channels to the same value\n\t\t\t\t\t\toutputChannel[index] = delaySamples > 0 ? currentValue : value;\n\t\t\t\t\t});\n\t\t\t\t\t// keep the processing alive\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t\t'},e.getDefaults=function(){return Object.assign(qt.getDefaults(),{delayTime:.1,resonance:.5})},e.prototype.onReady=function(t){It(this.input,t,this.output);var e=t.parameters.get("delayTime");this.delayTime.setParam(e);var n=t.parameters.get("feedback");this.resonance.setParam(n)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this},e}(fn),mn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","type"]))||this;n.name="OnePoleFilter";var o=B(e.getDefaults(),arguments,["frequency","type"]);return n._frequency=o.frequency,n._type=o.type,n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context}),n._createFilter(),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{frequency:880,type:"lowpass"})},e.prototype._createFilter=function(){var t=this,e=this._filter,n=this.toFrequency(this._frequency),o=1/(2*Math.PI*n);if("lowpass"===this._type){var i=1/(o*this.context.sampleRate),r=i-1;this._filter=this.context.createIIRFilter([i,0],[1,r])}else{r=1/(o*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,r])}this.input.chain(this._filter,this.output),e&&this.context.setTimeout((function(){t.disposed||(t.input.disconnect(e),e.disconnect())}),this.blockTime)},Object.defineProperty(e.prototype,"frequency",{get:function(){return this._frequency},set:function(t){this._frequency=t,this._createFilter()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._createFilter()},enumerable:!0,configurable:!0}),e.prototype.getFrequencyResponse=function(t){void 0===t&&(t=128);for(var e=new Float32Array(t),n=0;n<t;n++){var o=19980*Math.pow(n/t,2)+20;e[n]=o}var i=new Float32Array(t),r=new Float32Array(t);return this._filter.getFrequencyResponse(e,i,r),i},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this},e}(qt),yn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["delayTime","resonance","dampening"]))||this;n.name="LowpassCombFilter";var o=B(e.getDefaults(),arguments,["delayTime","resonance","dampening"]);return n._combFilter=n.output=new dn({context:n.context,delayTime:o.delayTime,resonance:o.resonance}),n.delayTime=n._combFilter.delayTime,n.resonance=n._combFilter.resonance,n._lowpass=n.input=new mn({context:n.context,frequency:o.dampening,type:"lowpass"}),n._lowpass.connect(n._combFilter),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})},Object.defineProperty(e.prototype,"dampening",{get:function(){return this._lowpass.frequency},set:function(t){this._lowpass.frequency=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._combFilter.dispose(),this._lowpass.dispose(),this},e}(qt),_n=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="PluckSynth";var o=B(e.getDefaults(),arguments);return n._noise=new fe({context:n.context,type:"pink"}),n.attackNoise=o.attackNoise,n._lfcf=new yn({context:n.context,dampening:o.dampening,resonance:o.resonance}),n.resonance=o.resonance,n.release=o.release,n._noise.connect(n._lfcf),n._lfcf.connect(n.output),n}return a(e,t),e.getDefaults=function(){return z($e.getDefaults(),{attackNoise:1,dampening:4e3,resonance:.7,release:1})},Object.defineProperty(e.prototype,"dampening",{get:function(){return this._lfcf.dampening},set:function(t){this._lfcf.dampening=t},enumerable:!0,configurable:!0}),e.prototype.triggerAttack=function(t,e){var n=this.toFrequency(t);e=this.toSeconds(e);var o=1/n;return this._lfcf.delayTime.setValueAtTime(o,e),this._noise.start(e),this._noise.stop(e+o*this.attackNoise),this._lfcf.resonance.cancelScheduledValues(e),this._lfcf.resonance.setValueAtTime(this.resonance,e),this},e.prototype.triggerRelease=function(t){return this._lfcf.resonance.linearRampTo(0,this.release,t),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._noise.dispose(),this._lfcf.dispose(),this},e}($e),gn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["voice","options"]))||this;n.name="PolySynth",n._availableVoices=[],n._activeVoices=[],n._voices=[],n._gcTimeout=-1,n._averageActiveVoices=0;var o=B(e.getDefaults(),arguments,["voice","options"]);d(!T(o.voice),"DEPRECATED: The polyphony count is no longer the first argument.");var i=o.voice.getDefaults();n.options=Object.assign(i,o.options),n.voice=o.voice,n.maxPolyphony=o.maxPolyphony,n._dummyVoice=n._getNextAvailableVoice();var r=n._voices.indexOf(n._dummyVoice);return n._voices.splice(r,1),n._gcTimeout=n.context.setInterval(n._collectGarbage.bind(n),1),n}return a(e,t),e.getDefaults=function(){return Object.assign($e.getDefaults(),{maxPolyphony:32,options:{},voice:tn})},Object.defineProperty(e.prototype,"activeVoices",{get:function(){return this._activeVoices.length},enumerable:!0,configurable:!0}),e.prototype._makeVoiceAvailable=function(t){this._availableVoices.push(t);var e=this._activeVoices.findIndex((function(e){return e.voice===t}));this._activeVoices.splice(e,1)},e.prototype._getNextAvailableVoice=function(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){var t=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return t.connect(this.output),this._voices.push(t),t}b("Max polyphony exceeded. Note dropped.")},e.prototype._collectGarbage=function(){if(this._averageActiveVoices=Math.max(.95*this._averageActiveVoices,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){var t=this._availableVoices.shift(),e=this._voices.indexOf(t);this._voices.splice(e,1),this.context.isOffline||t.dispose()}},e.prototype._triggerAttack=function(t,e,n){var o=this;t.forEach((function(t){var i=new ae(o.context,t).toMidi(),r=o._getNextAvailableVoice();r&&(r.triggerAttack(t,e,n),o._activeVoices.push({midi:i,voice:r,released:!1}),o.log("triggerAttack",t,e))}))},e.prototype._triggerRelease=function(t,e){var n=this;t.forEach((function(t){var o=new ae(n.context,t).toMidi(),i=n._activeVoices.find((function(t){var e=t.midi,n=t.released;return e===o&&!n}));i&&(i.voice.triggerRelease(e),i.released=!0,n.log("triggerRelease",t,e))}))},e.prototype._scheduleEvent=function(t,e,n,o){var i=this;d(!this.disposed,"Synth was already disposed"),n<=this.now()?"attack"===t?this._triggerAttack(e,n,o):this._triggerRelease(e,n):this.context.setTimeout((function(){i._scheduleEvent(t,e,n,o)}),n-this.now())},e.prototype.triggerAttack=function(t,e,n){Array.isArray(t)||(t=[t]);var o=this.toSeconds(e);return this._scheduleEvent("attack",t,o,n),this},e.prototype.triggerRelease=function(t,e){Array.isArray(t)||(t=[t]);var n=this.toSeconds(e);return this._scheduleEvent("release",t,n),this},e.prototype.triggerAttackRelease=function(t,e,n,o){var i=this.toSeconds(n);if(this.triggerAttack(t,i,o),k(e)){d(k(t),"If the duration is an array, the notes must also be an array"),t=t;for(var r=0;r<t.length;r++){var s=e[Math.min(r,e.length-1)];d((a=this.toSeconds(s))>0,"The duration must be greater than 0"),this.triggerRelease(t[r],i+a)}}else{var a;d((a=this.toSeconds(e))>0,"The duration must be greater than 0"),this.triggerRelease(t,i+a)}return this},e.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},e.prototype.set=function(t){var e=U(t,["onsilence","context"]);return this.options=z(this.options,e),this._voices.forEach((function(t){return t.set(e)})),this._dummyVoice.set(e),this},e.prototype.get=function(){return this._dummyVoice.get()},e.prototype.releaseAll=function(){var t=this.now();return this._activeVoices.forEach((function(e){e.voice.triggerRelease(t)})),this._activeVoices=[],this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._dummyVoice.dispose(),this._voices.forEach((function(t){return t.dispose()})),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this},e}($e),vn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"))||this;n.name="Sampler",n._activeSources=new Map;var o=B(e.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),i={};return Object.keys(o.urls).forEach((function(t){var e=parseInt(t,10);if(d(j(t)||T(e)&&isFinite(e),"url key is neither a note or midi pitch: "+t),j(t)){var r=new Ct(n.context,t).toMidi();i[r]=o.urls[t]}else T(e)&&isFinite(e)&&(i[e]=o.urls[e])})),n._buffers=new se(i,o.onload,o.baseUrl),n.attack=o.attack,n.release=o.release,n.curve=o.curve,n._buffers.loaded&&Promise.resolve().then(o.onload),n}return a(e,t),e.getDefaults=function(){return Object.assign($e.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:ct,release:.1,urls:{}})},e.prototype._findClosest=function(t){for(var e=0;e<96;){if(this._buffers.has(t+e))return-e;if(this._buffers.has(t-e))return e;e++}throw new Error("No available buffers for note: "+t)},e.prototype.triggerAttack=function(t,e,n){var o=this;return void 0===n&&(n=1),this.log("triggerAttack",t,e,n),Array.isArray(t)||(t=[t]),t.forEach((function(t){var i=new Ct(o.context,t).toMidi(),r=o._findClosest(i),s=i-r,a=o._buffers.get(s),c=bt(r),u=new pe({buffer:a,context:o.context,curve:o.curve,fadeIn:o.attack,fadeOut:o.release,playbackRate:c}).connect(o.output);u.start(e,0,a.duration/c,n),k(o._activeSources.get(i))||o._activeSources.set(i,[]),o._activeSources.get(i).push(u),u.onended=function(){if(o._activeSources&&o._activeSources.has(i)){var t=o._activeSources.get(i),e=t.indexOf(u);-1!==e&&t.splice(e,1)}}})),this},e.prototype.triggerRelease=function(t,e){var n=this;return this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]),t.forEach((function(t){var o=new Ct(n.context,t).toMidi();if(n._activeSources.has(o)&&n._activeSources.get(o).length){var i=n._activeSources.get(o);e=n.toSeconds(e),i.forEach((function(t){t.stop(e)})),n._activeSources.set(o,[])}})),this},e.prototype.releaseAll=function(t){var e=this.toSeconds(t);return this._activeSources.forEach((function(t){for(;t.length;){t.shift().stop(e)}})),this},e.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},e.prototype.triggerAttackRelease=function(t,e,n,o){var i=this;void 0===o&&(o=1);var r=this.toSeconds(n);return this.triggerAttack(t,r,o),k(e)?(d(k(t),"notes must be an array when duration is array"),t.forEach((function(t,n){var o=e[Math.min(n,e.length-1)];i.triggerRelease(t,r+i.toSeconds(o))}))):this.triggerRelease(t,r+this.toSeconds(e)),this},e.prototype.add=function(t,e,n){if(d(j(t)||isFinite(t),"note must be a pitch or midi: "+t),j(t)){var o=new Ct(this.context,t).toMidi();this._buffers.add(o,e,n)}else this._buffers.add(t,e,n);return this},Object.defineProperty(e.prototype,"loaded",{get:function(){return this._buffers.loaded},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._buffers.dispose(),this._activeSources.forEach((function(t){t.forEach((function(t){return t.dispose()}))})),this._activeSources.clear(),this},c([Ie(0)],e.prototype,"attack",void 0),c([Ie(0)],e.prototype,"release",void 0),e}($e),bn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","value"]))||this;n.name="ToneEvent",n._state=new Pt("stopped"),n._startOffset=0;var o=B(e.getDefaults(),arguments,["callback","value"]);return n._loop=o.loop,n.callback=o.callback,n.value=o.value,n._loopStart=n.toTicks(o.loopStart),n._loopEnd=n.toTicks(o.loopEnd),n._playbackRate=o.playbackRate,n._probability=o.probability,n._humanize=o.humanize,n.mute=o.mute,n._playbackRate=o.playbackRate,n._state.increasing=!0,n._rescheduleEvents(),n}return a(e,t),e.getDefaults=function(){return Object.assign(Mt.getDefaults(),{callback:ct,humanize:!1,loop:!1,loopEnd:"1m",loopStart:0,mute:!1,playbackRate:1,probability:1,value:null})},e.prototype._rescheduleEvents=function(t){var e=this;void 0===t&&(t=-1),this._state.forEachFrom(t,(function(t){var n;if("started"===t.state){-1!==t.id&&e.context.transport.clear(t.id);var o=t.time+Math.round(e.startOffset/e._playbackRate);if(!0===e._loop||T(e._loop)&&e._loop>1){n=1/0,T(e._loop)&&(n=e._loop*e._getLoopDuration());var i=e._state.getAfter(o);null!==i&&(n=Math.min(n,i.time-o)),n!==1/0&&(e._state.setStateAtTime("stopped",o+n+1,{id:-1}),n=new Qt(e.context,n));var r=new Qt(e.context,e._getLoopDuration());t.id=e.context.transport.scheduleRepeat(e._tick.bind(e),r,new Qt(e.context,o),n)}else t.id=e.context.transport.schedule(e._tick.bind(e),new Qt(e.context,o))}}))},Object.defineProperty(e.prototype,"state",{get:function(){return this._state.getValueAtTime(this.context.transport.ticks)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t},enumerable:!0,configurable:!0}),e.prototype.start=function(t){var e=this.toTicks(t);return"stopped"===this._state.getValueAtTime(e)&&(this._state.add({id:-1,state:"started",time:e}),this._rescheduleEvents(e)),this},e.prototype.stop=function(t){this.cancel(t);var e=this.toTicks(t);if("started"===this._state.getValueAtTime(e)){this._state.setStateAtTime("stopped",e,{id:-1});var n=this._state.getBefore(e),o=e;null!==n&&(o=n.time),this._rescheduleEvents(o)}return this},e.prototype.cancel=function(t){var e=this;t=W(t,-1/0);var n=this.toTicks(t);return this._state.forEachFrom(n,(function(t){e.context.transport.clear(t.id)})),this._state.cancel(n),this},e.prototype._tick=function(t){var e=this.context.transport.getTicksAtTime(t);if(!this.mute&&"started"===this._state.getValueAtTime(e)){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){var n=.02;C(this.humanize)||(n=this.toSeconds(this.humanize)),t+=(2*Math.random()-1)*n}this.callback(t,this.value)}},e.prototype._getLoopDuration=function(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)},Object.defineProperty(e.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._rescheduleEvents()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._rescheduleEvents()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return new Qt(this.context,this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._rescheduleEvents()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return new Qt(this.context,this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._rescheduleEvents()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"progress",{get:function(){if(this._loop){var t=this.context.transport.ticks,e=this._state.get(t);if(null!==e&&"started"===e.state){var n=this._getLoopDuration();return(t-e.time)%n/n}return 0}return 0},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.cancel(),this._state.dispose(),this},e}(Mt),xn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","interval"]))||this;n.name="Loop";var o=B(e.getDefaults(),arguments,["callback","interval"]);return n._event=new bn({context:n.context,callback:n._tick.bind(n),loop:!0,loopEnd:o.interval,playbackRate:o.playbackRate,probability:o.probability}),n.callback=o.callback,n.iterations=o.iterations,n}return a(e,t),e.getDefaults=function(){return Object.assign(Mt.getDefaults(),{interval:"4n",callback:ct,playbackRate:1,iterations:1/0,probability:1,mute:!1,humanize:!1})},e.prototype.start=function(t){return this._event.start(t),this},e.prototype.stop=function(t){return this._event.stop(t),this},e.prototype.cancel=function(t){return this._event.cancel(t),this},e.prototype._tick=function(t){this.callback(t)},Object.defineProperty(e.prototype,"state",{get:function(){return this._event.state},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"progress",{get:function(){return this._event.progress},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"interval",{get:function(){return this._event.loopEnd},set:function(t){this._event.loopEnd=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._event.playbackRate},set:function(t){this._event.playbackRate=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"humanize",{get:function(){return this._event.humanize},set:function(t){this._event.humanize=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"probability",{get:function(){return this._event.probability},set:function(t){this._event.probability=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mute",{get:function(){return this._event.mute},set:function(t){this._event.mute=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"iterations",{get:function(){return!0===this._event.loop?1/0:this._event.loop},set:function(t){this._event.loop=t===1/0||t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._event.dispose(),this},e}(Mt),wn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","events"]))||this;n.name="Part",n._state=new Pt("stopped"),n._events=new Set;var o=B(e.getDefaults(),arguments,["callback","events"]);return n._state.increasing=!0,o.events.forEach((function(t){k(t)?n.add(t[0],t[1]):n.add(t)})),n}return a(e,t),e.getDefaults=function(){return Object.assign(bn.getDefaults(),{events:[]})},e.prototype.start=function(t,e){var n=this,o=this.toTicks(t);if("started"!==this._state.getValueAtTime(o)){e=W(e,this._loop?this._loopStart:0),e=this._loop?W(e,this._loopStart):W(e,0);var i=this.toTicks(e);this._state.add({id:-1,offset:i,state:"started",time:o}),this._forEach((function(t){n._startNote(t,o,i)}))}return this},e.prototype._startNote=function(t,e,n){e-=n,this._loop?t.startOffset>=this._loopStart&&t.startOffset<this._loopEnd?(t.startOffset<n&&(e+=this._getLoopDuration()),t.start(new Qt(this.context,e))):t.startOffset<this._loopStart&&t.startOffset>=n&&(t.loop=!1,t.start(new Qt(this.context,e))):t.startOffset>=n&&t.start(new Qt(this.context,e))},Object.defineProperty(e.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){var e=this;this._startOffset=t,this._forEach((function(t){t.startOffset+=e._startOffset}))},enumerable:!0,configurable:!0}),e.prototype.stop=function(t){var e=this.toTicks(t);return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._forEach((function(e){e.stop(t)})),this},e.prototype.at=function(t,e){for(var n=new Dt(this.context,t).toTicks(),o=new Qt(this.context,1).toSeconds(),i=this._events.values(),r=i.next();!r.done;){var s=r.value;if(Math.abs(n-s.startOffset)<o)return w(e)&&(s.value=e),s;r=i.next()}return w(e)?(this.add(t,e),this.at(t)):null},e.prototype.add=function(t,e){t instanceof Object&&Reflect.has(t,"time")&&(t=(e=t).time);var n,o=this.toTicks(t);return e instanceof bn?(n=e).callback=this._tick.bind(this):n=new bn({callback:this._tick.bind(this),context:this.context,value:e}),n.startOffset=o,n.set({humanize:this.humanize,loop:this.loop,loopEnd:this.loopEnd,loopStart:this.loopStart,playbackRate:this.playbackRate,probability:this.probability}),this._events.add(n),this._restartEvent(n),this},e.prototype._restartEvent=function(t){var e=this;this._state.forEach((function(n){"started"===n.state?e._startNote(t,n.time,n.offset):t.stop(new Qt(e.context,n.time))}))},e.prototype.remove=function(t,e){var n=this;return S(t)&&t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t),this._events.forEach((function(o){o.startOffset===t&&(x(e)||w(e)&&o.value===e)&&(n._events.delete(o),o.dispose())})),this},e.prototype.clear=function(){return this._forEach((function(t){return t.dispose()})),this._events.clear(),this},e.prototype.cancel=function(t){return this._forEach((function(e){return e.cancel(t)})),this._state.cancel(this.toTicks(t)),this},e.prototype._forEach=function(t){return this._events&&this._events.forEach((function(n){n instanceof e?n._forEach(t):t(n)})),this},e.prototype._setAll=function(t,e){this._forEach((function(n){n[t]=e}))},e.prototype._tick=function(t,e){this.mute||this.callback(t,e)},e.prototype._testLoopBoundries=function(t){this._loop&&(t.startOffset<this._loopStart||t.startOffset>=this._loopEnd)?t.cancel(0):"stopped"===t.state&&this._restartEvent(t)},Object.defineProperty(e.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t,this._setAll("probability",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t,this._setAll("humanize",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loop",{get:function(){return this._loop},set:function(t){var e=this;this._loop=t,this._forEach((function(n){n.loopStart=e.loopStart,n.loopEnd=e.loopEnd,n.loop=t,e._testLoopBoundries(n)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return new Qt(this.context,this._loopEnd).toSeconds()},set:function(t){var e=this;this._loopEnd=this.toTicks(t),this._loop&&this._forEach((function(n){n.loopEnd=t,e._testLoopBoundries(n)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return new Qt(this.context,this._loopStart).toSeconds()},set:function(t){var e=this;this._loopStart=this.toTicks(t),this._loop&&this._forEach((function(t){t.loopStart=e.loopStart,e._testLoopBoundries(t)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._setAll("playbackRate",t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._events.size},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.clear(),this},e}(bn);function On(t){var e;return l(this,(function(n){switch(n.label){case 0:e=0,n.label=1;case 1:return e<t.length?(e=Cn(e,t),[4,t[e]]):[3,3];case 2:return n.sent(),e++,[3,1];case 3:return[2]}}))}function Tn(t){var e;return l(this,(function(n){switch(n.label){case 0:e=t.length-1,n.label=1;case 1:return e>=0?(e=Cn(e,t),[4,t[e]]):[3,3];case 2:return n.sent(),e--,[3,1];case 3:return[2]}}))}function Sn(t,e){return l(this,(function(n){switch(n.label){case 0:return[5,h(e(t))];case 1:return n.sent(),[3,0];case 2:return[2]}}))}function Cn(t,e){return H(t,0,e.length-1)}function kn(t,e){var n;return l(this,(function(o){switch(o.label){case 0:n=e?0:t.length-1,o.label=1;case 1:return n=Cn(n,t),[4,t[n]];case 2:return o.sent(),e?++n>=t.length-1&&(e=!1):--n<=0&&(e=!0),[3,1];case 3:return[2]}}))}function An(t){var e,n;return l(this,(function(o){switch(o.label){case 0:e=0,n=0,o.label=1;case 1:return e<t.length?(e=Cn(e,t),[4,t[e]]):[3,3];case 2:return o.sent(),n++,e+=n%2?2:-1,[3,1];case 3:return[2]}}))}function jn(t){var e,n;return l(this,(function(o){switch(o.label){case 0:e=t.length-1,n=0,o.label=1;case 1:return e>=0?(e=Cn(e,t),[4,t[e]]):[3,3];case 2:return o.sent(),n++,e+=n%2?-2:1,[3,1];case 3:return[2]}}))}function Dn(t){var e;return l(this,(function(n){switch(n.label){case 0:return e=Math.floor(Math.random()*t.length),[4,t[e]];case 1:return n.sent(),[3,0];case 2:return[2]}}))}function En(t){var e,n,o,i;return l(this,(function(r){switch(r.label){case 0:for(e=[],n=0;n<t.length;n++)e.push(n);r.label=1;case 1:return e.length>0?(o=e.splice(Math.floor(e.length*Math.random()),1),i=Cn(o[0],t),[4,t[i]]):[3,3];case 2:return r.sent(),[3,1];case 3:return[2]}}))}function Mn(t,e,n){return void 0===e&&(e="up"),void 0===n&&(n=0),l(this,(function(n){switch(n.label){case 0:switch(d(t.length>0,"The array must have more than one value in it"),e){case"up":return[3,1];case"down":return[3,3];case"upDown":return[3,5];case"downUp":return[3,7];case"alternateUp":return[3,9];case"alternateDown":return[3,11];case"random":return[3,13];case"randomOnce":return[3,15]}return[3,17];case 1:return[5,h(Sn(t,On))];case 2:n.sent(),n.label=3;case 3:return[5,h(Sn(t,Tn))];case 4:n.sent(),n.label=5;case 5:return[5,h(kn(t,!0))];case 6:n.sent(),n.label=7;case 7:return[5,h(kn(t,!1))];case 8:n.sent(),n.label=9;case 9:return[5,h(Sn(t,An))];case 10:n.sent(),n.label=11;case 11:return[5,h(Sn(t,jn))];case 12:n.sent(),n.label=13;case 13:return[5,h(Dn(t))];case 14:n.sent(),n.label=15;case 15:return[5,h(Sn(t,En))];case 16:n.sent(),n.label=17;case 17:return[2]}}))}var Pn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","values","pattern"]))||this;n.name="Pattern";var o=B(e.getDefaults(),arguments,["callback","values","pattern"]);return n.callback=o.callback,n._values=o.values,n._pattern=Mn(o.values,o.pattern),n._type=o.pattern,n}return a(e,t),e.getDefaults=function(){return Object.assign(xn.getDefaults(),{pattern:"up",values:[],callback:ct})},e.prototype._tick=function(t){var e=this._pattern.next();this._value=e.value,this.callback(t,this._value)},Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this.pattern=this._type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pattern",{get:function(){return this._type},set:function(t){this._type=t,this._pattern=Mn(this._values,this._type)},enumerable:!0,configurable:!0}),e}(xn),Rn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["callback","events","subdivision"]))||this;n.name="Sequence",n._part=new wn({callback:n._seqCallback.bind(n),context:n.context}),n._events=[],n._eventsArray=[];var o=B(e.getDefaults(),arguments,["callback","events","subdivision"]);return n._subdivision=n.toTicks(o.subdivision),n.events=o.events,n.loop=o.loop,n.loopStart=o.loopStart,n.loopEnd=o.loopEnd,n.playbackRate=o.playbackRate,n.probability=o.probability,n.humanize=o.humanize,n.mute=o.mute,n.playbackRate=o.playbackRate,n}return a(e,t),e.getDefaults=function(){return Object.assign(U(bn.getDefaults(),["value"]),{events:[],loop:!0,loopEnd:0,loopStart:0,subdivision:"8n"})},e.prototype._seqCallback=function(t,e){null!==e&&this.callback(t,e)},Object.defineProperty(e.prototype,"events",{get:function(){return this._events},set:function(t){this.clear(),this._eventsArray=t,this._events=this._createSequence(this._eventsArray),this._eventsUpdated()},enumerable:!0,configurable:!0}),e.prototype.start=function(t,e){return this._part.start(t,e?this._indexTime(e):e),this},e.prototype.stop=function(t){return this._part.stop(t),this},Object.defineProperty(e.prototype,"subdivision",{get:function(){return new Qt(this.context,this._subdivision).toSeconds()},enumerable:!0,configurable:!0}),e.prototype._createSequence=function(t){var e=this;return new Proxy(t,{get:function(t,e){return t[e]},set:function(t,n,o){return A(n)&&isFinite(parseInt(n,10))&&k(o)?t[n]=e._createSequence(o):t[n]=o,e._eventsUpdated(),!0}})},e.prototype._eventsUpdated=function(){this._part.clear(),this._rescheduleSequence(this._eventsArray,this._subdivision,this.startOffset),this.loopEnd=this.loopEnd},e.prototype._rescheduleSequence=function(t,e,n){var o=this;t.forEach((function(t,i){var r=i*e+n;if(k(t))o._rescheduleSequence(t,e/t.length,r);else{var s=new Qt(o.context,r,"i").toSeconds();o._part.add(s,t)}}))},e.prototype._indexTime=function(t){return new Qt(this.context,t*this._subdivision+this.startOffset).toSeconds()},e.prototype.clear=function(){return this._part.clear(),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._part.dispose(),this},Object.defineProperty(e.prototype,"loop",{get:function(){return this._part.loop},set:function(t){this._part.loop=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=t,this._part.loopStart=this._indexTime(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=t,this._part.loopEnd=0===t?this._indexTime(this._eventsArray.length):this._indexTime(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"startOffset",{get:function(){return this._part.startOffset},set:function(t){this._part.startOffset=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this._part.playbackRate},set:function(t){this._part.playbackRate=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"probability",{get:function(){return this._part.probability},set:function(t){this._part.probability=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"progress",{get:function(){return this._part.progress},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"humanize",{get:function(){return this._part.humanize},set:function(t){this._part.humanize=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._part.length},enumerable:!0,configurable:!0}),e}(bn),qn=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["fade"])))||this;n.name="CrossFade",n._panner=n.context.createStereoPanner(),n._split=n.context.createChannelSplitter(2),n._g2a=new ze({context:n.context}),n.a=new Vt({context:n.context,gain:0}),n.b=new Vt({context:n.context,gain:0}),n.output=new Vt({context:n.context}),n._internalChannels=[n.a,n.b];var o=B(e.getDefaults(),arguments,["fade"]);return n.fade=new Bt({context:n.context,units:"normalRange",value:o.fade}),st(n,"fade"),n.context.getConstant(1).connect(n._panner),n._panner.connect(n._split),n._panner.channelCount=1,n._panner.channelCountMode="explicit",Ft(n._split,n.a.gain,0),Ft(n._split,n.b.gain,1),n.fade.chain(n._g2a,n._panner.pan),n.a.connect(n.output),n.b.connect(n.output),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{fade:.5})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.a.dispose(),this.b.dispose(),this.output.dispose(),this.fade.dispose(),this._g2a.dispose(),this._panner.disconnect(),this._split.disconnect(),this},e}(qt),In=function(t){function e(e){var n=t.call(this,e)||this;return n.name="Effect",n._dryWet=new qn({context:n.context}),n.wet=n._dryWet.fade,n.effectSend=new Vt({context:n.context}),n.effectReturn=new Vt({context:n.context}),n.input=new Vt({context:n.context}),n.output=n._dryWet,n.input.fan(n._dryWet.a,n.effectSend),n.effectReturn.connect(n._dryWet.b),n.wet.setValueAtTime(e.wet,0),n._internalChannels=[n.effectReturn,n.effectSend],st(n,"wet"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{wet:1})},e.prototype.connectEffect=function(t){return this._internalChannels.push(t),this.effectSend.chain(t,this.effectReturn),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._dryWet.dispose(),this.effectSend.dispose(),this.effectReturn.dispose(),this.wet.dispose(),this},e}(qt),Fn=function(t){function e(e){var n=t.call(this,e)||this;return n.name="LFOEffect",n._lfo=new Re({context:n.context,frequency:e.frequency,amplitude:e.depth}),n.depth=n._lfo.amplitude,n.frequency=n._lfo.frequency,n.type=e.type,st(n,["frequency","depth"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{frequency:1,type:"sine",depth:1})},e.prototype.start=function(t){return this._lfo.start(t),this},e.prototype.stop=function(t){return this._lfo.stop(t),this},e.prototype.sync=function(){return this._lfo.sync(),this},e.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(e.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this},e}(In),Nn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","baseFrequency","octaves"]))||this;n.name="AutoFilter";var o=B(e.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);return n.filter=new on(Object.assign(o.filter,{context:n.context})),n.connectEffect(n.filter),n._lfo.connect(n.filter.frequency),n.octaves=o.octaves,n.baseFrequency=o.baseFrequency,n}return a(e,t),e.getDefaults=function(){return Object.assign(Fn.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})},Object.defineProperty(e.prototype,"baseFrequency",{get:function(){return this._lfo.min},set:function(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._lfo.max=this._lfo.min*Math.pow(2,t)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.filter.dispose(),this},e}(Fn),Vn=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["pan"])))||this;n.name="Panner",n._panner=n.context.createStereoPanner(),n.input=n._panner,n.output=n._panner;var o=B(e.getDefaults(),arguments,["pan"]);return n.pan=new Rt({context:n.context,param:n._panner.pan,value:o.pan,minValue:-1,maxValue:1}),n._panner.channelCount=1,n._panner.channelCountMode="explicit",st(n,"pan"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{pan:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._panner.disconnect(),this.pan.dispose(),this},e}(qt),Ln=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency"]))||this;return n.name="AutoPanner",n._panner=new Vn({context:n.context}),n.connectEffect(n._panner),n._lfo.connect(n._panner.pan),n._lfo.min=-1,n._lfo.max=1,n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._panner.dispose(),this},e}(Fn),zn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["smoothing"]))||this;n.name="Follower";var o=B(e.getDefaults(),arguments,["smoothing"]);return n._abs=n.input=new Le({context:n.context}),n._lowpass=n.output=new mn({context:n.context,frequency:1/n.toSeconds(o.smoothing),type:"lowpass"}),n._abs.connect(n._lowpass),n._smoothing=o.smoothing,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{smoothing:.05})},Object.defineProperty(e.prototype,"smoothing",{get:function(){return this._smoothing},set:function(t){this._smoothing=t,this._lowpass.frequency=1/this.toSeconds(this.smoothing)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._abs.dispose(),this._lowpass.dispose(),this},e}(qt),Bn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["baseFrequency","octaves","sensitivity"]))||this;n.name="AutoWah";var o=B(e.getDefaults(),arguments,["baseFrequency","octaves","sensitivity"]);return n._follower=new zn({context:n.context,smoothing:o.follower}),n._sweepRange=new Xe({context:n.context,min:0,max:1,exponent:.5}),n._baseFrequency=n.toFrequency(o.baseFrequency),n._octaves=o.octaves,n._inputBoost=new Vt({context:n.context}),n._bandpass=new on({context:n.context,rolloff:-48,frequency:0,Q:o.Q}),n._peaking=new on({context:n.context,type:"peaking"}),n._peaking.gain.value=o.gain,n.gain=n._peaking.gain,n.Q=n._bandpass.Q,n.effectSend.chain(n._inputBoost,n._follower,n._sweepRange),n._sweepRange.connect(n._bandpass.frequency),n._sweepRange.connect(n._peaking.frequency),n.effectSend.chain(n._bandpass,n._peaking,n.effectReturn),n._setSweepRange(),n.sensitivity=o.sensitivity,st(n,["gain","Q"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:.2})},Object.defineProperty(e.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._setSweepRange()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"follower",{get:function(){return this._follower.smoothing},set:function(t){this._follower.smoothing=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=this.toFrequency(t),this._setSweepRange()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"sensitivity",{get:function(){return vt(1/this._inputBoost.gain.value)},set:function(t){this._inputBoost.gain.value=1/gt(t)},enumerable:!0,configurable:!0}),e.prototype._setSweepRange=function(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._follower.dispose(),this._sweepRange.dispose(),this._bandpass.dispose(),this._peaking.dispose(),this._inputBoost.dispose(),this},e}(In),Wn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["bits"]))||this;n.name="BitCrusher";var o=B(e.getDefaults(),arguments,["bits"]);return n._bitCrusherWorklet=new Un({context:n.context,bits:o.bits}),n.connectEffect(n._bitCrusherWorklet),n.bits=n._bitCrusherWorklet.bits,n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{bits:4,frequencyReduction:.5})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._bitCrusherWorklet.dispose(),this},e}(In),Un=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;n.name="BitCrusherWorklet",n.workletOptions={numberOfInputs:1,numberOfOutputs:1};var o=B(e.getDefaults(),arguments);n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context});var i=n.context.createGain();return n.bits=new Rt({context:n.context,value:o.bits,units:"positive",minValue:1,maxValue:16,param:i.gain,swappable:!0}),n}return a(e,t),e.getDefaults=function(){return Object.assign(fn.getDefaults(),{bits:12})},e.prototype._audioWorkletName=function(){return"bit-crusher"},e.prototype._audioWorklet=function(){return' \n\t\tregisterProcessor("'+this._audioWorkletName()+"\", class extends AudioWorkletProcessor {\n\t\t\tstatic get parameterDescriptors () {\n\t\t\t\treturn [{\n\t\t\t\t\tname: 'bits',\n\t\t\t\t\tdefaultValue: 12,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 16\n\t\t\t\t}];\n\t\t\t}\n\t\t\t\n\t\t\tprocess (inputs, outputs, parameters) {\n\t\t\t\tconst input = inputs[0];\n\t\t\t\tconst output = outputs[0];\n\t\t\t\tif (input && output && input.length === output.length) {\n\t\t\t\t\tconst bits = parameters.bits;\n\t\t\t\t\tfor (let channelNum = 0; channelNum < input.length; channelNum++) {\n\t\t\t\t\t\tconst inputChannel = input[channelNum];\n\t\t\t\t\t\tfor (let index = 0; index < inputChannel.length; index++) {\n\t\t\t\t\t\t\tconst value = inputChannel[index];\n\t\t\t\t\t\t\tconst step = bits.length > 1 ? Math.pow(0.5, bits[index]) : Math.pow(0.5, bits[0]);\n\t\t\t\t\t\t\tconst val = step * Math.floor(value / step + 0.5);\n\t\t\t\t\t\t\toutput[channelNum][index] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t"},e.prototype.onReady=function(t){It(this.input,t,this.output);var e=t.parameters.get("bits");this.bits.setParam(e)},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this.output.dispose(),this.bits.dispose(),this},e}(fn),Gn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["order"]))||this;n.name="Chebyshev";var o=B(e.getDefaults(),arguments,["order"]);return n._shaper=new xe({context:n.context,length:4096}),n._order=o.order,n.connectEffect(n._shaper),n.order=o.order,n.oversample=o.oversample,n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{order:1,oversample:"none"})},e.prototype._getCoefficient=function(t,e,n){return n.has(e)||(0===e?n.set(e,0):1===e?n.set(e,t):n.set(e,2*t*this._getCoefficient(t,e-1,n)-this._getCoefficient(t,e-2,n))),n.get(e)},Object.defineProperty(e.prototype,"order",{get:function(){return this._order},set:function(t){var e=this;this._order=t,this._shaper.setMap((function(n){return e._getCoefficient(n,t,new Map)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._shaper.dispose(),this},e}(In),Yn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["channels"]))||this;n.name="Split";var o=B(e.getDefaults(),arguments,["channels"]);return n._splitter=n.input=n.output=n.context.createChannelSplitter(o.channels),n._internalChannels=[n._splitter],n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{channels:2})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._splitter.disconnect(),this},e}(qt),Xn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["channels"]))||this;n.name="Merge";var o=B(e.getDefaults(),arguments,["channels"]);return n._merger=n.output=n.input=n.context.createChannelMerger(o.channels),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{channels:2})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._merger.disconnect(),this},e}(qt),Zn=function(t){function e(e){var n=t.call(this,e)||this;return n.name="StereoEffect",n.input=new Vt({context:n.context}),n.input.channelCount=2,n.input.channelCountMode="explicit",n._dryWet=n.output=new qn({context:n.context,fade:e.wet}),n.wet=n._dryWet.fade,n._split=new Yn({context:n.context,channels:2}),n._merge=new Xn({context:n.context,channels:2}),n.input.connect(n._split),n.input.connect(n._dryWet.a),n._merge.connect(n._dryWet.b),st(n,["wet"]),n}return a(e,t),e.prototype.connectEffectLeft=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._split.connect(t[0],0,0),It.apply(void 0,f(t)),Ft(t[t.length-1],this._merge,0,0)},e.prototype.connectEffectRight=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._split.connect(t[0],1,0),It.apply(void 0,f(t)),Ft(t[t.length-1],this._merge,0,1)},e.getDefaults=function(){return Object.assign(qt.getDefaults(),{wet:1})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this},e}(qt),Qn=function(t){function e(e){var n=t.call(this,e)||this;return n.feedback=new Bt({context:n.context,value:e.feedback,units:"normalRange"}),n._feedbackL=new Vt({context:n.context}),n._feedbackR=new Vt({context:n.context}),n._feedbackSplit=new Yn({context:n.context,channels:2}),n._feedbackMerge=new Xn({context:n.context,channels:2}),n._merge.connect(n._feedbackSplit),n._feedbackMerge.connect(n._split),n._feedbackSplit.connect(n._feedbackL,0,0),n._feedbackL.connect(n._feedbackMerge,0,0),n._feedbackSplit.connect(n._feedbackR,1,0),n._feedbackR.connect(n._feedbackMerge,0,1),n.feedback.fan(n._feedbackL.gain,n._feedbackR.gain),st(n,["feedback"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Zn.getDefaults(),{feedback:.5})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.feedback.dispose(),this._feedbackL.dispose(),this._feedbackR.dispose(),this._feedbackSplit.dispose(),this._feedbackMerge.dispose(),this},e}(Zn),Hn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","delayTime","depth"]))||this;n.name="Chorus";var o=B(e.getDefaults(),arguments,["frequency","delayTime","depth"]);return n._depth=o.depth,n._delayTime=o.delayTime/1e3,n._lfoL=new Re({context:n.context,frequency:o.frequency,min:0,max:1}),n._lfoR=new Re({context:n.context,frequency:o.frequency,min:0,max:1,phase:180}),n._delayNodeL=new ne({context:n.context}),n._delayNodeR=new ne({context:n.context}),n.frequency=n._lfoL.frequency,st(n,["frequency"]),n._lfoL.frequency.connect(n._lfoR.frequency),n.connectEffectLeft(n._delayNodeL),n.connectEffectRight(n._delayNodeR),n._lfoL.connect(n._delayNodeL.delayTime),n._lfoR.connect(n._delayNodeR.delayTime),n.depth=n._depth,n.type=o.type,n.spread=o.spread,n}return a(e,t),e.getDefaults=function(){return Object.assign(Qn.getDefaults(),{frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180,feedback:0,wet:.5})},Object.defineProperty(e.prototype,"depth",{get:function(){return this._depth},set:function(t){this._depth=t;var e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"delayTime",{get:function(){return 1e3*this._delayTime},set:function(t){this._delayTime=t/1e3,this.depth=this._depth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90},enumerable:!0,configurable:!0}),e.prototype.start=function(t){return this._lfoL.start(t),this._lfoR.start(t),this},e.prototype.stop=function(t){return this._lfoL.stop(t),this._lfoR.stop(t),this},e.prototype.sync=function(){return this._lfoL.sync(),this._lfoR.sync(),this},e.prototype.unsync=function(){return this._lfoL.unsync(),this._lfoR.unsync(),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._lfoL.dispose(),this._lfoR.dispose(),this._delayNodeL.dispose(),this._delayNodeR.dispose(),this.frequency.dispose(),this},e}(Qn),$n=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["distortion"]))||this;n.name="Distortion";var o=B(e.getDefaults(),arguments,["distortion"]);return n._shaper=new xe({context:n.context,length:4096}),n._distortion=o.distortion,n.connectEffect(n._shaper),n.distortion=o.distortion,n.oversample=o.oversample,n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{distortion:.4,oversample:"none"})},Object.defineProperty(e.prototype,"distortion",{get:function(){return this._distortion},set:function(t){this._distortion=t;var e=100*t,n=Math.PI/180;this._shaper.setMap((function(t){return Math.abs(t)<.001?0:(3+e)*t*20*n/(Math.PI+e*Math.abs(t))}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._shaper.dispose(),this},e}(In),Jn=function(t){function e(e){var n=t.call(this,e)||this;return n.name="FeedbackEffect",n._feedbackGain=new Vt({context:n.context,gain:e.feedback,units:"normalRange"}),n.feedback=n._feedbackGain.gain,st(n,"feedback"),n.effectReturn.chain(n._feedbackGain,n.effectSend),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{feedback:.125})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._feedbackGain.dispose(),this.feedback.dispose(),this},e}(In),Kn=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["delayTime","feedback"]))||this;n.name="FeedbackDelay";var o=B(e.getDefaults(),arguments,["delayTime","feedback"]);return n._delayNode=new ne({context:n.context,delayTime:o.delayTime,maxDelay:o.maxDelay}),n.delayTime=n._delayNode.delayTime,n.connectEffect(n._delayNode),st(n,"delayTime"),n}return a(e,t),e.getDefaults=function(){return Object.assign(Jn.getDefaults(),{delayTime:.25,maxDelay:1})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._delayNode.dispose(),this.delayTime.dispose(),this},e}(Jn),to=function(t){function e(e){var n=t.call(this,e)||this;n.name="PhaseShiftAllpass",n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context}),n.offset90=new Vt({context:n.context});return n._bank0=n._createAllPassFilterBank([.6923878,.9360654322959,.988229522686,.9987488452737]),n._bank1=n._createAllPassFilterBank([.4021921162426,.856171088242,.9722909545651,.9952884791278]),n._oneSampleDelay=n.context.createIIRFilter([0,1],[1,0]),It.apply(void 0,f([n.input],n._bank0,[n._oneSampleDelay,n.output])),It.apply(void 0,f([n.input],n._bank1,[n.offset90])),n}return a(e,t),e.prototype._createAllPassFilterBank=function(t){var e=this;return t.map((function(t){var n=[[t*t,0,-1],[1,0,-t*t]];return e.context.createIIRFilter(n[0],n[1])}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this.output.dispose(),this.offset90.dispose(),this._bank0.forEach((function(t){return t.disconnect()})),this._bank1.forEach((function(t){return t.disconnect()})),this._oneSampleDelay.disconnect(),this},e}(qt),eo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency"]))||this;n.name="FrequencyShifter";var o=B(e.getDefaults(),arguments,["frequency"]);n.frequency=new Bt({context:n.context,units:"frequency",value:o.frequency,minValue:-n.context.sampleRate/2,maxValue:n.context.sampleRate/2}),n._sine=new ge({context:n.context,type:"sine"}),n._cosine=new ve({context:n.context,phase:-90,type:"sine"}),n._sineMultiply=new Oe({context:n.context}),n._cosineMultiply=new Oe({context:n.context}),n._negate=new Be({context:n.context}),n._add=new Ee({context:n.context}),n._phaseShifter=new to({context:n.context}),n.effectSend.connect(n._phaseShifter),n.frequency.fan(n._sine.frequency,n._cosine.frequency),n._phaseShifter.offset90.connect(n._cosineMultiply),n._cosine.connect(n._cosineMultiply.factor),n._phaseShifter.connect(n._sineMultiply),n._sine.connect(n._sineMultiply.factor),n._sineMultiply.connect(n._negate),n._cosineMultiply.connect(n._add),n._negate.connect(n._add.addend),n._add.connect(n.effectReturn);var i=n.immediate();return n._sine.start(i),n._cosine.start(i),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{frequency:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.frequency.dispose(),this._add.dispose(),this._cosine.dispose(),this._cosineMultiply.dispose(),this._negate.dispose(),this._phaseShifter.dispose(),this._sine.dispose(),this._sineMultiply.dispose(),this},e}(In),no=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],oo=[225,556,441,341],io=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["roomSize","dampening"]))||this;n.name="Freeverb",n._combFilters=[],n._allpassFiltersL=[],n._allpassFiltersR=[];var o=B(e.getDefaults(),arguments,["roomSize","dampening"]);return n.roomSize=new Bt({context:n.context,value:o.roomSize,units:"normalRange"}),n._allpassFiltersL=oo.map((function(t){var e=n.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e})),n._allpassFiltersR=oo.map((function(t){var e=n.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e})),n._combFilters=no.map((function(t,e){var i=new yn({context:n.context,dampening:o.dampening,delayTime:t});return e<no.length/2?n.connectEffectLeft.apply(n,f([i],n._allpassFiltersL)):n.connectEffectRight.apply(n,f([i],n._allpassFiltersR)),n.roomSize.connect(i.resonance),i})),st(n,["roomSize"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Zn.getDefaults(),{roomSize:.7,dampening:3e3})},Object.defineProperty(e.prototype,"dampening",{get:function(){return this._combFilters[0].dampening},set:function(t){this._combFilters.forEach((function(e){return e.dampening=t}))},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._allpassFiltersL.forEach((function(t){return t.disconnect()})),this._allpassFiltersR.forEach((function(t){return t.disconnect()})),this._combFilters.forEach((function(t){return t.dispose()})),this.roomSize.dispose(),this},e}(Zn),ro=[.06748,.06404,.08212,.09004],so=[.773,.802,.753,.733],ao=[347,113,37],co=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["roomSize"]))||this;n.name="JCReverb",n._allpassFilters=[],n._feedbackCombFilters=[];var o=B(e.getDefaults(),arguments,["roomSize"]);return n.roomSize=new Bt({context:n.context,value:o.roomSize,units:"normalRange"}),n._scaleRoomSize=new Me({context:n.context,min:-.733,max:.197}),n._allpassFilters=ao.map((function(t){var e=n.context.createBiquadFilter();return e.type="allpass",e.frequency.value=t,e})),n._feedbackCombFilters=ro.map((function(t,e){var o=new dn({context:n.context,delayTime:t});return n._scaleRoomSize.connect(o.resonance),o.resonance.value=so[e],e<ro.length/2?n.connectEffectLeft.apply(n,f(n._allpassFilters,[o])):n.connectEffectRight.apply(n,f(n._allpassFilters,[o])),o})),n.roomSize.connect(n._scaleRoomSize),st(n,["roomSize"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Zn.getDefaults(),{roomSize:.5})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._allpassFilters.forEach((function(t){return t.disconnect()})),this._feedbackCombFilters.forEach((function(t){return t.dispose()})),this.roomSize.dispose(),this._scaleRoomSize.dispose(),this},e}(Zn),uo=function(t){function e(e){var n=t.call(this,e)||this;return n._feedbackL.disconnect(),n._feedbackL.connect(n._feedbackMerge,0,1),n._feedbackR.disconnect(),n._feedbackR.connect(n._feedbackMerge,0,0),st(n,["feedback"]),n}return a(e,t),e}(Qn),lo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["delayTime","feedback"]))||this;n.name="PingPongDelay";var o=B(e.getDefaults(),arguments,["delayTime","feedback"]);return n._leftDelay=new ne({context:n.context,maxDelay:o.maxDelay}),n._rightDelay=new ne({context:n.context,maxDelay:o.maxDelay}),n._rightPreDelay=new ne({context:n.context,maxDelay:o.maxDelay}),n.delayTime=new Bt({context:n.context,units:"time",value:o.delayTime}),n.connectEffectLeft(n._leftDelay),n.connectEffectRight(n._rightPreDelay,n._rightDelay),n.delayTime.fan(n._leftDelay.delayTime,n._rightDelay.delayTime,n._rightPreDelay.delayTime),n._feedbackL.disconnect(),n._feedbackL.connect(n._rightDelay),st(n,["delayTime"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(uo.getDefaults(),{delayTime:.25,maxDelay:1})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._leftDelay.dispose(),this._rightDelay.dispose(),this._rightPreDelay.dispose(),this.delayTime.dispose(),this},e}(uo),ho=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["pitch"]))||this;n.name="PitchShift";var o=B(e.getDefaults(),arguments,["pitch"]);n._frequency=new Bt({context:n.context}),n._delayA=new ne({maxDelay:1,context:n.context}),n._lfoA=new Re({context:n.context,min:0,max:.1,type:"sawtooth"}).connect(n._delayA.delayTime),n._delayB=new ne({maxDelay:1,context:n.context}),n._lfoB=new Re({context:n.context,min:0,max:.1,type:"sawtooth",phase:180}).connect(n._delayB.delayTime),n._crossFade=new qn({context:n.context}),n._crossFadeLFO=new Re({context:n.context,min:0,max:1,type:"triangle",phase:90}).connect(n._crossFade.fade),n._feedbackDelay=new ne({delayTime:o.delayTime,context:n.context}),n.delayTime=n._feedbackDelay.delayTime,st(n,"delayTime"),n._pitch=o.pitch,n._windowSize=o.windowSize,n._delayA.connect(n._crossFade.a),n._delayB.connect(n._crossFade.b),n._frequency.fan(n._lfoA.frequency,n._lfoB.frequency,n._crossFadeLFO.frequency),n.effectSend.fan(n._delayA,n._delayB),n._crossFade.chain(n._feedbackDelay,n.effectReturn);var i=n.now();return n._lfoA.start(i),n._lfoB.start(i),n._crossFadeLFO.start(i),n.windowSize=n._windowSize,n}return a(e,t),e.getDefaults=function(){return Object.assign(Jn.getDefaults(),{pitch:0,windowSize:.1,delayTime:0,feedback:0})},Object.defineProperty(e.prototype,"pitch",{get:function(){return this._pitch},set:function(t){this._pitch=t;var e=0;t<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,e=bt(t-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,e=bt(t)-1),this._frequency.value=e*(1.2/this._windowSize)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"windowSize",{get:function(){return this._windowSize},set:function(t){this._windowSize=this.toSeconds(t),this.pitch=this._pitch},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._frequency.dispose(),this._delayA.dispose(),this._delayB.dispose(),this._lfoA.dispose(),this._lfoB.dispose(),this._crossFade.dispose(),this._crossFadeLFO.dispose(),this._feedbackDelay.dispose(),this},e}(Jn),po=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","octaves","baseFrequency"]))||this;n.name="Phaser";var o=B(e.getDefaults(),arguments,["frequency","octaves","baseFrequency"]);return n._lfoL=new Re({context:n.context,frequency:o.frequency,min:0,max:1}),n._lfoR=new Re({context:n.context,frequency:o.frequency,min:0,max:1,phase:180}),n._baseFrequency=n.toFrequency(o.baseFrequency),n._octaves=o.octaves,n.Q=new Bt({context:n.context,value:o.Q,units:"positive"}),n._filtersL=n._makeFilters(o.stages,n._lfoL),n._filtersR=n._makeFilters(o.stages,n._lfoR),n.frequency=n._lfoL.frequency,n.frequency.value=o.frequency,n.connectEffectLeft.apply(n,f(n._filtersL)),n.connectEffectRight.apply(n,f(n._filtersR)),n._lfoL.frequency.connect(n._lfoR.frequency),n.baseFrequency=o.baseFrequency,n.octaves=o.octaves,n._lfoL.start(),n._lfoR.start(),st(n,["frequency","Q"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(Zn.getDefaults(),{frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350})},e.prototype._makeFilters=function(t,e){for(var n=[],o=0;o<t;o++){var i=this.context.createBiquadFilter();i.type="allpass",this.Q.connect(i.Q),e.connect(i.frequency),n.push(i)}return n},Object.defineProperty(e.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t;var e=this._baseFrequency*Math.pow(2,t);this._lfoL.max=e,this._lfoR.max=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=this.toFrequency(t),this._lfoL.min=this._baseFrequency,this._lfoR.min=this._baseFrequency,this.octaves=this._octaves},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.Q.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._filtersL.forEach((function(t){return t.disconnect()})),this._filtersR.forEach((function(t){return t.disconnect()})),this.frequency.dispose(),this},e}(Zn),fo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["decay"]))||this;n.name="Reverb",n._convolver=n.context.createConvolver(),n.ready=Promise.resolve();var o=B(e.getDefaults(),arguments,["decay"]);return n._decay=o.decay,n._preDelay=o.preDelay,n.generate(),n.connectEffect(n._convolver),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{decay:1.5,preDelay:.01})},Object.defineProperty(e.prototype,"decay",{get:function(){return this._decay},set:function(t){m(t=this.toSeconds(t),.001),this._decay=t,this.generate()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"preDelay",{get:function(){return this._preDelay},set:function(t){m(t=this.toSeconds(t),0),this._preDelay=t,this.generate()},enumerable:!0,configurable:!0}),e.prototype.generate=function(){return u(this,void 0,void 0,(function(){var t,e,n,o,i,r,s,a;return l(this,(function(c){switch(c.label){case 0:return t=this.ready,e=new lt(2,this._decay+this._preDelay,this.context.sampleRate),n=new fe({context:e}),o=new fe({context:e}),i=new Xn({context:e}),n.connect(i,0,0),o.connect(i,0,1),r=new Vt({context:e}).toDestination(),i.connect(r),n.start(0),o.start(0),r.gain.setValueAtTime(0,0),r.gain.setValueAtTime(1,this._preDelay),r.gain.exponentialApproachValueAtTime(0,this._preDelay,this.decay),s=e.render(),this.ready=s.then(ct),[4,t];case 1:return c.sent(),a=this._convolver,[4,s];case 2:return a.buffer=c.sent().get(),[2,this]}}))}))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._convolver.disconnect(),this},e}(In),mo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;return n.name="MidSideSplit",n._split=n.input=new Yn({channels:2,context:n.context}),n._midAdd=new Ee({context:n.context}),n.mid=new Oe({context:n.context,value:Math.SQRT1_2}),n._sideSubtract=new We({context:n.context}),n.side=new Oe({context:n.context,value:Math.SQRT1_2}),n._split.connect(n._midAdd,0),n._split.connect(n._midAdd.addend,1),n._split.connect(n._sideSubtract,0),n._split.connect(n._sideSubtract.subtrahend,1),n._midAdd.connect(n.mid),n._sideSubtract.connect(n.side),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.mid.dispose(),this.side.dispose(),this._midAdd.dispose(),this._sideSubtract.dispose(),this._split.dispose(),this},e}(qt),yo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;return n.name="MidSideMerge",n.mid=new Vt({context:n.context}),n.side=new Vt({context:n.context}),n._left=new Ee({context:n.context}),n._leftMult=new Oe({context:n.context,value:Math.SQRT1_2}),n._right=new We({context:n.context}),n._rightMult=new Oe({context:n.context,value:Math.SQRT1_2}),n._merge=n.output=new Xn({context:n.context}),n.mid.fan(n._left),n.side.connect(n._left.addend),n.mid.connect(n._right),n.side.connect(n._right.subtrahend),n._left.connect(n._leftMult),n._right.connect(n._rightMult),n._leftMult.connect(n._merge,0,0),n._rightMult.connect(n._merge,0,1),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.mid.dispose(),this.side.dispose(),this._leftMult.dispose(),this._rightMult.dispose(),this._left.dispose(),this._right.dispose(),this},e}(qt),_o=function(t){function e(e){var n=t.call(this,e)||this;return n.name="MidSideEffect",n._midSideMerge=new yo({context:n.context}),n._midSideSplit=new mo({context:n.context}),n._midSend=n._midSideSplit.mid,n._sideSend=n._midSideSplit.side,n._midReturn=n._midSideMerge.mid,n._sideReturn=n._midSideMerge.side,n.effectSend.connect(n._midSideSplit),n._midSideMerge.connect(n.effectReturn),n}return a(e,t),e.prototype.connectEffectMid=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];(t=this._midSend).chain.apply(t,f(e,[this._midReturn]))},e.prototype.connectEffectSide=function(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];(t=this._sideSend).chain.apply(t,f(e,[this._sideReturn]))},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this._midSend.dispose(),this._sideSend.dispose(),this._midReturn.dispose(),this._sideReturn.dispose(),this},e}(In),go=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["width"]))||this;n.name="StereoWidener";var o=B(e.getDefaults(),arguments,["width"]);return n.width=new Bt({context:n.context,value:o.width,units:"normalRange"}),st(n,["width"]),n._twoTimesWidthMid=new Oe({context:n.context,value:2}),n._twoTimesWidthSide=new Oe({context:n.context,value:2}),n._midMult=new Oe({context:n.context}),n._twoTimesWidthMid.connect(n._midMult.factor),n.connectEffectMid(n._midMult),n._oneMinusWidth=new We({context:n.context}),n._oneMinusWidth.connect(n._twoTimesWidthMid),Ft(n.context.getConstant(1),n._oneMinusWidth),n.width.connect(n._oneMinusWidth.subtrahend),n._sideMult=new Oe({context:n.context}),n.width.connect(n._twoTimesWidthSide),n._twoTimesWidthSide.connect(n._sideMult.factor),n.connectEffectSide(n._sideMult),n}return a(e,t),e.getDefaults=function(){return Object.assign(_o.getDefaults(),{width:.5})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.width.dispose(),this._midMult.dispose(),this._sideMult.dispose(),this._twoTimesWidthMid.dispose(),this._twoTimesWidthSide.dispose(),this._oneMinusWidth.dispose(),this},e}(_o),vo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","depth"]))||this;n.name="Tremolo";var o=B(e.getDefaults(),arguments,["frequency","depth"]);return n._lfoL=new Re({context:n.context,type:o.type,min:1,max:0}),n._lfoR=new Re({context:n.context,type:o.type,min:1,max:0}),n._amplitudeL=new Vt({context:n.context}),n._amplitudeR=new Vt({context:n.context}),n.frequency=new Bt({context:n.context,value:o.frequency,units:"frequency"}),n.depth=new Bt({context:n.context,value:o.depth,units:"normalRange"}),st(n,["frequency","depth"]),n.connectEffectLeft(n._amplitudeL),n.connectEffectRight(n._amplitudeR),n._lfoL.connect(n._amplitudeL.gain),n._lfoR.connect(n._amplitudeR.gain),n.frequency.fan(n._lfoL.frequency,n._lfoR.frequency),n.depth.fan(n._lfoR.amplitude,n._lfoL.amplitude),n.spread=o.spread,n}return a(e,t),e.getDefaults=function(){return Object.assign(Zn.getDefaults(),{frequency:10,type:"sine",depth:.5,spread:180})},e.prototype.start=function(t){return this._lfoL.start(t),this._lfoR.start(t),this},e.prototype.stop=function(t){return this._lfoL.stop(t),this._lfoR.stop(t),this},e.prototype.sync=function(){return this._lfoL.sync(),this._lfoR.sync(),this.context.transport.syncSignal(this.frequency),this},e.prototype.unsync=function(){return this._lfoL.unsync(),this._lfoR.unsync(),this.context.transport.unsyncSignal(this.frequency),this},Object.defineProperty(e.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._lfoL.dispose(),this._lfoR.dispose(),this._amplitudeL.dispose(),this._amplitudeR.dispose(),this.frequency.dispose(),this.depth.dispose(),this},e}(Zn),bo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["frequency","depth"]))||this;n.name="Vibrato";var o=B(e.getDefaults(),arguments,["frequency","depth"]);return n._delayNode=new ne({context:n.context,delayTime:0,maxDelay:o.maxDelay}),n._lfo=new Re({context:n.context,type:o.type,min:0,max:o.maxDelay,frequency:o.frequency,phase:-90}).start().connect(n._delayNode.delayTime),n.frequency=n._lfo.frequency,n.depth=n._lfo.amplitude,n.depth.value=o.depth,st(n,["frequency","depth"]),n.effectSend.chain(n._delayNode,n.effectReturn),n}return a(e,t),e.getDefaults=function(){return Object.assign(In.getDefaults(),{maxDelay:.005,frequency:5,depth:.1,type:"sine"})},Object.defineProperty(e.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._delayNode.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this},e}(In),xo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["type","size"]))||this;n.name="Analyser",n._analysers=[],n._buffers=[];var o=B(e.getDefaults(),arguments,["type","size"]);n.input=n.output=n._gain=new Vt({context:n.context}),n._split=new Yn({context:n.context,channels:o.channels}),n.input.connect(n._split),m(o.channels,1);for(var i=0;i<o.channels;i++)n._analysers[i]=n.context.createAnalyser(),n._split.connect(n._analysers[i],i,0);return n.size=o.size,n.type=o.type,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})},e.prototype.getValue=function(){var t=this;return this._analysers.forEach((function(e,n){var o=t._buffers[n];"fft"===t._type?e.getFloatFrequencyData(o):"waveform"===t._type&&e.getFloatTimeDomainData(o)})),1===this.channels?this._buffers[0]:this._buffers},Object.defineProperty(e.prototype,"size",{get:function(){return this._analysers[0].frequencyBinCount},set:function(t){var e=this;this._analysers.forEach((function(n,o){n.fftSize=2*t,e._buffers[o]=new Float32Array(t)}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"channels",{get:function(){return this._analysers.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){d("waveform"===t||"fft"===t,"Analyser: invalid type: "+t),this._type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"smoothing",{get:function(){return this._analysers[0].smoothingTimeConstant},set:function(t){this._analysers.forEach((function(e){return e.smoothingTimeConstant=t}))},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._analysers.forEach((function(t){return t.disconnect()})),this._split.dispose(),this._gain.dispose(),this},e}(qt),wo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;return n.name="MeterBase",n.input=n.output=n._analyser=new xo({context:n.context,size:256,type:"waveform"}),n}return a(e,t),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._analyser.dispose(),this},e}(qt),Oo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["smoothing"]))||this;n.name="Meter",n._rms=0;var o=B(e.getDefaults(),arguments,["smoothing"]);return n.input=n.output=n._analyser=new xo({context:n.context,size:256,type:"waveform",channels:o.channels}),n.smoothing=o.smoothing,n.normalRange=o.normalRange,n}return a(e,t),e.getDefaults=function(){return Object.assign(wo.getDefaults(),{smoothing:.8,normalRange:!1,channels:1})},e.prototype.getLevel=function(){return b("'getLevel' has been changed to 'getValue'"),this.getValue()},e.prototype.getValue=function(){var t=this,e=this._analyser.getValue(),n=(1===this.channels?[e]:e).map((function(e){var n=e.reduce((function(t,e){return t+e*e}),0),o=Math.sqrt(n/e.length);return t._rms=Math.max(o,t._rms*t.smoothing),t.normalRange?t._rms:vt(t._rms)}));return 1===this.channels?n[0]:n},Object.defineProperty(e.prototype,"channels",{get:function(){return this._analyser.channels},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._analyser.dispose(),this},e}(wo),To=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["size"]))||this;n.name="FFT";var o=B(e.getDefaults(),arguments,["size"]);return n.normalRange=o.normalRange,n._analyser.type="fft",n.size=o.size,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{normalRange:!1,size:1024,smoothing:.8})},e.prototype.getValue=function(){var t=this;return this._analyser.getValue().map((function(e){return t.normalRange?gt(e):e}))},Object.defineProperty(e.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"smoothing",{get:function(){return this._analyser.smoothing},set:function(t){this._analyser.smoothing=t},enumerable:!0,configurable:!0}),e}(wo),So=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments))||this;return n.name="DCMeter",n._analyser.type="waveform",n._analyser.size=256,n}return a(e,t),e.prototype.getValue=function(){return this._analyser.getValue()[0]},e}(wo),Co=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["size"]))||this;n.name="Waveform";var o=B(e.getDefaults(),arguments,["size"]);return n._analyser.type="waveform",n.size=o.size,n}return a(e,t),e.getDefaults=function(){return Object.assign(wo.getDefaults(),{size:1024})},e.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(e.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t},enumerable:!0,configurable:!0}),e}(wo),ko=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["solo"]))||this;n.name="Solo";var o=B(e.getDefaults(),arguments,["solo"]);return n.input=n.output=new Vt({context:n.context}),e._allSolos.has(n.context)||e._allSolos.set(n.context,new Set),e._allSolos.get(n.context).add(n),n.solo=o.solo,n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{solo:!1})},Object.defineProperty(e.prototype,"solo",{get:function(){return this._isSoloed()},set:function(t){t?this._addSolo():this._removeSolo(),e._allSolos.get(this.context).forEach((function(t){return t._updateSolo()}))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"muted",{get:function(){return 0===this.input.gain.value},enumerable:!0,configurable:!0}),e.prototype._addSolo=function(){e._soloed.has(this.context)||e._soloed.set(this.context,new Set),e._soloed.get(this.context).add(this)},e.prototype._removeSolo=function(){e._soloed.has(this.context)&&e._soloed.get(this.context).delete(this)},e.prototype._isSoloed=function(){return e._soloed.has(this.context)&&e._soloed.get(this.context).has(this)},e.prototype._noSolos=function(){return!e._soloed.has(this.context)||e._soloed.has(this.context)&&0===e._soloed.get(this.context).size},e.prototype._updateSolo=function(){this._isSoloed()||this._noSolos()?this.input.gain.value=1:this.input.gain.value=0},e.prototype.dispose=function(){return t.prototype.dispose.call(this),e._allSolos.get(this.context).delete(this),this._removeSolo(),this},e._allSolos=new Map,e._soloed=new Map,e}(qt),Ao=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["pan","volume"]))||this;n.name="PanVol";var o=B(e.getDefaults(),arguments,["pan","volume"]);return n._panner=n.input=new Vn({context:n.context,pan:o.pan}),n.pan=n._panner.pan,n._volume=n.output=new oe({context:n.context,volume:o.volume}),n.volume=n._volume.volume,n._panner.connect(n._volume),n.mute=o.mute,st(n,["pan","volume"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mute:!1,pan:0,volume:0})},Object.defineProperty(e.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this},e}(qt),jo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["volume","pan"]))||this;n.name="Channel";var o=B(e.getDefaults(),arguments,["volume","pan"]);return n._solo=n.input=new ko({solo:o.solo,context:n.context}),n._panVol=n.output=new Ao({context:n.context,pan:o.pan,volume:o.volume,mute:o.mute}),n.pan=n._panVol.pan,n.volume=n._panVol.volume,n._solo.connect(n._panVol),st(n,["pan","volume"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1})},Object.defineProperty(e.prototype,"solo",{get:function(){return this._solo.solo},set:function(t){this._solo.solo=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"muted",{get:function(){return this._solo.muted||this.mute},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mute",{get:function(){return this._panVol.mute},set:function(t){this._panVol.mute=t},enumerable:!0,configurable:!0}),e.prototype._getBus=function(t){return e.buses.has(t)||e.buses.set(t,new Vt({context:this.context})),e.buses.get(t)},e.prototype.send=function(t,e){void 0===e&&(e=0);var n=this._getBus(t),o=new Vt({context:this.context,units:"decibels",gain:e});return this.connect(o),o.connect(n),o},e.prototype.receive=function(t){return this._getBus(t).connect(this),this},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this},e.buses=new Map,e}(qt),Do=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["lowFrequency","highFrequency"]))||this;n.name="MultibandSplit",n.input=new Vt({context:n.context}),n.output=void 0,n.low=new on({context:n.context,frequency:0,type:"lowpass"}),n._lowMidFilter=new on({context:n.context,frequency:0,type:"highpass"}),n.mid=new on({context:n.context,frequency:0,type:"lowpass"}),n.high=new on({context:n.context,frequency:0,type:"highpass"}),n._internalChannels=[n.low,n.mid,n.high];var o=B(e.getDefaults(),arguments,["lowFrequency","highFrequency"]);return n.lowFrequency=new Bt({context:n.context,units:"frequency",value:o.lowFrequency}),n.highFrequency=new Bt({context:n.context,units:"frequency",value:o.highFrequency}),n.Q=new Bt({context:n.context,units:"positive",value:o.Q}),n.input.fan(n.low,n.high),n.input.chain(n._lowMidFilter,n.mid),n.lowFrequency.fan(n.low.frequency,n._lowMidFilter.frequency),n.highFrequency.fan(n.mid.frequency,n.high.frequency),n.Q.connect(n.low.Q),n.Q.connect(n._lowMidFilter.Q),n.Q.connect(n.mid.Q),n.Q.connect(n.high.Q),st(n,["high","mid","low","highFrequency","lowFrequency"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{Q:1,highFrequency:2500,lowFrequency:400})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),at(this,["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this._lowMidFilter.dispose(),this.mid.dispose(),this.high.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this.Q.dispose(),this},e}(qt),Eo=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.name="Listener",e.positionX=new Rt({context:e.context,param:e.context.rawContext.listener.positionX}),e.positionY=new Rt({context:e.context,param:e.context.rawContext.listener.positionY}),e.positionZ=new Rt({context:e.context,param:e.context.rawContext.listener.positionZ}),e.forwardX=new Rt({context:e.context,param:e.context.rawContext.listener.forwardX}),e.forwardY=new Rt({context:e.context,param:e.context.rawContext.listener.forwardY}),e.forwardZ=new Rt({context:e.context,param:e.context.rawContext.listener.forwardZ}),e.upX=new Rt({context:e.context,param:e.context.rawContext.listener.upX}),e.upY=new Rt({context:e.context,param:e.context.rawContext.listener.upY}),e.upZ=new Rt({context:e.context,param:e.context.rawContext.listener.upZ}),e}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this},e}(qt);K((function(t){t.listener=new Eo({context:t})})),et((function(t){t.listener.dispose()}));var Mo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["positionX","positionY","positionZ"]))||this;n.name="Panner3D";var o=B(e.getDefaults(),arguments,["positionX","positionY","positionZ"]);return n._panner=n.input=n.output=n.context.createPanner(),n.panningModel=o.panningModel,n.maxDistance=o.maxDistance,n.distanceModel=o.distanceModel,n.coneOuterGain=o.coneOuterGain,n.coneOuterAngle=o.coneOuterAngle,n.coneInnerAngle=o.coneInnerAngle,n.refDistance=o.refDistance,n.rolloffFactor=o.rolloffFactor,n.positionX=new Rt({context:n.context,param:n._panner.positionX,value:o.positionX}),n.positionY=new Rt({context:n.context,param:n._panner.positionY,value:o.positionY}),n.positionZ=new Rt({context:n.context,param:n._panner.positionZ,value:o.positionZ}),n.orientationX=new Rt({context:n.context,param:n._panner.orientationX,value:o.orientationX}),n.orientationY=new Rt({context:n.context,param:n._panner.orientationY,value:o.orientationY}),n.orientationZ=new Rt({context:n.context,param:n._panner.orientationZ,value:o.orientationZ}),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1})},e.prototype.setPosition=function(t,e,n){return this.positionX.value=t,this.positionY.value=e,this.positionZ.value=n,this},e.prototype.setOrientation=function(t,e,n){return this.orientationX.value=t,this.orientationY.value=e,this.orientationZ.value=n,this},Object.defineProperty(e.prototype,"panningModel",{get:function(){return this._panner.panningModel},set:function(t){this._panner.panningModel=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"refDistance",{get:function(){return this._panner.refDistance},set:function(t){this._panner.refDistance=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rolloffFactor",{get:function(){return this._panner.rolloffFactor},set:function(t){this._panner.rolloffFactor=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"distanceModel",{get:function(){return this._panner.distanceModel},set:function(t){this._panner.distanceModel=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"coneInnerAngle",{get:function(){return this._panner.coneInnerAngle},set:function(t){this._panner.coneInnerAngle=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"coneOuterAngle",{get:function(){return this._panner.coneOuterAngle},set:function(t){this._panner.coneOuterAngle=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"coneOuterGain",{get:function(){return this._panner.coneOuterGain},set:function(t){this._panner.coneOuterGain=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"maxDistance",{get:function(){return this._panner.maxDistance},set:function(t){this._panner.maxDistance=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._panner.disconnect(),this.orientationX.dispose(),this.orientationY.dispose(),this.orientationZ.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this},e}(qt),Po=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["threshold","ratio"]))||this;n.name="Compressor",n._compressor=n.context.createDynamicsCompressor(),n.input=n._compressor,n.output=n._compressor;var o=B(e.getDefaults(),arguments,["threshold","ratio"]);return n.threshold=new Rt({minValue:n._compressor.threshold.minValue,maxValue:n._compressor.threshold.maxValue,context:n.context,convert:!1,param:n._compressor.threshold,units:"decibels",value:o.threshold}),n.attack=new Rt({minValue:n._compressor.attack.minValue,maxValue:n._compressor.attack.maxValue,context:n.context,param:n._compressor.attack,units:"time",value:o.attack}),n.release=new Rt({minValue:n._compressor.release.minValue,maxValue:n._compressor.release.maxValue,context:n.context,param:n._compressor.release,units:"time",value:o.release}),n.knee=new Rt({minValue:n._compressor.knee.minValue,maxValue:n._compressor.knee.maxValue,context:n.context,convert:!1,param:n._compressor.knee,units:"decibels",value:o.knee}),n.ratio=new Rt({minValue:n._compressor.ratio.minValue,maxValue:n._compressor.ratio.maxValue,context:n.context,convert:!1,param:n._compressor.ratio,units:"positive",value:o.ratio}),st(n,["knee","release","attack","ratio","threshold"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{attack:.003,knee:30,ratio:12,release:.25,threshold:-24})},Object.defineProperty(e.prototype,"reduction",{get:function(){return this._compressor.reduction},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._compressor.disconnect(),this.attack.dispose(),this.release.dispose(),this.threshold.dispose(),this.ratio.dispose(),this.knee.dispose(),this},e}(qt),Ro=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["threshold","smoothing"])))||this;n.name="Gate";var o=B(e.getDefaults(),arguments,["threshold","smoothing"]);return n._follower=new zn({context:n.context,smoothing:o.smoothing}),n._gt=new Ge({context:n.context,value:gt(o.threshold)}),n.input=new Vt({context:n.context}),n._gate=n.output=new Vt({context:n.context}),n.input.connect(n._gate),n.input.chain(n._follower,n._gt,n._gate.gain),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{smoothing:.1,threshold:-40})},Object.defineProperty(e.prototype,"threshold",{get:function(){return vt(this._gt.value)},set:function(t){this._gt.value=gt(t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"smoothing",{get:function(){return this._follower.smoothing},set:function(t){this._follower.smoothing=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.input.dispose(),this._follower.dispose(),this._gt.dispose(),this._gate.dispose(),this},e}(qt),qo=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments,["threshold"])))||this;n.name="Limiter";var o=B(e.getDefaults(),arguments,["threshold"]);return n._compressor=n.input=n.output=new Po({context:n.context,ratio:20,attack:0,release:0,threshold:o.threshold}),n.threshold=n._compressor.threshold,st(n,"threshold"),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{threshold:-12})},Object.defineProperty(e.prototype,"reduction",{get:function(){return this._compressor.reduction},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._compressor.dispose(),this.threshold.dispose(),this},e}(qt),Io=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments)))||this;n.name="MidSideCompressor";var o=B(e.getDefaults(),arguments);return n._midSideSplit=n.input=new mo({context:n.context}),n._midSideMerge=n.output=new yo({context:n.context}),n.mid=new Po(Object.assign(o.mid,{context:n.context})),n.side=new Po(Object.assign(o.side,{context:n.context})),n._midSideSplit.mid.chain(n.mid,n._midSideMerge.mid),n._midSideSplit.side.chain(n.side,n._midSideMerge.side),st(n,["mid","side"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this.mid.dispose(),this.side.dispose(),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this},e}(qt),Fo=function(t){function e(){var n=t.call(this,Object.assign(B(e.getDefaults(),arguments)))||this;n.name="MultibandCompressor";var o=B(e.getDefaults(),arguments);return n._splitter=n.input=new Do({context:n.context,lowFrequency:o.lowFrequency,highFrequency:o.highFrequency}),n.lowFrequency=n._splitter.lowFrequency,n.highFrequency=n._splitter.highFrequency,n.output=new Vt({context:n.context}),n.low=new Po(Object.assign(o.low,{context:n.context})),n.mid=new Po(Object.assign(o.mid,{context:n.context})),n.high=new Po(Object.assign(o.high,{context:n.context})),n._splitter.low.chain(n.low,n.output),n._splitter.mid.chain(n.mid,n.output),n._splitter.high.chain(n.high,n.output),st(n,["high","mid","low","highFrequency","lowFrequency"]),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{lowFrequency:250,highFrequency:2e3,low:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10},mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},high:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16}})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._splitter.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.output.dispose(),this},e}(qt),No=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["low","mid","high"]))||this;n.name="EQ3",n.output=new Vt({context:n.context}),n._internalChannels=[];var o=B(e.getDefaults(),arguments,["low","mid","high"]);return n.input=n._multibandSplit=new Do({context:n.context,highFrequency:o.highFrequency,lowFrequency:o.lowFrequency}),n._lowGain=new Vt({context:n.context,gain:o.low,units:"decibels"}),n._midGain=new Vt({context:n.context,gain:o.mid,units:"decibels"}),n._highGain=new Vt({context:n.context,gain:o.high,units:"decibels"}),n.low=n._lowGain.gain,n.mid=n._midGain.gain,n.high=n._highGain.gain,n.Q=n._multibandSplit.Q,n.lowFrequency=n._multibandSplit.lowFrequency,n.highFrequency=n._multibandSplit.highFrequency,n._multibandSplit.low.chain(n._lowGain,n.output),n._multibandSplit.mid.chain(n._midGain,n.output),n._multibandSplit.high.chain(n._highGain,n.output),st(n,["low","mid","high","lowFrequency","highFrequency"]),n._internalChannels=[n._multibandSplit],n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{high:0,highFrequency:2500,low:0,lowFrequency:400,mid:0})},e.prototype.dispose=function(){return t.prototype.dispose.call(this),at(this,["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this._lowGain.dispose(),this._midGain.dispose(),this._highGain.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.Q.dispose(),this},e}(qt),Vo=function(t){function e(){var n=t.call(this,B(e.getDefaults(),arguments,["url","onload"]))||this;n.name="Convolver",n._convolver=n.context.createConvolver();var o=B(e.getDefaults(),arguments,["url","onload"]);return n._buffer=new ut(o.url,(function(t){n.buffer=t,o.onload()})),n.input=new Vt({context:n.context}),n.output=new Vt({context:n.context}),n._buffer.loaded&&(n.buffer=n._buffer),n.normalize=o.normalize,n.input.chain(n._convolver,n.output),n}return a(e,t),e.getDefaults=function(){return Object.assign(qt.getDefaults(),{normalize:!0,onload:ct})},e.prototype.load=function(t){return u(this,void 0,void 0,(function(){var e;return l(this,(function(n){switch(n.label){case 0:return e=this,[4,this._buffer.load(t)];case 1:return e.buffer=n.sent(),[2]}}))}))},Object.defineProperty(e.prototype,"buffer",{get:function(){return this._buffer.length?this._buffer:null},set:function(t){t&&this._buffer.set(t),this._convolver.buffer&&(this.input.disconnect(),this._convolver.disconnect(),this._convolver=this.context.createConvolver(),this.input.connect(this._convolver));var e=this._buffer.get();this._convolver.buffer=e||null},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"normalize",{get:function(){return this._convolver.normalize},set:function(t){this._convolver.normalize=t},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){return t.prototype.dispose.call(this),this._buffer.dispose(),this._convolver.disconnect(),this},e}(qt),Lo=ft().now.bind(ft()),zo=ft().immediate.bind(ft()),Bo=ft().transport,Wo=ft().destination,Uo=ft().listener,Go=ft().draw,Yo=ft(),Xo=ut.loaded.bind(ut)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","AbortError")}catch(t){return t.code=20,t.name="AbortError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","UnknownError")}catch(t){return t.name="UnknownError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{if(null===t)return!1;const e=t.length;return e%2!=0?0!==t[Math.floor(e/2)]:t[e/2-1]+t[e/2]!==0}},function(t,e,n){"use strict";n(51),n(52),n(53),n(54),n(55),n(56),n(57),n(58),n(59),n(60),n(61),n(62),n(63),n(64),n(65),n(66),n(67),n(68),n(69),n(70),n(71),n(72),n(73),n(74),n(75),n(76),n(77),n(78),n(79),n(80),n(81),n(82),n(83),n(84),n(85),n(86),n(87),n(88),n(89),n(90),n(91),n(92),n(93),n(94),n(95),n(96),n(97),n(98),n(99),n(100),n(101),n(102),n(103),n(104),n(105),n(106),n(107),n(108),n(109),n(110),n(111),n(112),n(113),n(114),n(115),n(116),n(117),n(118),n(119),n(120),n(121),n(122),n(123),n(124),n(125),n(126),n(127),n(128),n(129),n(130),n(131),n(132),n(133)},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";n(135),n(136),n(137),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),n(389),n(390),n(391),n(392),n(393),n(394),n(395),n(396),n(397),n(398),n(399),n(400),n(401),n(402),n(403),n(404),n(405),n(406),n(407),n(408),n(409),n(410),n(411),n(412),n(413),n(414),n(415),n(416),n(417),n(418),n(419),n(420),n(421),n(422),n(423),n(424),n(425),n(426),n(427),n(428),n(429),n(430),n(431),n(432),n(433),n(434),n(435),n(436),n(437),n(438),n(439),n(440),n(441),n(442),n(443),n(444),n(445),n(446),n(447),n(448),n(449),n(450),n(451),n(452),n(453),n(454),n(455),n(456),n(457),n(458),n(459),n(460),n(461),n(462),n(463),n(464),n(465),n(466),n(467),n(468),n(469),n(470),n(471),n(472),n(473),n(474),n(475),n(476),n(477),n(478),n(479),n(480),n(481),n(482),n(483),n(484),n(485),n(486),n(487),n(488),n(489),n(490),n(491),n(492),n(493),n(494),n(495),n(496),n(497),n(498),n(499),n(500)},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n,o)=>{const i=[];for(let t=0;t<o.numberOfInputs;t+=1)i.push(new Set);t.set(e,{activeInputs:i,outputs:new Set,passiveInputs:new WeakMap,renderer:n})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n)=>{t.set(e,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:n})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},i=(t,e,n,i,r,s)=>class extends t{constructor(t,n=o){const a=r(t),c={...o,...n},u=i(a,c);super(t,!1,u,s(a)?e():null),this._nativeAnalyserNode=u}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(t){this._nativeAnalyserNode.fftSize=t}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(t){const e=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=t,!(t>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=e,n()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(t){const e=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=t,!(this._nativeAnalyserNode.maxDecibels>t))throw this._nativeAnalyserNode.minDecibels=e,n()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(t){this._nativeAnalyserNode.smoothingTimeConstant=t}getByteFrequencyData(t){this._nativeAnalyserNode.getByteFrequencyData(t)}getByteTimeDomainData(t){this._nativeAnalyserNode.getByteTimeDomainData(t)}getFloatFrequencyData(t){this._nativeAnalyserNode.getFloatFrequencyData(t)}getFloatTimeDomainData(t){this._nativeAnalyserNode.getFloatTimeDomainData(t)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n)=>()=>{const i=new WeakMap;return{render(r,s,a){const c=i.get(s);return void 0!==c?Promise.resolve(c):(async(r,s,a)=>{let c=e(r);if(!Object(o.a)(c,s)){const e={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,fftSize:c.fftSize,maxDecibels:c.maxDecibels,minDecibels:c.minDecibels,smoothingTimeConstant:c.smoothingTimeConstant};c=t(s,e)}return i.set(s,c),await n(r,s,c,a),c})(r,s,a)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var o=n(32),i=n(29);const r={numberOfChannels:1},s=(t,e,n,s,a,c,u,l)=>{let h=null;return class p{constructor(p){if(null===a)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:f,numberOfChannels:d,sampleRate:m}={...r,...p};null===h&&(h=new a(1,1,44100));const y=null!==s&&e(c,c)?new s({length:f,numberOfChannels:d,sampleRate:m}):h.createBuffer(d,f,m);if(0===y.numberOfChannels)throw n();return"function"!=typeof y.copyFromChannel?(u(y),Object(i.a)(y)):e(o.a,()=>Object(o.a)(y))||l(y),t.add(y),y}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===p.prototype||t.has(e)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var o=n(2),i=n(16),r=n(21);const s={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},a=(t,e,n,a,c,u,l,h)=>class extends t{constructor(t,i=s){const r=u(t),a={...s,...i},h=c(r,a),p=l(r),f=p?e():null;super(t,!1,h,f),this._audioBufferSourceNodeRenderer=f,this._isBufferNullified=!1,this._isBufferSet=null!==i.buffer&&void 0!==i.buffer,this._nativeAudioBufferSourceNode=h,this._onended=null,this._playbackRate=n(this,p,h.playbackRate,o.b,o.a)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(t){try{this._nativeAudioBufferSourceNode.buffer=t}catch(e){if(null!==t||17!==e.code)throw e;if(null!==this._nativeAudioBufferSourceNode.buffer){const t=this._nativeAudioBufferSourceNode.buffer,e=t.numberOfChannels;for(let n=0;n<e;n+=1)t.getChannelData(n).fill(0);this._isBufferNullified=!0}}if(null!==t){if(this._isBufferSet)throw a();this._isBufferSet=!0}}get onended(){return this._onended}set onended(t){const e="function"==typeof t?h(this,t):null;this._nativeAudioBufferSourceNode.onended=e;const n=this._nativeAudioBufferSourceNode.onended;this._onended=null!==n&&n===e?t:n}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(t){this._nativeAudioBufferSourceNode.loop=t}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(t){this._nativeAudioBufferSourceNode.loopEnd=t}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(t){this._nativeAudioBufferSourceNode.loopStart=t}get playbackRate(){return this._playbackRate}start(t=0,e=0,n){if(this._nativeAudioBufferSourceNode.start(t,e,n),null!==this._audioBufferSourceNodeRenderer)this._audioBufferSourceNodeRenderer.start=void 0===n?[t,e]:[t,e,n];else{Object(i.a)(this);const t=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",t),setTimeout(()=>Object(r.a)(this),1e3)};this._nativeAudioBufferSourceNode.addEventListener("ended",t)}}stop(t=0){this._nativeAudioBufferSourceNode.stop(t),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=t)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;let a=null,c=null;return{set start(t){a=t},set stop(t){c=t},render(u,l,h){const p=s.get(l);return void 0!==p?Promise.resolve(p):(async(u,l,h)=>{let p=n(u);const f=Object(o.a)(p,l);if(!f){const t={buffer:p.buffer,channelCount:p.channelCount,channelCountMode:p.channelCountMode,channelInterpretation:p.channelInterpretation,loop:p.loop,loopEnd:p.loopEnd,loopStart:p.loopStart,playbackRate:p.playbackRate.value};p=e(l,t),null!==a&&p.start(...a),null!==c&&p.stop(c)}return s.set(l,p),f?await t(l,u.playbackRate,p.playbackRate,h):await i(l,u.playbackRate,p.playbackRate,h),await r(u,l,p,h),p})(u,l,h)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(40);const i=(t,e,n,i,r,s,a,c)=>class extends t{constructor(t={}){if(null===c)throw new Error("Missing the native AudioContext constructor.");const e=new c(t);if(null===e)throw i();if(!Object(o.a)(t.latencyHint))throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==t.sampleRate&&e.sampleRate!==t.sampleRate)throw n();super(e,2);const{latencyHint:r}=t,{sampleRate:s}=e;if(this._baseLatency="number"==typeof e.baseLatency?e.baseLatency:"balanced"===r?512/s:"interactive"===r||void 0===r?256/s:"playback"===r?1024/s:128*Math.max(2,Math.min(128,Math.round(r*s/128)))/s,this._nativeAudioContext=e,this._state=null,"running"===e.state){this._state="suspended";const t=()=>{"suspended"===this._state&&(this._state=null),e.removeEventListener("statechange",t)};e.addEventListener("statechange",t)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw e()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close())}createMediaElementSource(t){return new r(this,{mediaElement:t})}createMediaStreamSource(t){return new s(this,{mediaStream:t})}createMediaStreamTrackSource(t){return new a(this,{mediaStreamTrack:t})}resume(){return"suspended"===this._state?new Promise((t,e)=>{const n=()=>{this._nativeAudioContext.removeEventListener("statechange",n),"running"===this._nativeAudioContext.state?t():this.resume().then(t,e)};this._nativeAudioContext.addEventListener("statechange",n)}):this._nativeAudioContext.resume().catch(t=>{if(void 0===t||15===t.code)throw e();throw t})}suspend(){return this._nativeAudioContext.suspend().catch(t=>{if(void 0===t)throw e();throw t})}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i,r,s,a)=>class extends t{constructor(t,n){const o=r(t),c=s(o),u=i(o,n,c);super(t,!1,u,c?e(a):null),this._isNodeOfNativeOfflineAudioContext=c,this._nativeAudioDestinationNode=u}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(t){if(this._isNodeOfNativeOfflineAudioContext)throw o();if(t>this._nativeAudioDestinationNode.maxChannelCount)throw n();this._nativeAudioDestinationNode.channelCount=t}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(t){if(this._isNodeOfNativeOfflineAudioContext)throw o();this._nativeAudioDestinationNode.channelCountMode=t}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{let e=null;return{render:(n,o,i)=>(null===e&&(e=(async(e,n,o)=>{const i=n.destination;return await t(e,n,i,o),i})(n,o,i)),e)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(2);const i=(t,e,n,i,r)=>(s,a)=>{const c=a.listener,{forwardX:u,forwardY:l,forwardZ:h,positionX:p,positionY:f,positionZ:d,upX:m,upY:y,upZ:_}=void 0===c.forwardX?(()=>{const u=e(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),l=r(a),h=i(a,256,9,0),p=(e,i)=>{const r=n(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:i});return r.connect(u,0,e),r.start(),Object.defineProperty(r.offset,"defaultValue",{get:()=>i}),t({context:s},l,r.offset,o.b,o.a)};let f=[0,0,-1,0,1,0],d=[0,0,0];return h.onaudioprocess=({inputBuffer:t})=>{const e=[t.getChannelData(0)[0],t.getChannelData(1)[0],t.getChannelData(2)[0],t.getChannelData(3)[0],t.getChannelData(4)[0],t.getChannelData(5)[0]];e.some((t,e)=>t!==f[e])&&(c.setOrientation(...e),f=e);const n=[t.getChannelData(6)[0],t.getChannelData(7)[0],t.getChannelData(8)[0]];n.some((t,e)=>t!==d[e])&&(c.setPosition(...n),d=n)},u.connect(h),{forwardX:p(0,0),forwardY:p(1,0),forwardZ:p(2,-1),positionX:p(6,0),positionY:p(7,0),positionZ:p(8,0),upX:p(3,0),upY:p(4,1),upZ:p(5,0)}})():c;return{get forwardX(){return u},get forwardY(){return l},get forwardZ(){return h},get positionX(){return p},get positionY(){return f},get positionZ(){return d},get upX(){return m},get upY(){return y},get upZ(){return _}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(18);const i=(t,e,n,i,r,s,a,c,u,l,h,p)=>(f,d,m,y=null,_=null)=>{const g=new o.AutomationEventList(m.defaultValue),v=d?i(g):null,b={get defaultValue(){return m.defaultValue},get maxValue(){return null===y?m.maxValue:y},get minValue(){return null===_?m.minValue:_},get value(){return m.value},set value(t){m.value=t,b.setValueAtTime(t,f.context.currentTime)},cancelAndHoldAtTime(t){if("function"==typeof m.cancelAndHoldAtTime)null===v&&g.flush(f.context.currentTime),g.add(r(t)),m.cancelAndHoldAtTime(t);else{const e=Array.from(g).pop();null===v&&g.flush(f.context.currentTime),g.add(r(t));const n=Array.from(g).pop();m.cancelScheduledValues(t),e!==n&&void 0!==n&&("exponentialRampToValue"===n.type?m.exponentialRampToValueAtTime(n.value,n.endTime):"linearRampToValue"===n.type?m.linearRampToValueAtTime(n.value,n.endTime):"setValue"===n.type?m.setValueAtTime(n.value,n.startTime):"setValueCurve"===n.type&&m.setValueCurveAtTime(n.values,n.startTime,n.duration))}return b},cancelScheduledValues:t=>(null===v&&g.flush(f.context.currentTime),g.add(s(t)),m.cancelScheduledValues(t),b),exponentialRampToValueAtTime:(t,e)=>(null===v&&g.flush(f.context.currentTime),g.add(a(t,e)),m.exponentialRampToValueAtTime(t,e),b),linearRampToValueAtTime:(t,e)=>(null===v&&g.flush(f.context.currentTime),g.add(c(t,e)),m.linearRampToValueAtTime(t,e),b),setTargetAtTime:(t,e,n)=>(null===v&&g.flush(f.context.currentTime),g.add(u(t,e,n)),m.setTargetAtTime(t,e,n),b),setValueAtTime:(t,e)=>(null===v&&g.flush(f.context.currentTime),g.add(l(t,e)),m.setValueAtTime(t,e),b),setValueCurveAtTime(t,e,n){if(null!==p&&"webkitAudioContext"===p.name){const o=e+n,i=f.context.sampleRate,r=Math.ceil(e*i),s=Math.floor(o*i),a=s-r,c=new Float32Array(a);for(let o=0;o<a;o+=1){const s=(t.length-1)/n*((r+o)/i-e),a=Math.floor(s),u=Math.ceil(s);c[o]=a===u?t[a]:(1-(s-a))*t[a]+(1-(u-s))*t[u]}null===v&&g.flush(f.context.currentTime),g.add(h(c,e,n)),m.setValueCurveAtTime(c,e,n);const u=s/i;u<o&&b.setValueAtTime(c[c.length-1],u),b.setValueAtTime(t[t.length-1],o)}else null===v&&g.flush(f.context.currentTime),g.add(h(t,e,n)),m.setValueCurveAtTime(t,e,n);return b}};return n.set(b,m),e.set(b,f),t(b,v),b}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>({replay(e){for(const n of t)if("exponentialRampToValue"===n.type){const{endTime:t,value:o}=n;e.exponentialRampToValueAtTime(o,t)}else if("linearRampToValue"===n.type){const{endTime:t,value:o}=n;e.linearRampToValueAtTime(o,t)}else if("setTarget"===n.type){const{startTime:t,target:o,timeConstant:i}=n;e.setTargetAtTime(o,t,i)}else if("setValue"===n.type){const{startTime:t,value:o}=n;e.setValueAtTime(o,t)}else{if("setValueCurve"!==n.type)throw new Error("Can't apply an unknown automation.");{const{duration:t,startTime:o,values:i}=n;e.setValueCurveAtTime(i,o,t)}}}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var o=n(0),i=n(41);const r={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:void 0,parameterData:{},processorOptions:{}},s=t=>{const e=[];for(let n=0;n<t;n+=1)e.push(1);return e},a=(t,e,n,a,c,u,l,h,p)=>class extends t{constructor(t,p,f=r){const d=u(t),m=l(d),y=(t=>({...t,outputChannelCount:void 0!==t.outputChannelCount?t.outputChannelCount:1===t.numberOfInputs&&1===t.numberOfOutputs?[t.channelCount]:s(t.numberOfOutputs)}))({...r,...f}),_=o.j.get(d),g=void 0===_?void 0:_.get(p),v=a(d,m?null:t.baseLatency,h,p,g,y);super(t,!0,v,m?n(p,y,g):null);const b=[];if(v.parameters.forEach((t,n)=>{const o=e(this,m,t);b.push([n,o])}),this._nativeAudioWorkletNode=v,this._numberOfOutputs=0===f.numberOfOutputs?0:this._nativeAudioWorkletNode.numberOfOutputs,this._onprocessorerror=null,this._parameters=new i.a(b),"closed"!==t.state){const e=new c(t,{gain:0});try{this.connect(e).connect(t.destination)}catch(t){if("IndexSizeError"!==t.name)throw t}}}get numberOfOutputs(){return this._numberOfOutputs}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(t){const e="function"==typeof t?p(this,t):null;this._nativeAudioWorkletNode.onprocessorerror=e;const n=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==n&&n===e?t:n}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i,r,s,a,c,u,l,h,p,f,d,m,y,_,g,v)=>class extends d{constructor(e,n){super(e,n),this._nativeContext=e,this._audioWorklet=void 0===t?void 0:{addModule:(e,n)=>t(this,e,n)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new e(this)}createBiquadFilter(){return new i(this)}createBuffer(t,e,o){return new n({length:e,numberOfChannels:t,sampleRate:o})}createBufferSource(){return new o(this)}createChannelMerger(t=6){return new r(this,{numberOfInputs:t})}createChannelSplitter(t=6){return new s(this,{numberOfOutputs:t})}createConstantSource(){return new a(this)}createConvolver(){return new c(this)}createDelay(t=1){return new l(this,{maxDelayTime:t})}createDynamicsCompressor(){return new h(this)}createGain(){return new p(this)}createIIRFilter(t,e){return new f(this,{feedback:e,feedforward:t})}createOscillator(){return new m(this)}createPanner(){return new y(this)}createPeriodicWave(t,e,n={disableNormalization:!1}){return new _(this,{...n,imag:e,real:t})}createStereoPanner(){return new g(this)}createWaveShaper(){return new v(this)}decodeAudioData(t,e,n){return u(this._nativeContext,t).then(t=>("function"==typeof e&&e(t),t)).catch(t=>{throw"function"==typeof n&&n(t),t})}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(2);const i={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},r=(t,e,n,r,s,a,c)=>class extends t{constructor(t,r=i){const u=a(t),l={...i,...r},h=s(u,l),p=c(u);super(t,!1,h,p?n():null),this._Q=e(this,p,h.Q,o.b,o.a),this._detune=e(this,p,h.detune,1200*Math.log2(o.b),-1200*Math.log2(o.b)),this._frequency=e(this,p,h.frequency,t.sampleRate/2,0),this._gain=e(this,p,h.gain,40*Math.log10(o.b),-40*Math.log10(o.b)),this._nativeBiquadFilterNode=h}get Q(){return this._Q}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get type(){return this._nativeBiquadFilterNode.type}set type(t){this._nativeBiquadFilterNode.type=t}getFrequencyResponse(t,e,n){if(this._nativeBiquadFilterNode.getFrequencyResponse(t,e,n),t.length!==e.length||e.length!==n.length)throw r()}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;return{render(a,c,u){const l=s.get(c);return void 0!==l?Promise.resolve(l):(async(a,c,u)=>{let l=n(a);const h=Object(o.a)(l,c);if(!h){const t={Q:l.Q.value,channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,detune:l.detune.value,frequency:l.frequency.value,gain:l.gain.value,type:l.type};l=e(c,t)}return s.set(c,l),h?(await t(c,a.Q,l.Q,u),await t(c,a.detune,l.detune,u),await t(c,a.frequency,l.frequency,u),await t(c,a.gain,l.gain,u)):(await i(c,a.Q,l.Q,u),await i(c,a.detune,l.detune,u),await i(c,a.frequency,l.frequency,u),await i(c,a.gain,l.gain,u)),await r(a,c,l,u),l})(a,c,u)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,o)=>{const i=e.get(n);if(void 0!==i)return i;const r=t.get(n);if(void 0!==r)return r;try{const i=o();return i instanceof Promise?(t.set(n,i),i.catch(()=>!1).then(o=>(t.delete(n),e.set(n,o),o))):(e.set(n,i),i)}catch(t){return e.set(n,!1),!1}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},i=(t,e,n,i,r)=>class extends t{constructor(t,s=o){const a=i(t),c={...o,...s};super(t,!1,n(a,c),r(a)?e():null)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n)=>()=>{const i=new WeakMap;return{render(r,s,a){const c=i.get(s);return void 0!==c?Promise.resolve(c):(async(r,s,a)=>{let c=e(r);if(!Object(o.a)(c,s)){const e={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,numberOfInputs:c.numberOfInputs};c=t(s,e)}return i.set(s,c),await n(r,s,c,a),c})(r,s,a)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},i=(t,e,n,i,r)=>class extends t{constructor(t,s=o){const a=i(t),c=(t=>({...t,channelCount:t.numberOfOutputs}))({...o,...s});super(t,!1,n(a,c),r(a)?e():null)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n)=>()=>{const i=new WeakMap;return{render(r,s,a){const c=i.get(s);return void 0!==c?Promise.resolve(c):(async(r,s,a)=>{let c=e(r);if(!Object(o.a)(c,s)){const e={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,numberOfOutputs:c.numberOfOutputs};c=t(s,e)}return i.set(s,c),await n(r,s,c,a),c})(r,s,a)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n,o,i)=>t(n,e,o,i)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(25);const i=t=>(e,n,i=0,r=0)=>{const s=e[i];if(void 0===s)throw t();return Object(o.a)(n)?s.connect(n,0,r):s.connect(n,0)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n)=>{const o=t(e),i=e.createBuffer(1,2,e.sampleRate);return o.buffer=i,o.loop=!0,o.connect(n),o.start(),()=>{o.stop(),o.disconnect(n)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var o=n(2),i=n(16),r=n(21);const s={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},a=(t,e,n,a,c,u,l)=>class extends t{constructor(t,i=s){const r=c(t),l={...s,...i},h=a(r,l),p=u(r),f=p?n():null;super(t,!1,h,f),this._constantSourceNodeRenderer=f,this._nativeConstantSourceNode=h,this._offset=e(this,p,h.offset,o.b,o.a),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(t){const e="function"==typeof t?l(this,t):null;this._nativeConstantSourceNode.onended=e;const n=this._nativeConstantSourceNode.onended;this._onended=null!==n&&n===e?t:n}start(t=0){if(this._nativeConstantSourceNode.start(t),null!==this._constantSourceNodeRenderer)this._constantSourceNodeRenderer.start=t;else{Object(i.a)(this);const t=()=>{this._nativeConstantSourceNode.removeEventListener("ended",t),setTimeout(()=>Object(r.a)(this),1e3)};this._nativeConstantSourceNode.addEventListener("ended",t)}}stop(t=0){this._nativeConstantSourceNode.stop(t),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=t)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;let a=null,c=null;return{set start(t){a=t},set stop(t){c=t},render(u,l,h){const p=s.get(l);return void 0!==p?Promise.resolve(p):(async(u,l,h)=>{let p=n(u);const f=Object(o.a)(p,l);if(!f){const t={channelCount:p.channelCount,channelCountMode:p.channelCountMode,channelInterpretation:p.channelInterpretation,offset:p.offset.value};p=e(l,t),null!==a&&p.start(a),null!==c&&p.stop(c)}return s.set(l,p),f?await t(l,u.offset,p.offset,h):await i(l,u.offset,p.offset,h),await r(u,l,p,h),p})(u,l,h)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>(t[0]=e,t[0])},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},i=(t,e,n,i,r)=>class extends t{constructor(t,s=o){const a=i(t),c={...o,...s},u=n(a,c);super(t,!1,u,r(a)?e():null),this._isBufferNullified=!1,this._nativeConvolverNode=u}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(t){if(this._nativeConvolverNode.buffer=t,null===t&&null!==this._nativeConvolverNode.buffer){const t=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=t.createBuffer(1,1,t.sampleRate),this._isBufferNullified=!0}else this._isBufferNullified=!1}get normalize(){return this._nativeConvolverNode.normalize}set normalize(t){this._nativeConvolverNode.normalize=t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(12),i=n(3);const r=(t,e,n)=>()=>{const r=new WeakMap;return{render(s,a,c){const u=r.get(a);return void 0!==u?Promise.resolve(u):(async(s,a,c)=>{let u=e(s);if(!Object(i.a)(u,a)){const e={buffer:u.buffer,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,disableNormalization:!u.normalize};u=t(a,e)}return r.set(a,u),Object(o.a)(u)?await n(s,a,u.inputs[0],c):await n(s,a,u,c),u})(s,a,c)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,o,i)=>{if(null===e)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new e(n,o,i)}catch(e){if("IndexSizeError"===e.name||"SyntaxError"===e.name)throw t();throw e}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","DataCloneError")}catch(t){return t.code=25,t.name="DataCloneError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(22);const i=(t,e,n,i,r,s,a,c)=>(u,l)=>{const h=e.get(u);if(void 0===h)throw new Error("Missing the expected cycle count.");const p=s(u.context),f=c(p);if(h===l){if(e.delete(u),!f&&a(u)){const e=i(u),{outputs:s}=n(u);for(const n of s)if(Object(o.a)(n)){const o=i(n[0]);t(e,o,n[1],n[2])}else{const t=r(n[0]);e.connect(t,n[1])}}}else e.set(u,h-l)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},i=(t,e,n,i,r,s)=>class extends t{constructor(t,a=o){const c=r(t),u={...o,...a},l=i(c,u),h=s(c);super(t,!1,l,h?n(u.maxDelayTime):null),this._delayTime=e(this,h,l.delayTime,u.maxDelayTime,0)}get delayTime(){return this._delayTime}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>s=>{const a=new WeakMap;return{render(c,u,l){const h=a.get(u);return void 0!==h?Promise.resolve(h):(async(c,u,l)=>{let h=n(c);const p=Object(o.a)(h,u);if(!p){const t={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,delayTime:h.delayTime.value,maxDelayTime:s};h=e(u,t)}return a.set(u,h),p?await t(u,c.delayTime,h.delayTime,l):await i(u,c.delayTime,h.delayTime,l),await r(c,u,h,l),h})(c,u,l)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(25);const i=(t,e,n)=>{const o=e[n];if(void 0===o)throw t();return o},r=t=>(e,n,r,s=0)=>void 0===n?e.forEach(t=>t.disconnect()):"number"==typeof n?i(t,e,n).disconnect():Object(o.a)(n)?void 0===r?e.forEach(t=>t.disconnect(n)):void 0===s?i(t,e,r).disconnect(n,0):i(t,e,r).disconnect(n,0,s):void 0===r?e.forEach(t=>t.disconnect(n)):i(t,e,r).disconnect(n,0)},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},i=(t,e,n,i,r,s,a)=>class extends t{constructor(t,r=o){const c=s(t),u={...o,...r},l=i(c,u),h=a(c);super(t,!1,l,h?n():null),this._attack=e(this,h,l.attack,1,0),this._knee=e(this,h,l.knee,40,0),this._nativeDynamicsCompressorNode=l,this._ratio=e(this,h,l.ratio,20,1),this._release=e(this,h,l.release,1,0),this._threshold=e(this,h,l.threshold,0,-100)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(t){const e=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=t,t>2)throw this._nativeDynamicsCompressorNode.channelCount=e,r()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(t){const e=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=t,"max"===t)throw this._nativeDynamicsCompressorNode.channelCountMode=e,r()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;return{render(a,c,u){const l=s.get(c);return void 0!==l?Promise.resolve(l):(async(a,c,u)=>{let l=n(a);const h=Object(o.a)(l,c);if(!h){const t={attack:l.attack.value,channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,knee:l.knee.value,ratio:l.ratio.value,release:l.release.value,threshold:l.threshold.value};l=e(c,t)}return s.set(c,l),h?(await t(c,a.attack,l.attack,u),await t(c,a.knee,l.knee,u),await t(c,a.ratio,l.ratio,u),await t(c,a.release,l.release,u),await t(c,a.threshold,l.threshold,u)):(await i(c,a.attack,l.attack,u),await i(c,a.knee,l.knee,u),await i(c,a.ratio,l.ratio,u),await i(c,a.release,l.release,u),await i(c,a.threshold,l.threshold,u)),await r(a,c,l,u),l})(a,c,u)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>{try{return new DOMException("","EncodingError")}catch(t){return t.code=0,t.name="EncodingError",t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>new Promise((n,o)=>{if(null===t)return void o(new SyntaxError);const i=t.document.head;if(null===i)o(new SyntaxError);else{const r=t.document.createElement("script"),s=new Blob([e],{type:"application/javascript"}),a=URL.createObjectURL(s),c=t.onerror,u=()=>{t.onerror=c,URL.revokeObjectURL(a)};t.onerror=(t,e,n,i,r)=>e===a||e===location.href&&1===n&&1===i?(u(),o(r),!1):null!==c?c(t,e,n,i,r):void 0,r.onerror=()=>{u(),o(new SyntaxError)},r.onload=()=>{u(),n()},r.src=a,r.type="module",i.appendChild(r)}})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>class{constructor(t){this._nativeEventTarget=t,this._listeners=new WeakMap}addEventListener(e,n,o){if(null!==n){let i=this._listeners.get(n);void 0===i&&(i=t(this,n),"function"==typeof n&&this._listeners.set(n,i)),this._nativeEventTarget.addEventListener(e,i,o)}}dispatchEvent(t){return this._nativeEventTarget.dispatchEvent(t)}removeEventListener(t,e,n){const o=null===e?void 0:this._listeners.get(e);this._nativeEventTarget.removeEventListener(t,void 0===o?null:o,n)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n,o)=>{Object.defineProperties(t,{currentFrame:{configurable:!0,get:()=>Math.round(e*n)},currentTime:{configurable:!0,get:()=>e}});try{return o()}finally{null!==t&&(delete t.currentFrame,delete t.currentTime)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>async e=>{try{const t=await fetch(e);if(t.ok)return t.text()}catch(t){}throw t()}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(2);const i={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},r=(t,e,n,r,s,a)=>class extends t{constructor(t,c=i){const u=s(t),l={...i,...c},h=r(u,l),p=a(u);super(t,!1,h,p?n():null),this._gain=e(this,p,h.gain,o.b,o.a)}get gain(){return this._gain}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;return{render(a,c,u){const l=s.get(c);return void 0!==l?Promise.resolve(l):(async(a,c,u)=>{let l=n(a);const h=Object(o.a)(l,c);if(!h){const t={channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,gain:l.gain.value};l=e(c,t)}return s.set(c,l),h?await t(c,a.gain,l.gain,u):await i(c,a.gain,l.gain,u),await r(a,c,l,u),l})(a,c,u)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return n.renderer}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return n.renderer}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(0);const i=(t,e,n)=>i=>{if("closed"===i.state&&null!==e&&"webkitAudioContext"!==e.name){if(!t(i)){const t=o.f.get(i);if(void 0!==t)return t;const n=new e;return o.f.set(i,n),n}{const t=o.f.get(i);if(void 0!==t)return t;if(null!==n){const t=new n(1,1,44100);return o.f.set(i,t),t}}}return null}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(7);const i=t=>e=>{const n=t.get(e);if(void 0===n)throw Object(o.a)();return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(43),i=n(3);const r=(t,e,n,r,s,a)=>(c,u)=>{const l=new WeakMap;let h=null;const p=async(p,f,d)=>{let m=n(p),y=null;const _=Object(i.a)(m,f);if(void 0===f.createIIRFilter?y=t(f):_||(m=e(f,t=>t.createIIRFilter(u,c))),l.set(f,null===y?m:y),null!==y){if(null===h){if(null===r)throw new Error("Missing the native OfflineAudioContext constructor.");const t=new r(p.context.destination.channelCount,p.context.length,f.sampleRate);h=(async()=>{await s(p,t,t.destination,d);return((t,e,n,i)=>{const r=n.length,s=i.length,a=Math.min(r,s);if(1!==n[0]){for(let t=0;t<r;t+=1)i[t]/=n[0];for(let t=1;t<s;t+=1)n[t]/=n[0]}const c=new Float32Array(32),u=new Float32Array(32),l=e.createBuffer(t.numberOfChannels,t.length,t.sampleRate),h=t.numberOfChannels;for(let e=0;e<h;e+=1){const h=t.getChannelData(e),p=l.getChannelData(e);c.fill(0),u.fill(0),Object(o.a)(n,r,i,s,a,c,u,0,32,h,p)}return l})(await a(t),f,c,u)})()}const t=await h;return y.buffer=t,y.start(0),y}return await s(p,f,m,d),m};return{render(t,e,n){const o=l.get(e);return void 0!==o?Promise.resolve(o):p(t,e,n)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(22);const i=(t,e,n,i,r,s)=>a=>(c,u)=>{const l=t.get(c);if(void 0===l){if(!a&&s(c)){const t=i(c),{outputs:s}=n(c);for(const n of s)if(Object(o.a)(n)){const o=i(n[0]);e(t,o,n[1],n[2])}else{const e=r(n[0]);t.disconnect(e,n[1])}}t.set(c,u)}else t.set(c,l+u)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>{const o=t.get(n);return e(o)||e(n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>t.has(n)||e(n)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>t.has(n)||e(n)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>{const o=t.get(n);return e(o)||e(n)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>null!==t&&e instanceof t},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>null!==t&&"function"==typeof t.AudioNode&&e instanceof t.AudioNode},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>null!==t&&"function"==typeof t.AudioParam&&e instanceof t.AudioParam},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>t(n)||e(n)},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>null!==t&&e instanceof t},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>null!==t&&t.isSecureContext},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=async(t,e,n,o,i,r,s,a,c,u,l,h,p)=>{if(t(e,e)&&t(n,n)&&t(i,i)&&t(r,r)&&t(a,a)&&t(c,c)&&t(u,u)&&t(l,l)){return(await Promise.all([t(o,o),t(s,s),t(h,h),t(p,p)])).every(t=>t)}return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i)=>class extends t{constructor(t,r){const s=o(t);if(i(s))throw n();const a=e(s,r);super(t,!0,a,null),this._mediaElement=r.mediaElement,this._nativeMediaElementAudioSourceNode=a}get mediaElement(){return void 0===this._nativeMediaElementAudioSourceNode.mediaElement?this._mediaElement:this._nativeMediaElementAudioSourceNode.mediaElement}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i)=>class extends t{constructor(t,r){const s=o(t);if(i(s))throw n();const a=e(s,r);super(t,!0,a,null),this._nativeMediaStreamAudioSourceNode=a}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i)=>class extends t{constructor(t,r){const s=o(t);if(i(s))throw n();super(t,!0,e(s,r),null)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(40);const i=(t,e,n,i,r)=>class extends i{constructor(t={}){if(null===r)throw new Error("Missing the native AudioContext constructor.");const i=new r(t);if(null===i)throw n();if(!Object(o.a)(t.latencyHint))throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==t.sampleRate&&i.sampleRate!==t.sampleRate)throw e();super(i,2);const{latencyHint:s}=t,{sampleRate:a}=i;if(this._baseLatency="number"==typeof i.baseLatency?i.baseLatency:"balanced"===s?512/a:"interactive"===s||void 0===s?256/a:"playback"===s?1024/a:128*Math.max(2,Math.min(128,Math.round(s*a/128)))/a,this._nativeAudioContext=i,this._state=null,"running"===i.state){this._state="suspended";const t=()=>{"suspended"===this._state&&(this._state=null),i.removeEventListener("statechange",t)};i.addEventListener("statechange",t)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw t()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close())}resume(){return"suspended"===this._state?new Promise((t,e)=>{const n=()=>{this._nativeAudioContext.removeEventListener("statechange",n),"running"===this._nativeAudioContext.state?t():this.resume().then(t,e)};this._nativeAudioContext.addEventListener("statechange",n)}):this._nativeAudioContext.resume().catch(e=>{if(void 0===e||15===e.code)throw t();throw e})}suspend(){return this._nativeAudioContext.suspend().catch(e=>{if(void 0===e)throw t();throw e})}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(0);const i=(t,e,n,i)=>class extends n{constructor(n,i){super(n),this._nativeContext=n,o.g.set(this,n);const r=n.sampleRate;Object.defineProperty(n,"sampleRate",{get:()=>r}),this._destination=new t(this,i),this._listener=e(this,n),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(t){const e="function"==typeof t?i(this,t):null;this._nativeContext.onstatechange=e;const n=this._nativeContext.onstatechange;this._onstatechange=null!==n&&n===e?t:n}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(13);const i={numberOfChannels:1},r=(t,e,n,r,s)=>class extends r{constructor(e){const{length:r,numberOfChannels:s,sampleRate:a}={...i,...e},c=n(s,r,a);t(o.a,()=>Object(o.a)(c))||c.addEventListener("statechange",(()=>{let t=0;const e=n=>{"running"===this._state&&(t>0?(c.removeEventListener("statechange",e),n.stopImmediatePropagation(),this._waitForThePromiseToSettle(n)):t+=1)};return e})()),super(c,s),this._length=r,this._nativeOfflineAudioContext=c,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(e()):(this._state="running",s(this.destination,this._nativeOfflineAudioContext).then(t=>(this._state=null,t)).catch(t=>{throw this._state=null,t}))}_waitForThePromiseToSettle(t){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(t):setTimeout(()=>this._waitForThePromiseToSettle(t))}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,o,i)=>{const r=new Set;var s,a;return n.connect=(s=n.connect,(i,a=0,c=0)=>{const u=0===r.size;if(e(i))return s.call(n,i,a,c),t(r,[i,a,c],t=>t[0]===i&&t[1]===a&&t[2]===c,!0),u&&o(),i;s.call(n,i,a),t(r,[i,a],t=>t[0]===i&&t[1]===a,!0),u&&o()}),n.disconnect=(a=n.disconnect,(t,o,s)=>{const c=r.size>0;if(void 0===t)a.apply(n),r.clear();else if("number"==typeof t){a.call(n,t);for(const e of r)e[1]===t&&r.delete(e)}else{e(t)?a.call(n,t,o,s):a.call(n,t,o);for(const e of r)e[0]!==t||void 0!==o&&e[1]!==o||void 0!==s&&e[2]!==s||r.delete(e)}const u=0===r.size;c&&u&&i()}),n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>null===t?null:t.hasOwnProperty("AudioBuffer")?t.AudioBuffer:null},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>null===t?null:t.hasOwnProperty("AudioContext")?t.AudioContext:t.hasOwnProperty("webkitAudioContext")?t.webkitAudioContext:null},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,o,i)=>{const r=n.destination;if(r.channelCount!==o)try{r.channelCount=o}catch(t){}i&&"explicit"!==r.channelCountMode&&(r.channelCountMode="explicit"),0===r.maxChannelCount&&Object.defineProperty(r,"maxChannelCount",{value:o});const s=t(n,{channelCount:o,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,gain:1});return e(s,"channelCount",t=>()=>t.call(s),t=>e=>{t.call(s,e);try{r.channelCount=e}catch(t){if(e>r.maxChannelCount)throw t}}),e(s,"channelCountMode",t=>()=>t.call(s),t=>e=>{t.call(s,e),r.channelCountMode=e}),e(s,"channelInterpretation",t=>()=>t.call(s),t=>e=>{t.call(s,e),r.channelInterpretation=e}),Object.defineProperty(s,"maxChannelCount",{get:()=>r.maxChannelCount}),s.connect(r),s}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n)=>{const o=t(e);return n(null!==o?o:e)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>null===t?null:t.hasOwnProperty("AudioWorkletNode")?t.AudioWorkletNode:null},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var o=n(5),i=n(4),r=n(1);const s=t=>(e,n)=>{const s=t(e,t=>t.createBiquadFilter());return Object(r.a)(s,n),Object(o.a)(s,n,"Q"),Object(o.a)(s,n,"detune"),Object(o.a)(s,n,"frequency"),Object(o.a)(s,n,"gain"),Object(i.a)(s,n,"type"),s}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(1);const i=(t,e)=>(n,i)=>{const r=t(n,t=>t.createChannelMerger(i.numberOfInputs));Object(o.a)(r,i),1!==r.channelCount&&"explicit"!==r.channelCountMode&&e(n,r);try{r.channelCount=void 0===i.numberOfInputs?6:i.numberOfInputs,e(n,r)}catch(t){}return r}},function(t,e,n){"use strict";n.d(e,"a",(function(){return a}));var o=n(5),i=n(1),r=n(30),s=n(31);const a=(t,e,n,a,c)=>(u,l)=>{if(void 0===u.createConstantSource)return n(u,l);const h=e(u,t=>t.createConstantSource());return Object(i.a)(h,l),Object(o.a)(h,l,"offset"),t(a,()=>a(u))||Object(r.a)(h),t(c,()=>c(u))||Object(s.a)(h),h}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(11);const i=(t,e,n)=>(i,{offset:r,...s})=>{const a=i.createBuffer(1,2,i.sampleRate),c=t(i),u=e(i,{...s,gain:r}),l=a.getChannelData(0);l[0]=1,l[1]=1,c.buffer=a,c.loop=!0;const h={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(t){u.channelCount=t},get channelCountMode(){return u.channelCountMode},set channelCountMode(t){u.channelCountMode=t},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(t){u.channelInterpretation=t},get context(){return u.context},get inputs(){return[]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get offset(){return u.gain},get onended(){return c.onended},set onended(t){c.onended=t},addEventListener:(...t)=>c.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>c.dispatchEvent(t[0]),removeEventListener:(...t)=>c.removeEventListener(t[0],t[1],t[2]),start(t=0){c.start.call(c,t)},stop(t=0){c.stop.call(c,t)}};return n(Object(o.a)(h,u),()=>c.connect(u),()=>c.disconnect(u))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(4),i=n(1);const r=(t,e,n,r)=>(s,a)=>{const c=t(s,t=>t.createConvolver());try{c.channelCount=1}catch(t){return e(s,a)}if(Object(i.a)(c,a),a.disableNormalization===c.normalize&&(c.normalize=!a.disableNormalization),Object(o.a)(c,a,"buffer"),a.channelCount>2)throw n();if(r(c,"channelCount",t=>()=>t.call(c),t=>e=>{if(e>2)throw n();return t.call(c,e)}),"max"===a.channelCountMode)throw n();return r(c,"channelCountMode",t=>()=>t.call(c),t=>e=>{if("max"===e)throw n();return t.call(c,e)}),c}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(1),i=n(11);const r=(t,e,n)=>(r,{buffer:s,channelCount:a,channelCountMode:c,channelInterpretation:u,disableNormalization:l})=>{const h=t(r,t=>t.createConvolver());Object(o.a)(h,{channelCount:Math.max(a,2),channelCountMode:"max"===c?c:"clamped-max",channelInterpretation:u});const p=e(r,{channelCount:a,channelCountMode:c,channelInterpretation:u,gain:1}),f={get buffer(){return h.buffer},set buffer(t){h.buffer=t},get bufferSize(){},get channelCount(){return p.channelCount},set channelCount(t){t>2&&(h.channelCount=t),p.channelCount=t},get channelCountMode(){return p.channelCountMode},set channelCountMode(t){"max"===t&&(h.channelCountMode=t),p.channelCountMode=t},get channelInterpretation(){return h.channelInterpretation},set channelInterpretation(t){h.channelInterpretation=t,p.channelInterpretation=t},get context(){return h.context},get inputs(){return[h]},get numberOfInputs(){return h.numberOfInputs},get numberOfOutputs(){return h.numberOfOutputs},get normalize(){return h.normalize},set normalize(t){h.normalize=t},addEventListener:(...t)=>h.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>h.dispatchEvent(t[0]),removeEventListener:(...t)=>h.removeEventListener(t[0],t[1],t[2])};l===f.normalize&&(f.normalize=!l),s!==f.buffer&&(f.buffer=s);return n(Object(i.a)(f,p),()=>h.connect(p),()=>h.disconnect(p))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(5),i=n(1);const r=t=>(e,n)=>{const r=t(e,t=>t.createDelay(n.maxDelayTime));return Object(i.a)(r,n),Object(o.a)(r,n,"delayTime"),r}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(5),i=n(1);const r=(t,e)=>(n,r)=>{const s=t(n,t=>t.createDynamicsCompressor());if(Object(i.a)(s,r),r.channelCount>2)throw e();if("max"===r.channelCountMode)throw e();return Object(o.a)(s,r,"attack"),Object(o.a)(s,r,"knee"),Object(o.a)(s,r,"ratio"),Object(o.a)(s,r,"release"),Object(o.a)(s,r,"threshold"),s}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(5),i=n(1);const r=t=>(e,n)=>{const r=t(e,t=>t.createGain());return Object(i.a)(r,n),Object(o.a)(r,n,"gain"),r}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(1);const i=(t,e)=>(n,i,r)=>{if(void 0===n.createIIRFilter)return e(n,i,r);const s=t(n,t=>t.createIIRFilter(r.feedforward,r.feedback));return Object(o.a)(s,r),s}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var o=n(44),i=n(43),r=n(11);function s(t,e){const n=e[0]*e[0]+e[1]*e[1];return[(t[0]*e[0]+t[1]*e[1])/n,(t[1]*e[0]-t[0]*e[1])/n]}function a(t,e){let n=[0,0];for(let r=t.length-1;r>=0;r-=1)i=e,n=[(o=n)[0]*i[0]-o[1]*i[1],o[0]*i[1]+o[1]*i[0]],n[0]+=t[r];var o,i;return n}const c=(t,e,n,c)=>(u,l,{channelCount:h,channelCountMode:p,channelInterpretation:f,feedback:d,feedforward:m})=>{const y=Object(o.a)(l,u.sampleRate),_=d.length,g=m.length,v=Math.min(_,g);if(0===d.length||d.length>20)throw c();if(0===d[0])throw e();if(0===m.length||m.length>20)throw c();if(0===m[0])throw e();if(1!==d[0]){for(let t=0;t<g;t+=1)m[t]/=d[0];for(let t=1;t<_;t+=1)d[t]/=d[0]}const b=n(u,y,h,h);b.channelCount=h,b.channelCountMode=p,b.channelInterpretation=f;const x=[],w=[],O=[];for(let t=0;t<h;t+=1){x.push(0);const t=new Float32Array(32),e=new Float32Array(32);t.fill(0),e.fill(0),w.push(t),O.push(e)}b.onaudioprocess=t=>{const e=t.inputBuffer,n=t.outputBuffer,o=e.numberOfChannels;for(let t=0;t<o;t+=1){const o=e.getChannelData(t),r=n.getChannelData(t);x[t]=Object(i.a)(d,_,m,g,v,w[t],O[t],x[t],32,o,r)}};const T=u.sampleRate/2,S={get bufferSize(){return y},get channelCount(){return b.channelCount},set channelCount(t){b.channelCount=t},get channelCountMode(){return b.channelCountMode},set channelCountMode(t){b.channelCountMode=t},get channelInterpretation(){return b.channelInterpretation},set channelInterpretation(t){b.channelInterpretation=t},get context(){return b.context},get inputs(){return[b]},get numberOfInputs(){return b.numberOfInputs},get numberOfOutputs(){return b.numberOfOutputs},addEventListener:(...t)=>b.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>b.dispatchEvent(t[0]),getFrequencyResponse(e,n,o){if(e.length!==n.length||n.length!==o.length)throw t();const i=e.length;for(let t=0;t<i;t+=1){const i=-Math.PI*(e[t]/T),r=[Math.cos(i),Math.sin(i)],c=s(a(m,r),a(d,r));n[t]=Math.sqrt(c[0]*c[0]+c[1]*c[1]),o[t]=Math.atan2(c[1],c[0])}},removeEventListener:(...t)=>b.removeEventListener(t[0],t[1],t[2])};return Object(r.a)(S,b)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n)=>t(e,t=>t.createMediaElementSource(n.mediaElement))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,{mediaStream:n})=>{const o=n.getAudioTracks(),i=t(e,t=>{const e=o.sort((t,e)=>t.id<e.id?-1:t.id>e.id?1:0).slice(0,1);return t.createMediaStreamSource(new MediaStream(e))});return Object.defineProperty(i,"mediaStream",{value:n}),i}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,{mediaStreamTrack:o})=>"function"==typeof n.createMediaStreamTrackSource?e(n,t=>t.createMediaStreamTrackSource(o)):e(n,e=>{const n=new MediaStream([o]),i=e.createMediaStreamSource(n);if("audio"!==o.kind)throw t();return i})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>null===t?null:t.hasOwnProperty("OfflineAudioContext")?t.OfflineAudioContext:t.hasOwnProperty("webkitOfflineAudioContext")?t.webkitOfflineAudioContext:null},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var o=n(5),i=n(4),r=n(1),s=n(30),a=n(31);const c=(t,e,n,c,u,l)=>(h,p)=>{const f=e(h,t=>t.createOscillator());return Object(r.a)(f,p),Object(o.a)(f,p,"detune"),Object(o.a)(f,p,"frequency"),void 0!==p.periodicWave?f.setPeriodicWave(p.periodicWave):Object(i.a)(f,p,"type"),t(n,()=>n(h))||Object(s.a)(f),t(c,()=>c(h))||l(f,h),t(u,()=>u(h))||Object(a.a)(f),f}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var o=n(5),i=n(4),r=n(1);const s=(t,e)=>(n,s)=>{const a=t(n,t=>t.createPanner());return void 0===a.orientationX?e(n,s):(Object(r.a)(a,s),Object(o.a)(a,s,"orientationX"),Object(o.a)(a,s,"orientationY"),Object(o.a)(a,s,"orientationZ"),Object(o.a)(a,s,"positionX"),Object(o.a)(a,s,"positionY"),Object(o.a)(a,s,"positionZ"),Object(i.a)(a,s,"coneInnerAngle"),Object(i.a)(a,s,"coneOuterAngle"),Object(i.a)(a,s,"coneOuterGain"),Object(i.a)(a,s,"distanceModel"),Object(i.a)(a,s,"maxDistance"),Object(i.a)(a,s,"panningModel"),Object(i.a)(a,s,"refDistance"),Object(i.a)(a,s,"rolloffFactor"),a)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(1),i=n(11);const r=(t,e,n,r,s,a,c,u,l,h)=>(p,{coneInnerAngle:f,coneOuterAngle:d,coneOuterGain:m,distanceModel:y,maxDistance:_,orientationX:g,orientationY:v,orientationZ:b,panningModel:x,positionX:w,positionY:O,positionZ:T,refDistance:S,rolloffFactor:C,...k})=>{const A=n(p,t=>t.createPanner());if(k.channelCount>2)throw u();if("max"===k.channelCountMode)throw u();Object(o.a)(A,k);const j={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},D=r(p,{...j,channelInterpretation:"speakers",numberOfInputs:6}),E=s(p,{...k,gain:1}),M=s(p,{...j,gain:1}),P=s(p,{...j,gain:0}),R=s(p,{...j,gain:0}),q=s(p,{...j,gain:0}),I=s(p,{...j,gain:0}),F=s(p,{...j,gain:0}),N=a(p,256,6,0),V=c(p,{...j,curve:new Float32Array([1,1]),oversample:"none"});let L=[1,0,0],z=[0,0,0];N.onaudioprocess=({inputBuffer:t})=>{const e=[t.getChannelData(0)[0],t.getChannelData(1)[0],t.getChannelData(2)[0]];e.some((t,e)=>t!==L[e])&&(A.setOrientation(...e),L=e);const n=[t.getChannelData(6)[0],t.getChannelData(7)[0],t.getChannelData(8)[0]];n.some((t,e)=>t!==z[e])&&(A.setPosition(...n),z=n)},Object.defineProperty(P.gain,"defaultValue",{get:()=>0}),Object.defineProperty(R.gain,"defaultValue",{get:()=>0}),Object.defineProperty(q.gain,"defaultValue",{get:()=>0}),Object.defineProperty(I.gain,"defaultValue",{get:()=>0}),Object.defineProperty(F.gain,"defaultValue",{get:()=>0});const B={get bufferSize(){},get channelCount(){return A.channelCount},set channelCount(t){if(t>2)throw u();E.channelCount=t,A.channelCount=t},get channelCountMode(){return A.channelCountMode},set channelCountMode(t){if("max"===t)throw u();E.channelCountMode=t,A.channelCountMode=t},get channelInterpretation(){return A.channelInterpretation},set channelInterpretation(t){E.channelInterpretation=t,A.channelInterpretation=t},get coneInnerAngle(){return A.coneInnerAngle},set coneInnerAngle(t){A.coneInnerAngle=t},get coneOuterAngle(){return A.coneOuterAngle},set coneOuterAngle(t){A.coneOuterAngle=t},get coneOuterGain(){return A.coneOuterGain},set coneOuterGain(t){if(t<0||t>1)throw e();A.coneOuterGain=t},get context(){return A.context},get distanceModel(){return A.distanceModel},set distanceModel(t){A.distanceModel=t},get inputs(){return[E]},get maxDistance(){return A.maxDistance},set maxDistance(t){if(t<0)throw new RangeError;A.maxDistance=t},get numberOfInputs(){return A.numberOfInputs},get numberOfOutputs(){return A.numberOfOutputs},get orientationX(){return M.gain},get orientationY(){return P.gain},get orientationZ(){return R.gain},get panningModel(){return A.panningModel},set panningModel(t){if(A.panningModel=t,A.panningModel!==t&&"HRTF"===t)throw u()},get positionX(){return q.gain},get positionY(){return I.gain},get positionZ(){return F.gain},get refDistance(){return A.refDistance},set refDistance(t){if(t<0)throw new RangeError;A.refDistance=t},get rolloffFactor(){return A.rolloffFactor},set rolloffFactor(t){if(t<0)throw new RangeError;A.rolloffFactor=t},addEventListener:(...t)=>E.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>E.dispatchEvent(t[0]),removeEventListener:(...t)=>E.removeEventListener(t[0],t[1],t[2])};f!==B.coneInnerAngle&&(B.coneInnerAngle=f),d!==B.coneOuterAngle&&(B.coneOuterAngle=d),m!==B.coneOuterGain&&(B.coneOuterGain=m),y!==B.distanceModel&&(B.distanceModel=y),_!==B.maxDistance&&(B.maxDistance=_),g!==B.orientationX.value&&(B.orientationX.value=g),v!==B.orientationY.value&&(B.orientationY.value=v),b!==B.orientationZ.value&&(B.orientationZ.value=b),x!==B.panningModel&&(B.panningModel=x),w!==B.positionX.value&&(B.positionX.value=w),O!==B.positionY.value&&(B.positionY.value=O),T!==B.positionZ.value&&(B.positionZ.value=T),S!==B.refDistance&&(B.refDistance=S),C!==B.rolloffFactor&&(B.rolloffFactor=C);return h(Object(i.a)(B,A),()=>{E.connect(A),t(E,V,0,0),V.connect(M).connect(D),V.connect(P).connect(D),V.connect(R).connect(D),V.connect(q).connect(D),V.connect(I).connect(D),V.connect(F).connect(D),D.connect(N)},()=>{E.disconnect(A),l(E,V,0,0),V.disconnect(M),M.disconnect(D),V.disconnect(P),P.disconnect(D),V.disconnect(R),R.disconnect(D),V.disconnect(q),q.disconnect(D),V.disconnect(I),I.disconnect(D),V.disconnect(F),F.disconnect(D),D.disconnect(N)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,{disableNormalization:n,imag:o,real:i})=>{const r=t(e),s=new Float32Array(o),a=new Float32Array(i);return null!==r?r.createPeriodicWave(a,s,{disableNormalization:n}):e.createPeriodicWave(a,s,{disableNormalization:n})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n,o,i)=>t(e,t=>t.createScriptProcessor(n,o,i))},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(5),i=n(1);const r=(t,e,n)=>(r,s)=>t(r,t=>{const a=s.channelCountMode;if("clamped-max"===a)throw n();if(void 0===r.createStereoPanner)return e(r,s);const c=t.createStereoPanner();return Object(i.a)(c,s),Object(o.a)(c,s,"pan"),Object.defineProperty(c,"channelCountMode",{get:()=>a,set:t=>{if(t!==a)throw n()}}),c})},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(11);const i=(t,e,n,i,r,s)=>{const a=new Float32Array([1,1]),c=Math.PI/2,u={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},l={...u,oversample:"none"},h=(t,o,s,h,p)=>{if(1===o)return((t,e,o,r)=>{const s=new Float32Array(16385),h=new Float32Array(16385);for(let t=0;t<16385;t+=1){const e=t/16384*c;s[t]=Math.cos(e),h[t]=Math.sin(e)}const p=n(t,{...u,gain:0}),f=i(t,{...l,curve:s}),d=i(t,{...l,curve:a}),m=n(t,{...u,gain:0}),y=i(t,{...l,curve:h});return{connectGraph(){e.connect(p),e.connect(d.inputs[0]),e.connect(m),d.connect(o),o.connect(f.inputs[0]),o.connect(y.inputs[0]),f.connect(p.gain),y.connect(m.gain),p.connect(r,0,0),m.connect(r,0,1)},disconnectGraph(){e.disconnect(p),e.disconnect(d.inputs[0]),e.disconnect(m),d.disconnect(o),o.disconnect(f.inputs[0]),o.disconnect(y.inputs[0]),f.disconnect(p.gain),y.disconnect(m.gain),p.disconnect(r,0,0),m.disconnect(r,0,1)}}})(t,s,h,p);if(2===o)return((t,o,r,s)=>{const h=new Float32Array(16385),p=new Float32Array(16385),f=new Float32Array(16385),d=new Float32Array(16385),m=Math.floor(8192.5);for(let t=0;t<16385;t+=1)if(t>m){const e=(t-m)/(16384-m)*c;h[t]=Math.cos(e),p[t]=Math.sin(e),f[t]=0,d[t]=1}else{const e=t/(16384-m)*c;h[t]=1,p[t]=0,f[t]=Math.cos(e),d[t]=Math.sin(e)}const y=e(t,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),_=n(t,{...u,gain:0}),g=i(t,{...l,curve:h}),v=n(t,{...u,gain:0}),b=i(t,{...l,curve:p}),x=i(t,{...l,curve:a}),w=n(t,{...u,gain:0}),O=i(t,{...l,curve:f}),T=n(t,{...u,gain:0}),S=i(t,{...l,curve:d});return{connectGraph(){o.connect(y),o.connect(x.inputs[0]),y.connect(_,1),y.connect(v,1),y.connect(w,1),y.connect(T,1),x.connect(r),r.connect(g.inputs[0]),r.connect(b.inputs[0]),r.connect(O.inputs[0]),r.connect(S.inputs[0]),g.connect(_.gain),b.connect(v.gain),O.connect(w.gain),S.connect(T.gain),_.connect(s,0,0),w.connect(s,0,0),v.connect(s,0,1),T.connect(s,0,1)},disconnectGraph(){o.disconnect(y),o.disconnect(x.inputs[0]),y.disconnect(_,1),y.disconnect(v,1),y.disconnect(w,1),y.disconnect(T,1),x.disconnect(r),r.disconnect(g.inputs[0]),r.disconnect(b.inputs[0]),r.disconnect(O.inputs[0]),r.disconnect(S.inputs[0]),g.disconnect(_.gain),b.disconnect(v.gain),O.disconnect(w.gain),S.disconnect(T.gain),_.disconnect(s,0,0),w.disconnect(s,0,0),v.disconnect(s,0,1),T.disconnect(s,0,1)}}})(t,s,h,p);throw r()};return(e,{channelCount:i,channelCountMode:a,pan:c,...u})=>{if("max"===a)throw r();const l=t(e,{...u,channelCount:1,channelCountMode:a,numberOfInputs:2}),p=n(e,{...u,channelCount:i,channelCountMode:a,gain:1}),f=n(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:c});let{connectGraph:d,disconnectGraph:m}=h(e,i,p,f,l);Object.defineProperty(f.gain,"defaultValue",{get:()=>0});const y={get bufferSize(){},get channelCount(){return p.channelCount},set channelCount(t){p.channelCount!==t&&(_&&m(),({connectGraph:d,disconnectGraph:m}=h(e,t,p,f,l)),_&&d()),p.channelCount=t},get channelCountMode(){return p.channelCountMode},set channelCountMode(t){if("clamped-max"===t||"max"===t)throw r();p.channelCountMode=t},get channelInterpretation(){return p.channelInterpretation},set channelInterpretation(t){p.channelInterpretation=t},get context(){return p.context},get inputs(){return[p]},get numberOfInputs(){return p.numberOfInputs},get numberOfOutputs(){return p.numberOfOutputs},get pan(){return f.gain},addEventListener:(...t)=>p.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>p.dispatchEvent(t[0]),removeEventListener:(...t)=>p.removeEventListener(t[0],t[1],t[2])};let _=!1;return s(Object(o.a)(y,l),()=>{d(),_=!0},()=>{m(),_=!1})}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(4),i=n(1);const r=(t,e,n,r,s,a,c)=>(u,l)=>{const h=n(u,t=>t.createWaveShaper());try{return h.curve=new Float32Array([1]),r(u,l)}catch(t){}Object(i.a)(h,l);const p=l.curve;if(null!==p&&p.length<2)throw e();Object(o.a)(h,l,"curve"),Object(o.a)(h,l,"oversample");let f=null,d=!1;c(h,"curve",t=>()=>t.call(h),e=>n=>(e.call(h,n),d&&(s(n)&&null===f?f=t(u,h):s(n)||null===f||(f(),f=null)),n));return a(h,()=>{d=!0,s(h.curve)&&(f=t(u,h))},()=>{d=!1,null!==f&&(f(),f=null)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(1),i=n(11);const r=(t,e,n,r,s,a)=>(c,{curve:u,oversample:l,...h})=>{const p=n(c,t=>t.createWaveShaper()),f=n(c,t=>t.createWaveShaper());Object(o.a)(p,h),Object(o.a)(f,h);const d=r(c,{...h,gain:1}),m=r(c,{...h,gain:-1}),y=r(c,{...h,gain:1}),_=r(c,{...h,gain:-1});let g=null,v=!1,b=null;const x={get bufferSize(){},get channelCount(){return p.channelCount},set channelCount(t){d.channelCount=t,m.channelCount=t,p.channelCount=t,y.channelCount=t,f.channelCount=t,_.channelCount=t},get channelCountMode(){return p.channelCountMode},set channelCountMode(t){d.channelCountMode=t,m.channelCountMode=t,p.channelCountMode=t,y.channelCountMode=t,f.channelCountMode=t,_.channelCountMode=t},get channelInterpretation(){return p.channelInterpretation},set channelInterpretation(t){d.channelInterpretation=t,m.channelInterpretation=t,p.channelInterpretation=t,y.channelInterpretation=t,f.channelInterpretation=t,_.channelInterpretation=t},get context(){return p.context},get curve(){return b},set curve(n){if(null!==u&&u.length<2)throw e();if(null===n)p.curve=n,f.curve=n;else{const t=n.length,e=new Float32Array(t+2-t%2),o=new Float32Array(t+2-t%2);e[0]=n[0],o[0]=-n[t-1];const i=Math.ceil((t+1)/2),r=(t+1)/2-1;for(let s=1;s<i;s+=1){const a=s/i*r,c=Math.floor(a),u=Math.ceil(a);e[s]=c===u?n[c]:(1-(a-c))*n[c]+(1-(u-a))*n[u],o[s]=c===u?-n[t-1-c]:-(1-(a-c))*n[t-1-c]-(1-(u-a))*n[t-1-u]}e[i]=t%2==1?n[i-1]:(n[i-2]+n[i-1])/2,p.curve=e,f.curve=o}b=n,v&&(s(b)&&null===g?g=t(c,d):null!==g&&(g(),g=null))},get inputs(){return[d]},get numberOfInputs(){return p.numberOfInputs},get numberOfOutputs(){return p.numberOfOutputs},get oversample(){return p.oversample},set oversample(t){p.oversample=t,f.oversample=t},addEventListener:(...t)=>d.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>d.dispatchEvent(t[0]),removeEventListener:(...t)=>d.removeEventListener(t[0],t[1],t[2])};u!==x.curve&&(x.curve=u),l!==x.oversample&&(x.oversample=l);return a(Object(i.a)(x,y),()=>{d.connect(p).connect(y),d.connect(m).connect(f).connect(_).connect(y),v=!0,s(b)&&(g=t(c,d))},()=>{d.disconnect(p),p.disconnect(y),d.disconnect(m),m.disconnect(f),f.disconnect(_),_.disconnect(y),v=!1,null!==g&&(g(),g=null)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(13);const i={numberOfChannels:1},r=(t,e,n,r,s)=>class extends t{constructor(t,n,s){let a;if("number"==typeof t&&void 0!==n&&void 0!==s)a={length:n,numberOfChannels:t,sampleRate:s};else{if("object"!=typeof t)throw new Error("The given parameters are not valid.");a=t}const{length:c,numberOfChannels:u,sampleRate:l}={...i,...a},h=r(u,c,l);e(o.a,()=>Object(o.a)(h))||h.addEventListener("statechange",(()=>{let t=0;const e=n=>{"running"===this._state&&(t>0?(h.removeEventListener("statechange",e),n.stopImmediatePropagation(),this._waitForThePromiseToSettle(n)):t+=1)};return e})()),super(h,u),this._length=c,this._nativeOfflineAudioContext=h,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(n()):(this._state="running",s(this.destination,this._nativeOfflineAudioContext).then(t=>(this._state=null,t)).catch(t=>{throw this._state=null,t}))}_waitForThePromiseToSettle(t){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(t):setTimeout(()=>this._waitForThePromiseToSettle(t))}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var o=n(16),i=n(21);const r={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,type:"sine"},s=(t,e,n,s,a,c,u,l)=>class extends t{constructor(t,n=r){const o=c(t),i={...r,...n},l=s(o,i),h=u(o),p=h?a():null,f=t.sampleRate/2;super(t,!1,l,p),this._detune=e(this,h,l.detune,153600,-153600),this._frequency=e(this,h,l.frequency,f,-f),this._nativeOscillatorNode=l,this._onended=null,this._oscillatorNodeRenderer=p,null!==this._oscillatorNodeRenderer&&void 0!==i.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=i.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(t){const e="function"==typeof t?l(this,t):null;this._nativeOscillatorNode.onended=e;const n=this._nativeOscillatorNode.onended;this._onended=null!==n&&n===e?t:n}get type(){return this._nativeOscillatorNode.type}set type(t){if(this._nativeOscillatorNode.type=t,"custom"===t)throw n();null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(t){this._nativeOscillatorNode.setPeriodicWave(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=t)}start(t=0){if(this._nativeOscillatorNode.start(t),null!==this._oscillatorNodeRenderer)this._oscillatorNodeRenderer.start=t;else{Object(o.a)(this);const t=()=>{this._nativeOscillatorNode.removeEventListener("ended",t),setTimeout(()=>Object(i.a)(this),1e3)};this._nativeOscillatorNode.addEventListener("ended",t)}}stop(t=0){this._nativeOscillatorNode.stop(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=t)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(3);const i=(t,e,n,i,r)=>()=>{const s=new WeakMap;let a=null,c=null,u=null;return{set periodicWave(t){a=t},set start(t){c=t},set stop(t){u=t},render(l,h,p){const f=s.get(h);return void 0!==f?Promise.resolve(f):(async(l,h,p)=>{let f=n(l);const d=Object(o.a)(f,h);if(!d){const t={channelCount:f.channelCount,channelCountMode:f.channelCountMode,channelInterpretation:f.channelInterpretation,detune:f.detune.value,frequency:f.frequency.value,periodicWave:null===a?void 0:a,type:f.type};f=e(h,t),null!==c&&f.start(c),null!==u&&f.stop(u)}return s.set(h,f),d?(await t(h,l.detune,f.detune,p),await t(h,l.frequency,f.frequency,p)):(await i(h,l.detune,f.detune,p),await i(h,l.frequency,f.frequency,p)),await r(l,h,f,p),f})(l,h,p)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(2);const i={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},r=(t,e,n,r,s,a)=>class extends t{constructor(t,c=i){const u=s(t),l={...i,...c},h=n(u,l),p=a(u);super(t,!1,h,p?r():null),this._nativePannerNode=h,this._orientationX=e(this,p,h.orientationX,o.b,o.a),this._orientationY=e(this,p,h.orientationY,o.b,o.a),this._orientationZ=e(this,p,h.orientationZ,o.b,o.a),this._positionX=e(this,p,h.positionX,o.b,o.a),this._positionY=e(this,p,h.positionY,o.b,o.a),this._positionZ=e(this,p,h.positionZ,o.b,o.a)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(t){this._nativePannerNode.coneInnerAngle=t}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(t){this._nativePannerNode.coneOuterAngle=t}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(t){this._nativePannerNode.coneOuterGain=t}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(t){this._nativePannerNode.distanceModel=t}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(t){this._nativePannerNode.maxDistance=t}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(t){this._nativePannerNode.panningModel=t}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(t){this._nativePannerNode.refDistance=t}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(t){this._nativePannerNode.rolloffFactor=t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(12),i=n(3);const r=(t,e,n,r,s)=>()=>{const a=new WeakMap;return{render(c,u,l){const h=a.get(u);return void 0!==h?Promise.resolve(h):(async(c,u,l)=>{let h=n(c);const p=Object(i.a)(h,u);if(!p){const t={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,coneInnerAngle:h.coneInnerAngle,coneOuterAngle:h.coneOuterAngle,coneOuterGain:h.coneOuterGain,distanceModel:h.distanceModel,maxDistance:h.maxDistance,orientationX:h.orientationX.value,orientationY:h.orientationY.value,orientationZ:h.orientationZ.value,panningModel:h.panningModel,positionX:h.positionX.value,positionY:h.positionY.value,positionZ:h.positionZ.value,refDistance:h.refDistance,rolloffFactor:h.rolloffFactor};h=e(u,t)}return a.set(u,h),p?(await t(u,c.orientationX,h.orientationX,l),await t(u,c.orientationY,h.orientationY,l),await t(u,c.orientationZ,h.orientationZ,l),await t(u,c.positionX,h.positionX,l),await t(u,c.positionY,h.positionY,l),await t(u,c.positionZ,h.positionZ,l)):(await r(u,c.orientationX,h.orientationX,l),await r(u,c.orientationY,h.orientationY,l),await r(u,c.orientationZ,h.orientationZ,l),await r(u,c.positionX,h.positionX,l),await r(u,c.positionY,h.positionY,l),await r(u,c.positionZ,h.positionZ,l)),Object(o.a)(h)?await s(c,u,h.inputs[0],l):await s(c,u,h,l),h})(c,u,l)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={disableNormalization:!1},i=(t,e,n)=>class i{constructor(i,r){const s=e(i),a={...o,...r},c=t(s,a);return n.add(c),c}static[Symbol.hasInstance](t){return null!==t&&"object"==typeof t&&Object.getPrototypeOf(t)===i.prototype||n.has(t)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>(n,o,i,r)=>(t(o).replay(i),e(o,n,i,r))},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n)=>async(o,i,r,s)=>{const a=t(o),c=[...s,o];await Promise.all(a.activeInputs.map((t,s)=>Array.from(t).filter(([t])=>!c.includes(t)).map(async([t,a])=>{const u=e(t),l=await u.render(t,i,c);n(t)||o===o.context.destination&&n(o)||l.connect(r,a,s)})).reduce((t,e)=>[...t,...e],[]))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n)=>async(o,i,r,s)=>{const a=e(o);await Promise.all(Array.from(a.activeInputs).map(async([e,o])=>{const a=t(e),c=await a.render(e,i,s);n(e)||c.connect(r,o)}))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(13);const i=(t,e,n,i)=>r=>t(o.a,()=>Object(o.a)(r))?Promise.resolve(t(i,i)).then(t=>{if(!t){const t=n(r,512,0,1);r.oncomplete=()=>{t.onaudioprocess=null,t.disconnect()},t.onaudioprocess=()=>r.currentTime,t.connect(r.destination)}return r.startRendering()}):new Promise(t=>{const n=e(r,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});r.oncomplete=e=>{n.disconnect(),t(e.renderedBuffer)},n.connect(r.destination),r.startRendering()})},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(29);const i=(t,e,n,i,r,s,a)=>(c,u)=>n(c).render(c,u,[]).then(()=>i(u)).then(n=>("function"!=typeof n.copyFromChannel?(s(n),Object(o.a)(n)):e(r,()=>r(n))||a(n),t.add(n),n))},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},i=(t,e,n,i,r,s)=>class extends t{constructor(t,a=o){const c=r(t),u={...o,...a},l=n(c,u),h=s(c);super(t,!1,l,h?i():null),this._pan=e(this,h,l.pan,1,-1)}get pan(){return this._pan}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(12),i=n(3);const r=(t,e,n,r,s)=>()=>{const a=new WeakMap;return{render(c,u,l){const h=a.get(u);return void 0!==h?Promise.resolve(h):(async(c,u,l)=>{let h=n(c);const p=Object(i.a)(h,u);if(!p){const t={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,pan:h.pan.value};h=e(u,t)}return a.set(u,h),p?await t(u,c.pan,h.pan,l):await r(u,c.pan,h.pan,l),Object(o.a)(h)?await s(c,u,h.inputs[0],l):await s(c,u,h,l),h})(c,u,l)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;try{new t({length:1,sampleRate:44100})}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createBuffer(1,1,44100);if(void 0===e.copyToChannel)return!0;const n=new Float32Array(2);try{e.copyFromChannel(n,0,0)}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e,t=>t.createBufferSource());n.start();try{n.start()}catch(t){return!0}return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100),n=e.createBuffer(1,1,e.sampleRate),o=e.createBufferSource();return n.getChannelData(0)[0]=1,o.buffer=n,o.start(0,0,0),o.connect(e.destination),new Promise(t=>{e.oncomplete=({renderedBuffer:e})=>{t(0===e.getChannelData(0)[0])},e.startRendering()})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e,t=>t.createBufferSource()),o=e.createBuffer(1,1,44100);n.buffer=o;try{n.start(0,1)}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e,t=>t.createBufferSource());n.start();try{n.stop()}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;if(void 0!==t.prototype&&void 0!==t.prototype.close)return!0;const e=new t,n=void 0!==e.close;try{e.close()}catch(t){}return n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100);return new Promise(t=>{let n=!0;const o=o=>{n&&(n=!1,e.startRendering(),t(o instanceof TypeError))};let i;try{i=e.decodeAudioData(null,()=>{},o)}catch(t){o(t)}void 0!==i&&i.catch(o)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;let e;try{e=new t({latencyHint:"balanced"})}catch(t){return!1}return e.close(),!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;const e=new t(1,1,44100).createGain(),n=e.connect(e)===e;return e.disconnect(e),n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e,t=>t.createOscillator());try{n.start(-1)}catch(t){return t instanceof RangeError}return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=e.createBuffer(1,1,44100),o=t(e,t=>t.createBufferSource());o.buffer=n,o.start(),o.stop();try{return o.stop(),!0}catch(t){return!1}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{const n=t(e,t=>t.createOscillator());try{n.stop(-1)}catch(t){return t instanceof RangeError}return!1}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>async()=>{if(null===t)return!0;if(null===e)return!1;const n=new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),o=new e(1,128,3200),i=URL.createObjectURL(n);let r=!1;try{await o.audioWorklet.addModule(i);const e=o.createGain(),n=new t(o,"a",{numberOfOutputs:0});n.port.onmessage=()=>r=!0,e.connect(n),await o.startRendering()}catch(t){}finally{URL.revokeObjectURL(i)}return r}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>()=>{if(null===e)return!1;const n=new e(1,1,44100);if(void 0===n.createConstantSource)return!0;return t(n,t=>t.createConstantSource()).offset.maxValue!==Number.POSITIVE_INFINITY}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;const e=new t(1,1,44100),n=e.createConvolver();n.buffer=e.createBuffer(1,1,e.sampleRate);try{n.buffer=e.createBuffer(1,1,e.sampleRate)}catch(t){return!1}return!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>null!==t&&t.hasOwnProperty("isSecureContext")},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return!1;const e=new t;try{return e.createMediaStreamSource(new MediaStream),!1}catch(t){return!0}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>()=>{if(null===e)return Promise.resolve(!1);const n=new e(1,1,44100),o=t(n,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise(t=>{n.oncomplete=()=>{o.disconnect(),t(0!==n.currentTime)},n.startRendering()})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>()=>{if(null===t)return Promise.resolve(!1);const e=new t(1,1,44100);if(void 0===e.createStereoPanner)return Promise.resolve(!0);if(void 0===e.createConstantSource)return Promise.resolve(!0);const n=e.createConstantSource(),o=e.createStereoPanner();return n.channelCount=1,n.offset.value=1,o.channelCount=1,n.start(),n.connect(o).connect(e.destination),e.startRendering().then(t=>1!==t.getChannelData(0)[0])}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const o={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},i=(t,e,n,i,r,s)=>class extends t{constructor(t,e=o){const a=r(t),c={...o,...e},u=n(a,c);super(t,!0,u,s(a)?i():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=u}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(t){if(null===t)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(t.length<2)throw e();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=t}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(t){this._nativeWaveShaperNode.oversample=t}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(12),i=n(3);const r=(t,e,n)=>()=>{const r=new WeakMap;return{render(s,a,c){const u=r.get(a);return void 0!==u?Promise.resolve(u):(async(s,a,c)=>{let u=e(s);if(!Object(i.a)(u,a)){const e={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,curve:u.curve,oversample:u.oversample};u=t(a,e)}return r.set(a,u),Object(o.a)(u)?await n(s,a,u.inputs[0],c):await n(s,a,u,c),u})(s,a,c)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>"undefined"==typeof window?null:window},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e)=>n=>{n.copyFromChannel=(o,i,r=0)=>{const s=t(r),a=t(i);if(a>=n.numberOfChannels)throw e();const c=n.length,u=n.getChannelData(a),l=o.length;for(let t=s<0?-s:0;t+s<c&&t<l;t+=1)o[t]=u[t+s]},n.copyToChannel=(o,i,r=0)=>{const s=t(r),a=t(i);if(a>=n.numberOfChannels)throw e();const c=n.length,u=n.getChannelData(a),l=o.length;for(let t=s<0?-s:0;t+s<c&&t<l;t+=1)u[t+s]=o[t]}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>e=>{var n,o;e.copyFromChannel=(n=e.copyFromChannel,(o,i,r=0)=>{const s=t(r),a=t(i);if(s<e.length)return n.call(e,o,a,s)}),e.copyToChannel=(o=e.copyToChannel,(n,i,r=0)=>{const s=t(r),a=t(i);if(s<e.length)return o.call(e,n,a,s)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>(e,n)=>{const o=n.createBuffer(1,1,n.sampleRate);null===e.buffer&&(e.buffer=o),t(e,"buffer",t=>()=>{const n=t.call(e);return n===o?null:n},t=>n=>t.call(e,null===n?o:n))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(11);const i=t=>(e,n)=>{const i=t(n,t=>t.createGain());e.connect(i);const r=(s=e.disconnect,()=>{s.call(e,i),e.removeEventListener("ended",r)});var s;e.addEventListener("ended",r),Object(o.a)(e,i),e.stop=(t=>{let n=!1;return(o=0)=>{if(n)try{t.call(e,o)}catch(t){i.gain.setValueAtTime(0,o)}else t.call(e,o),n=!0}})(e.stop)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n)=>(o,i)=>{i.channelCount=1,i.channelCountMode="explicit",Object.defineProperty(i,"channelCount",{get:()=>1,set:()=>{throw t()}}),Object.defineProperty(i,"channelCountMode",{get:()=>"explicit",set:()=>{throw t()}});const r=e(o,t=>t.createBufferSource());n(i,()=>{const t=i.numberOfInputs;for(let e=0;e<t;e+=1)r.connect(i,0,e)},()=>r.disconnect(i))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>new Promise(t=>{const e=new ArrayBuffer(0),{port1:n,port2:o}=new MessageChannel;n.onmessage=({data:e})=>t(null!==e),o.postMessage(e,[e])})},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=t=>{var e;t.start=(e=t.start,(n=0,o=0,i)=>{const r=t.buffer,s=null===r?o:Math.min(r.duration,o);null!==r&&s>r.duration-.5/t.context.sampleRate?e.call(t,n,0,0):e.call(t,n,s,i)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return N}));var o=n(0),i=n(24),r=n(22);const s=t=>"port"in t;var a=n(33),c=n(20);const u=(t,e)=>{if(!Object(c.a)(t).delete(e))throw new Error("Missing the expected event listener.")};var l=n(34),h=n(8),p=n(26),f=n(6),d=n(27),m=n(10),y=n(15),_=n(23),g=n(19);const v=t=>!o.a.has(t),b=(t,e)=>{const n=Array.from(t).filter(e);if(n.length>1)throw Error("More than one element was found.");if(0===n.length)throw Error("No element was found.");const[o]=n;return t.delete(o),o};var x=n(16),w=n(21);const O=(t,e)=>{!s(t)&&e.every(t=>0===t.size)&&Object(w.a)(t)},T=t=>new Promise(e=>{const n=t.createScriptProcessor(256,1,1),o=t.createGain(),i=t.createBuffer(1,2,44100),r=i.getChannelData(0);r[0]=1,r[1]=1;const s=t.createBufferSource();s.buffer=i,s.loop=!0,s.connect(n).connect(t.destination),s.connect(o),s.disconnect(o),n.onaudioprocess=o=>{const i=o.inputBuffer.getChannelData(0);Array.prototype.some.call(i,t=>1===t)?e(!0):e(!1),s.stop(),n.onaudioprocess=null,s.disconnect(n),n.disconnect(t.destination)},s.start()}),S=(t,e)=>{const n=new Map;for(const e of t)for(const t of e){const e=n.get(t);n.set(t,void 0===e?1:e+1)}n.forEach((t,n)=>e(n,t))};var C=n(25);const k=(t,e,[n,o,i],r)=>{Object(y.a)(t[o],[e,n,i],t=>t[0]===e&&t[1]===n,r)},A=(t,e,[n,o],i)=>{Object(y.a)(t,[e,n,o],t=>t[0]===e&&t[1]===n,i)},j=(t,e,[n,o,i],r)=>{const s=t.get(n);void 0===s?t.set(n,new Set([[o,e,i]])):Object(y.a)(s,[o,e,i],t=>t[0]===o&&t[1]===e,r)},D=(t,[e,n,o],i)=>{const r=t.get(e);void 0===r?t.set(e,new Set([[n,o]])):Object(y.a)(r,[n,o],t=>t[0]===n,i)},E=(t,e,n,o)=>{const i=Object(m.a)(t,e),r=b(i,t=>t[0]===n&&t[1]===o);return 0===i.size&&t.delete(e),r},M=(t,e,n)=>{const o=Object(m.a)(t,e),i=b(o,t=>t[0]===n);return 0===o.size&&t.delete(e),i},P=(t,e,n,o)=>{const{activeInputs:i,passiveInputs:r}=Object(h.a)(e),{outputs:s}=Object(h.a)(t),u=Object(c.a)(t),p=s=>{const c=Object(f.a)(e),u=Object(f.a)(t);if(s){const s=E(r,t,n,o);k(i,t,s,!1),Object(g.a)(t)||Object(a.a)(u,c,n,o),v(e)&&Object(x.a)(e)}else{const s=((t,e,n,o)=>b(t[o],t=>t[0]===e&&t[1]===n))(i,t,n,o);j(r,o,s,!1),Object(g.a)(t)||Object(l.a)(u,c,n,o),Object(_.a)(e)&&O(e,i)}};return!!Object(y.a)(s,[e,n,o],t=>t[0]===e&&t[1]===n&&t[2]===o,!0)&&(u.add(p),Object(_.a)(t)?k(i,t,[n,o,p],!0):j(r,o,[t,n,p],!0),!0)},R=(t,e,n)=>{const{activeInputs:o,passiveInputs:i}=Object(p.a)(e),{outputs:r}=Object(h.a)(t),s=Object(c.a)(t),a=r=>{const s=Object(f.a)(t),a=Object(d.a)(e);if(r){const e=M(i,t,n);A(o,t,e,!1),Object(g.a)(t)||s.connect(a,n)}else{const e=((t,e,n)=>b(t,t=>t[0]===e&&t[1]===n))(o,t,n);D(i,e,!1),Object(g.a)(t)||s.disconnect(a,n)}};return!!Object(y.a)(r,[e,n],t=>t[0]===e&&t[1]===n,!0)&&(s.add(a),Object(_.a)(t)?A(o,t,[n,a],!0):D(i,[t,n,a],!0),!0)},q=(t,e,n)=>{for(const o of t)if(o[0]===e&&o[1]===n)return t.delete(o),o;return null},I=(t,e,n,o)=>{const[i,r]=((t,e,n,o)=>{const{activeInputs:i,passiveInputs:r}=Object(h.a)(e),s=q(i[o],t,n);if(null===s){return[E(r,t,n,o)[2],!1]}return[s[2],!0]})(t,e,n,o);if(null!==i&&(u(t,i),r&&!Object(g.a)(t)&&Object(l.a)(Object(f.a)(t),Object(f.a)(e),n,o)),Object(_.a)(e)){const{activeInputs:t}=Object(h.a)(e);O(e,t)}},F=(t,e,n)=>{const[o,i]=((t,e,n)=>{const{activeInputs:o,passiveInputs:i}=Object(p.a)(e),r=q(o,t,n);if(null===r){return[M(i,t,n)[1],!1]}return[r[2],!0]})(t,e,n);null!==o&&(u(t,o),i&&!Object(g.a)(t)&&Object(f.a)(t).disconnect(Object(d.a)(e),n))},N=(t,e,n,c,u,l,m,_,g,b,w,O,j,D)=>class extends b{constructor(e,i,r,s){super(r),this._context=e,this._nativeAudioNode=r;const a=w(e);D(a)||!0===n(T,()=>T(a))||(t=>{const e=new Map;var n,o;t.connect=(n=t.connect.bind(t),(t,o=0,i=0)=>{const r=Object(C.a)(t)?n(t,o,i):n(t,o),s=e.get(t);return void 0===s?e.set(t,[{input:i,output:o}]):s.every(t=>t.input!==i||t.output!==o)&&s.push({input:i,output:o}),r}),t.disconnect=(o=t.disconnect,(n,i,r)=>{if(o.apply(t),void 0===n)e.clear();else if("number"==typeof n)for(const[t,o]of e){const i=o.filter(t=>t.output!==n);0===i.length?e.delete(t):e.set(t,i)}else if(e.has(n))if(void 0===i)e.delete(n);else{const t=e.get(n);if(void 0!==t){const o=t.filter(t=>t.output!==i&&(t.input!==r||void 0===r));0===o.length?e.delete(n):e.set(n,o)}}for(const[n,o]of e)o.forEach(e=>{Object(C.a)(n)?t.connect(n,e.output,e.input):t.connect(n,e.output)})})})(r),o.c.set(this,r),o.i.set(this,new Set),i&&Object(x.a)(this),t(this,s,r)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(t){this._nativeAudioNode.channelCount=t}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(t){this._nativeAudioNode.channelCountMode=t}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(t){this._nativeAudioNode.channelInterpretation=t}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(t,n=0,o=0){const r=w(this._context),u=D(r);if(O(t)||j(t))throw l();if(Object(i.a)(t)){const i=Object(f.a)(t);try{const c=Object(a.a)(this._nativeAudioNode,i,n,o);if(u||v(this)?this._nativeAudioNode.disconnect(...c):v(t)&&Object(x.a)(t),s(t)){const t=e.get(i);if(void 0===t){const t=r.createGain();t.connect(c[0],0,c[2]),e.set(i,new Map([[o,t]]))}else if(void 0===t.get(o)){const e=r.createGain();e.connect(c[0],0,c[2]),t.set(o,e)}}}catch(t){if(12===t.code)throw l();throw t}if(u?((t,e,n,o)=>{const{outputs:i}=Object(h.a)(t);if(Object(y.a)(i,[e,n,o],t=>t[0]===e&&t[1]===n&&t[2]===o,!0)){const{activeInputs:i}=Object(h.a)(e);return k(i,t,[n,o,null],!0),!0}return!1})(this,t,n,o):P(this,t,n,o)){const e=g([this],t);S(e,c(u))}return t}const _=Object(d.a)(t);if("playbackRate"===_.name)throw m();try{this._nativeAudioNode.connect(_,n),(u||v(this))&&this._nativeAudioNode.disconnect(_,n)}catch(t){if(12===t.code)throw l();throw t}if(u?((t,e,n)=>{const{outputs:o}=Object(h.a)(t);if(Object(y.a)(o,[e,n],t=>t[0]===e&&t[1]===n,!0)){const{activeInputs:o}=Object(p.a)(e);return A(o,t,[n,null],!0),!0}return!1})(this,t,n):R(this,t,n)){const e=g([this],t);S(e,c(u))}}disconnect(t,e,n){let o;if(void 0===t)o=(t=>{const e=Object(h.a)(t),n=[];for(const o of e.outputs)Object(r.a)(o)?I(t,...o):F(t,...o),n.push(o[0]);return e.outputs.clear(),n})(this);else if("number"==typeof t){if(t<0||t>=this.numberOfOutputs)throw u();o=((t,e)=>{const n=Object(h.a)(t),o=[];for(const i of n.outputs)i[1]===e&&(Object(r.a)(i)?I(t,...i):F(t,...i),o.push(i[0]),n.outputs.delete(i));return o})(this,t)}else{if(void 0!==e&&(e<0||e>=this.numberOfOutputs))throw u();if(Object(i.a)(t)&&void 0!==n&&(n<0||n>=t.numberOfInputs))throw u();if(o=((t,e,n,o)=>{const i=Object(h.a)(t);return Array.from(i.outputs).filter(t=>!(t[0]!==e||void 0!==n&&t[1]!==n||void 0!==o&&t[2]!==o)).map(e=>(Object(r.a)(e)?I(t,...e):F(t,...e),i.outputs.delete(e),e[0]))})(this,t,e,n),0===o.length)throw l()}for(const t of o){const e=g([this],t);S(e,_)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return h}));var o=n(2),i=n(44),r=n(35),s=n(42),a=n(0);const c=async(t,e)=>new t(await(t=>new Promise((e,n)=>{const{port1:o,port2:i}=new MessageChannel;o.onmessage=({data:t})=>{o.close(),i.close(),e(t)},o.onmessageerror=({data:t})=>{o.close(),i.close(),n(t)},i.postMessage(t)}))(e));var u=n(36),l=n(41);const h=(t,e,n,h,p,f,d,m,y,_,g,v,b)=>(x,w,O,T)=>{if(0===T.numberOfInputs&&0===T.numberOfOutputs)throw _();if(void 0!==T.outputChannelCount){if(T.outputChannelCount.some(t=>t<1))throw _();if(T.outputChannelCount.length!==T.numberOfOutputs)throw n()}if("explicit"!==T.channelCountMode)throw _();const S=T.channelCount*T.numberOfInputs,C=T.outputChannelCount.reduce((t,e)=>t+e,0),k=void 0===O.parameterDescriptors?0:O.parameterDescriptors.length;if(S+k>6||C>6)throw _();const A=new MessageChannel,j=[],D=[];for(let t=0;t<T.numberOfInputs;t+=1)j.push(m(x,{channelCount:T.channelCount,channelCountMode:T.channelCountMode,channelInterpretation:T.channelInterpretation,gain:1})),D.push(f(x,{channelCount:T.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:T.channelCount}));const E=[];if(void 0!==O.parameterDescriptors)for(const{defaultValue:t,maxValue:e,minValue:n,name:i}of O.parameterDescriptors){const r=d(x,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==T.parameterData[i]?T.parameterData[i]:void 0===t?0:t});Object.defineProperties(r.offset,{defaultValue:{get:()=>void 0===t?0:t},maxValue:{get:()=>void 0===e?o.b:e},minValue:{get:()=>void 0===n?o.a:n}}),E.push(r)}const M=p(x,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,S+k)}),P=Object(i.a)(w,x.sampleRate),R=y(x,P,S+k,Math.max(1,C)),q=f(x,{channelCount:Math.max(1,C),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,C)}),I=[];for(let t=0;t<T.numberOfOutputs;t+=1)I.push(p(x,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:T.outputChannelCount[t]}));for(let t=0;t<T.numberOfInputs;t+=1){j[t].connect(D[t]);for(let e=0;e<T.channelCount;e+=1)D[t].connect(M,e,t*T.channelCount+e)}const F=new l.a(void 0===O.parameterDescriptors?[]:O.parameterDescriptors.map(({name:t},e)=>{const n=E[e];return n.connect(M,0,S+e),n.start(0),[t,n.offset]}));M.connect(R);let N=T.channelInterpretation,V=null;const L=0===T.numberOfOutputs?[R]:I,z={get bufferSize(){return P},get channelCount(){return T.channelCount},set channelCount(t){throw h()},get channelCountMode(){return T.channelCountMode},set channelCountMode(t){throw h()},get channelInterpretation(){return N},set channelInterpretation(t){for(const e of j)e.channelInterpretation=t;N=t},get context(){return R.context},get inputs(){return j},get numberOfInputs(){return T.numberOfInputs},get numberOfOutputs(){return T.numberOfOutputs},get onprocessorerror(){return V},set onprocessorerror(t){"function"==typeof V&&z.removeEventListener("processorerror",V),V="function"==typeof t?t:null,"function"==typeof V&&z.addEventListener("processorerror",V)},get parameters(){return F},get port(){return A.port2},addEventListener:(...t)=>R.addEventListener(t[0],t[1],t[2]),connect:e.bind(null,L),disconnect:g.bind(null,L),dispatchEvent:(...t)=>R.dispatchEvent(t[0]),removeEventListener:(...t)=>R.removeEventListener(t[0],t[1],t[2])},B=new Map;var W,U;A.port1.addEventListener=(W=A.port1.addEventListener,(...t)=>{if("message"===t[0]){const e="function"==typeof t[1]?t[1]:"object"==typeof t[1]&&null!==t[1]&&"function"==typeof t[1].handleEvent?t[1].handleEvent:null;if(null!==e){const n=B.get(t[1]);void 0!==n?t[1]=n:(t[1]=t=>{v(x.currentTime,x.sampleRate,()=>e(t))},B.set(e,t[1]))}}return W.call(A.port1,t[0],t[1],t[2])}),A.port1.removeEventListener=(U=A.port1.removeEventListener,(...t)=>{if("message"===t[0]){const e=B.get(t[1]);void 0!==e&&(B.delete(t[1]),t[1]=e)}return U.call(A.port1,t[0],t[1],t[2])});let G=null;Object.defineProperty(A.port1,"onmessage",{get:()=>G,set:t=>{"function"==typeof G&&A.port1.removeEventListener("message",G),G="function"==typeof t?t:null,"function"==typeof G&&(A.port1.addEventListener("message",G),A.port1.start())}}),O.prototype.port=A.port1;let Y=null;((t,e,n,o)=>{let i=a.k.get(t);void 0===i&&(i=new WeakMap,a.k.set(t,i));const r=c(n,o);return i.set(e,r),r})(x,z,O,T).then(t=>Y=t);const X=Object(u.a)(T.numberOfInputs,T.channelCount),Z=Object(u.a)(T.numberOfOutputs,T.outputChannelCount),Q=void 0===O.parameterDescriptors?[]:O.parameterDescriptors.reduce((t,{name:e})=>({...t,[e]:new Float32Array(128)}),{});let H=!0;const $=()=>{T.numberOfOutputs>0&&R.disconnect(q);for(let t=0,e=0;t<T.numberOfOutputs;t+=1){const n=I[t];for(let o=0;o<T.outputChannelCount[t];o+=1)q.disconnect(n,e+o,o);e+=T.outputChannelCount[t]}};R.onaudioprocess=({inputBuffer:e,outputBuffer:n})=>{if(null!==Y)for(let o=0;o<P;o+=128){for(let t=0;t<T.numberOfInputs;t+=1)for(let n=0;n<T.channelCount;n+=1)Object(r.a)(e,X[t],n,n,o);void 0!==O.parameterDescriptors&&O.parameterDescriptors.forEach(({name:t},n)=>{Object(r.a)(e,Q,t,S+n,o)});for(let t=0;t<T.numberOfInputs;t+=1)for(let e=0;e<T.outputChannelCount[t];e+=1)0===Z[t][e].byteLength&&(Z[t][e]=new Float32Array(128));try{const e=X.map((e,n)=>{const o=t.get(z);return void 0===o||void 0===o.get(n)?[new Float32Array(0)]:e}),i=v(x.currentTime+o/x.sampleRate,x.sampleRate,()=>Y.process(e,Z,Q));H=i;for(let t=0,e=0;t<T.numberOfOutputs;t+=1){for(let i=0;i<T.outputChannelCount[t];i+=1)Object(s.a)(n,Z[t],i,e+i,o);e+=T.outputChannelCount[t]}}catch(t){H=!1,z.dispatchEvent(new ErrorEvent("processorerror",{error:t}))}if(!H){for(let t=0;t<T.numberOfInputs;t+=1){j[t].disconnect(D[t]);for(let e=0;e<T.channelCount;e+=1)D[o].disconnect(M,e,t*T.channelCount+e)}if(void 0!==O.parameterDescriptors){const t=O.parameterDescriptors.length;for(let e=0;e<t;e+=1){const t=E[e];t.disconnect(M,0,S+e),t.stop()}}M.disconnect(R),R.onaudioprocess=null,J&&$();break}}};let J=!1;return b(z,()=>{if(H){T.numberOfOutputs>0&&R.connect(q);for(let t=0,e=0;t<T.numberOfOutputs;t+=1){const n=I[t];for(let o=0;o<T.outputChannelCount[t];o+=1)q.connect(n,e+o,o);e+=T.outputChannelCount[t]}}J=!0},()=>{H&&$(),J=!1})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var o=n(0);const i={construct:()=>i},r=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,s=(t,e)=>{const n=[];let o=t.replace(/^[\s]+/,""),i=o.match(r);for(;null!==i;){const t=i[1].slice(1,-1),s=i[0].replace(/([\s]+)?;?$/,"").replace(t,new URL(t,e).toString());n.push(s),o=o.slice(i[0].length).replace(/^[\s]+/,""),i=o.match(r)}return[n.join(";"),o]},a=t=>{if(void 0!==t&&!Array.isArray(t))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},c=t=>{if(!(t=>{try{new new Proxy(t,i)}catch(t){return!1}return!0})(t))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===t.prototype||"object"!=typeof t.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},u=(t,e,n,i,r,u,l,h,p)=>(f,d,m={credentials:"omit"})=>{const y=l(f),_=new URL(d,location.href).toString();if(void 0!==y.audioWorklet)return r(d).then(t=>{const[e,n]=s(t,_),o=new Blob([`${e};(registerProcessor=>{${n}\n})((n,p)=>registerProcessor(n,class extends p{constructor(o){const{hasNoOutput,...q}=o.parameterData;if(hasNoOutput===1){super({...o,numberOfOutputs:0,outputChannelCount:[],parameterData:q});this._h=true}else{super(o);this._h=false}}process(i,o,p){return super.process(i,(this._h)?[]:o,p)}}))`],{type:"application/javascript; charset=utf-8"}),i=URL.createObjectURL(o),r=u(y);return(null!==r?r:y).audioWorklet.addModule(i,m).then(()=>URL.revokeObjectURL(i)).catch(t=>{throw URL.revokeObjectURL(i),t})});const g=p.get(f);if(void 0!==g&&g.has(d))return Promise.resolve();const v=h.get(f);if(void 0!==v){const t=v.get(d);if(void 0!==t)return t}const b=r(d).then(t=>{const[e,o]=s(t,_);return n(`${e};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${o}\n})})(window,'_AWGS')`)}).then(()=>{const t=window._AWGS.pop();if(void 0===t)throw new SyntaxError;i(y.currentTime,y.sampleRate,()=>t(class{},void 0,(t,n)=>{if(""===t.trim())throw e();const i=o.j.get(y);if(void 0!==i){if(i.has(t))throw e();c(n),a(n.parameterDescriptors),i.set(t,n)}else c(n),a(n.parameterDescriptors),o.j.set(y,new Map([[t,n]]))},y.sampleRate,void 0,void 0))}).catch(e=>{if("SyntaxError"===e.name)throw t();throw e});return void 0===v?h.set(f,new Map([[d,b]])):v.set(d,b),b.then(()=>{const t=p.get(f);void 0===t?p.set(f,new Set([d])):t.add(d)}).catch(()=>{}).then(()=>{const t=h.get(f);void 0!==t&&t.delete(d)}),b}},function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var o=n(4),i=n(1);const r=t=>"function"==typeof t.getFloatTimeDomainData,s=(t,e,n)=>(s,a)=>{const c=n(s,t=>t.createAnalyser());if(Object(i.a)(c,a),!(a.maxDecibels>a.minDecibels))throw e();return Object(o.a)(c,a,"fftSize"),Object(o.a)(c,a,"maxDecibels"),Object(o.a)(c,a,"minDecibels"),Object(o.a)(c,a,"smoothingTimeConstant"),t(r,()=>r(c))||(t=>{t.getFloatTimeDomainData=e=>{const n=new Uint8Array(e.length);t.getByteTimeDomainData(n);const o=Math.max(n.length,t.fftSize);for(let t=0;t<o;t+=1)e[t]=.0078125*(n[t]-128);return e}})(c),c}},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var o=n(5),i=n(4),r=n(1),s=n(7);var a=n(30),c=n(31);const u=(t,e,n,u,l,h,p,f,d,m,y,_)=>(g,v={})=>{const b=e(g,t=>t.createBufferSource());return Object(r.a)(b,v),Object(o.a)(b,v,"playbackRate"),Object(i.a)(b,v,"buffer"),Object(i.a)(b,v,"loop"),Object(i.a)(b,v,"loopEnd"),Object(i.a)(b,v,"loopStart"),t(n,()=>n(g))||(t=>{t.start=(e=>{let n=!1;return(o=0,i=0,r)=>{if(n)throw Object(s.a)();e.call(t,o,i,r),n=!0}})(t.start)})(b),t(u,u)||((t,e)=>{let n=Number.POSITIVE_INFINITY,o=Number.POSITIVE_INFINITY;var i,r;t.start=(i=t.start,r=t.stop,(s=0,a=0,c=Number.POSITIVE_INFINITY)=>{if(i.call(t,s,a),c>=0&&c<Number.POSITIVE_INFINITY){const i=Math.max(s,e.currentTime),a=c/t.playbackRate.value;n=i+a,r.call(t,Math.min(n,o))}}),t.stop=(i=>(r=0)=>{o=Math.max(r,e.currentTime),i.call(t,Math.min(n,o))})(t.stop)})(b,g),t(l,()=>l(g))||m(b),t(h,()=>h(g))||y(b,g),t(p,()=>p(g))||Object(a.a)(b),t(f,()=>f(g))||_(b,g),t(d,()=>d(g))||Object(c.a)(b),b}},function(t,e,n){"use strict";n.d(e,"a",(function(){return p}));var o=n(35),i=n(42),r=n(36),s=n(8),a=n(0),c=n(6),u=n(10);var l=n(3);const h=async(t,e,n,l,h,p)=>{const f=null===e?128*Math.ceil(t.context.length/128):e.length,d=l.channelCount*l.numberOfInputs,m=l.outputChannelCount.reduce((t,e)=>t+e,0),y=0===m?null:n.createBuffer(m,f,n.sampleRate);if(void 0===h)throw new Error("Missing the processor constructor.");const _=Object(s.a)(t),g=await((t,e)=>{const n=Object(u.a)(a.k,t),o=Object(c.a)(e);return Object(u.a)(n,o)})(n,t),v=Object(r.a)(l.numberOfInputs,l.channelCount),b=Object(r.a)(l.numberOfOutputs,l.outputChannelCount),x=Array.from(t.parameters.keys()).reduce((t,e)=>({...t,[e]:new Float32Array(128)}),{});for(let r=0;r<f;r+=128){if(l.numberOfInputs>0&&null!==e)for(let t=0;t<l.numberOfInputs;t+=1)for(let n=0;n<l.channelCount;n+=1)Object(o.a)(e,v[t],n,n,r);void 0!==h.parameterDescriptors&&null!==e&&h.parameterDescriptors.forEach(({name:t},n)=>{Object(o.a)(e,x,t,d+n,r)});for(let t=0;t<l.numberOfInputs;t+=1)for(let e=0;e<l.outputChannelCount[t];e+=1)0===b[t][e].byteLength&&(b[t][e]=new Float32Array(128));try{const t=v.map((t,e)=>0===_.activeInputs[e].size?[new Float32Array(0)]:t),e=p(r/n.sampleRate,n.sampleRate,()=>g.process(t,b,x));if(null!==y)for(let t=0,e=0;t<l.numberOfOutputs;t+=1){for(let n=0;n<l.outputChannelCount[t];n+=1)Object(i.a)(y,b[t],n,e+n,r);e+=l.outputChannelCount[t]}if(!e)break}catch(e){t.dispatchEvent(new ErrorEvent("processorerror",{error:e}));break}}return y},p=(t,e,n,o,i,r,s,a,c,u,p,f,d,m,y)=>(_,g,v)=>{const b=new WeakMap;let x=null;return{render(w,O,T){const S=b.get(O);return void 0!==S?Promise.resolve(S):(async(w,O,T)=>{let S=u(w),C=null;const k=Object(l.a)(S,O);if(null===p){const t=g.outputChannelCount.reduce((t,e)=>t+e,0),n=i(O,{channelCount:Math.max(1,t),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,t)}),r=[];for(let t=0;t<w.numberOfOutputs;t+=1)r.push(o(O,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:g.outputChannelCount[t]}));const c=0===g.numberOfOutputs?[n]:r,u=s(O,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1});u.connect=e.bind(null,c),u.disconnect=a.bind(null,c),C=[n,r,u]}else k||(S=new p(O,_));if(b.set(O,null===C?S:C[2]),null!==C){if(null===x){if(void 0===v)throw new Error("Missing the processor constructor.");if(null===f)throw new Error("Missing the native OfflineAudioContext constructor.");const t=w.channelCount*w.numberOfInputs,e=void 0===v.parameterDescriptors?0:v.parameterDescriptors.length,n=t+e,a=async()=>{const a=new f(n,128*Math.ceil(w.context.length/128),O.sampleRate),c=[],u=[];for(let t=0;t<g.numberOfInputs;t+=1)c.push(s(a,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1})),u.push(i(a,{channelCount:g.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:g.channelCount}));const l=await Promise.all(Array.from(w.parameters.values()).map(async t=>{const e=r(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:t.value});return await d(a,t,e.offset,T),e})),h=o(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,t+e)});for(let t=0;t<g.numberOfInputs;t+=1){c[t].connect(u[t]);for(let e=0;e<g.channelCount;e+=1)u[t].connect(h,e,t*g.channelCount+e)}for(const[e,n]of l.entries())n.connect(h,0,t+e),n.start(0);return h.connect(a.destination),await Promise.all(c.map(t=>m(w,a,t,T))),y(a)};x=h(w,0===n?null:await a(),O,g,v,c)}const t=await x,e=n(O),[a,u,l]=C;null!==t&&(e.buffer=t,e.start(0)),e.connect(a);for(let t=0,e=0;t<w.numberOfOutputs;t+=1){const n=u[t];for(let o=0;o<g.outputChannelCount[t];o+=1)a.connect(n,e+o,o);e+=g.outputChannelCount[t]}return l}if(k)for(const[e,n]of w.parameters.entries())await t(O,n,S.parameters.get(e),T);else for(const[t,e]of w.parameters.entries())await d(O,e,S.parameters.get(t),T);return await m(w,O,S,T),S})(w,O,T)}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(29);const i=(t,e,n,i,r,s,a,c,u,l,h,p,f)=>(d,m)=>{const y=a(d)?d:s(d);if(r.has(m)){const t=n();return Promise.reject(t)}try{r.add(m)}catch(t){}if(e(h,()=>h(y))){return("closed"===y.state&&null!==u&&c(y)?new u(1,1,y.sampleRate):y).decodeAudioData(m).catch(t=>{if(t instanceof DOMException&&"NotSupportedError"===t.name)throw new TypeError;throw t}).then(n=>(e(l,()=>l(n))||f(n),t.add(n),n))}return new Promise((e,n)=>{const r=()=>{try{(t=>{const{port1:e}=new MessageChannel;e.postMessage(t,[t])})(m)}catch(t){}},s=t=>{n(t),r()};try{y.decodeAudioData(m,n=>{"function"!=typeof n.copyFromChannel&&(p(n),Object(o.a)(n)),t.add(n),r(),e(n)},t=>{s(null===t?i():t)})}catch(t){s(t)}})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var o=n(24);const i=(t,e,n)=>function i(r,s){const a=Object(o.a)(s)?s:n(t,s);if((t=>"delayTime"in t)(a))return[];if(r[0]===a)return[r];if(r.includes(a))return[];const{outputs:c}=e(a);return Array.from(c).map(t=>i([...r,a],t[0])).reduce((t,e)=>t.concat(e),[])}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(37);const i={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},r=(t,e,n,r,s)=>class extends t{constructor(t,a){const c=r(t),u=s(c),l={...i,...a},h=e(c,u?null:t.baseLatency,l);super(t,!1,h,u?n(l.feedback,l.feedforward):null),(t=>{var e;t.getFrequencyResponse=(e=t.getFrequencyResponse,(n,i,r)=>{if(n.length!==i.length||i.length!==r.length)throw Object(o.a)();return e.call(t,n,i,r)})})(h),this._nativeIIRFilterNode=h}getFrequencyResponse(t,e,n){return this._nativeIIRFilterNode.getFrequencyResponse(t,e,n)}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=(t,e,n,o,i)=>(r,s,a,c,u,l)=>{if(null!==a)try{const n=e(r,t=>i(t)&&0!==l.numberOfInputs&&0===l.numberOfOutputs?new a(t,c,{...l,numberOfOutputs:1,outputChannelCount:[1],parameterData:{...l.parameterData,hasNoOutput:1}}):new a(t,c,l)),o=new Map;let s=null;return Object.defineProperties(n,{channelCount:{get:()=>l.channelCount,set:()=>{throw t()}},channelCountMode:{get:()=>"explicit",set:()=>{throw t()}},onprocessorerror:{get:()=>s,set:t=>{"function"==typeof s&&n.removeEventListener("processorerror",s),s="function"==typeof t?t:null,"function"==typeof s&&n.addEventListener("processorerror",s)}}}),n.addEventListener=(p=n.addEventListener,(...t)=>{if("processorerror"===t[0]){const e="function"==typeof t[1]?t[1]:"object"==typeof t[1]&&null!==t[1]&&"function"==typeof t[1].handleEvent?t[1].handleEvent:null;if(null!==e){const n=o.get(t[1]);void 0!==n?t[1]=n:(t[1]=n=>{e(new ErrorEvent(t[0],{...n,error:new Error}))},o.set(e,t[1]))}}return p.call(n,t[0],t[1],t[2])}),n.removeEventListener=(h=n.removeEventListener,(...t)=>{if("processorerror"===t[0]){const e=o.get(t[1]);void 0!==e&&(o.delete(t[1]),t[1]=e)}return h.call(n,t[0],t[1],t[2])}),n}catch(t){if(11===t.code)throw o();throw t}var h,p;if(void 0===u)throw o();return(t=>{const{port1:e}=new MessageChannel;try{e.postMessage(t)}finally{e.close()}})(l),n(r,s,u,l)}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r}));var o=n(1),i=n(7);const r=t=>(e,n)=>{const r=t(e,t=>t.createChannelSplitter(n.numberOfOutputs));return Object(o.a)(r,n),(t=>{const e=t.numberOfOutputs;Object.defineProperty(t,"channelCount",{get:()=>e,set:t=>{if(t!==e)throw Object(i.a)()}}),Object.defineProperty(t,"channelCountMode",{get:()=>"explicit",set:t=>{if("explicit"!==t)throw Object(i.a)()}}),Object.defineProperty(t,"channelInterpretation",{get:()=>"discrete",set:t=>{if("discrete"!==t)throw Object(i.a)()}})})(r),r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(655);const o=n(659),i=n(45),r=n(668),s=n(669),a=(new o.Audio).setup(),c=new r.Database;a.setOptions(c.getOptions());const u=new i.GUI.Element("h1").setText("Chord.pin"),l=new s.MenuSettings(c,a),h=new s.Fretboard(c,a),p=new s.MenuPlayer(c,a,h),f=new s.Prompt("prompt",a,c);f.parser.subscribe(h.notifyHandler.bind(h)),f.parser.subscribe(l.settings.notifyHandler.bind(l.settings)),l.subscribe(h.notifyHandler.bind(h));new i.GUI.Element("div","","chord-pin").parentElements([u.htmlElement,l.htmlElement,h.htmlElement,p.htmlElement]);window.addEventListener("beforeunload",c.saveToLocalStorage),window.addEventListener("beforeunload",a.dispose)},function(t,e,n){var o=n(656),i=n(657);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[t.i,i,""]]);var r={insert:"head",singleton:!1};o(i,r);t.exports=i.locals||{}},function(t,e,n){"use strict";var o,i=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function a(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},o=[],i=0;i<t.length;i++){var r=t[i],c=e.base?r[0]+e.base:r[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var h=a(l),p={css:r[1],media:r[2],sourceMap:r[3]};-1!==h?(s[h].references++,s[h].updater(p)):s.push({identifier:l,updater:y(p,e),references:1}),o.push(l)}return o}function u(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,h=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function p(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=h(e,i);else{var r=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function f(t,e,n){var o=n.css,i=n.media,r=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),r&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,m=0;function y(t,e){var n,o,i;if(e.singleton){var r=m++;n=d||(d=u(e)),o=p.bind(null,n,r,!1),i=p.bind(null,n,r,!0)}else n=u(e),o=f.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=a(n[o]);s[i].references--}for(var r=c(t,e),u=0;u<n.length;u++){var l=a(n[u]);0===s[l].references&&(s[l].updater(),s.splice(l,1))}n=r}}}},function(t,e,n){(e=n(658)(!1)).push([t.i,"@import url(https://fonts.googleapis.com/css2?family=Montserrat&display=swap);"]),e.push([t.i,'html{font-family:\'Montserrat\', sans-serif;color:#303030}html input{font-family:"Montserrat"}#prompt{border:0px solid black;font-size:32px}#prompt:focus{border:0px solid black;outline:0px solid black}.note{font-size:24px;background-color:#eee;color:#666;display:flex;flex-wrap:wrap;flex-direction:column;justify-content:space-around;align-items:center;margin:2.5px;margin-top:0px;height:75px}.note:hover{cursor:pointer;background-color:#ddd}.note:hover .setting-container{background-color:#eee}.note .settings:hover{cursor:default}#openString{background-color:#ddd;display:flex;align-content:flex-start;padding-right:15px}#openString .note{flex:1}#openString .note .note-selected{background-color:#ffebcd}.settings{position:relative;display:flex;flex-direction:column;height:60%;overflow-y:scroll;background-color:#eee;scroll-snap-type:x proximity}.settings input[type="number"],.settings input[type="range"]{position:relative;font-size:10px;flex:auto;left:7px;margin-right:8px}.settings input[type="range"]{width:calc(100% - 25px)}.settings .setting-container{display:flex;height:32px;margin:2px}.settings img{width:32px;height:32px}.settings::-webkit-scrollbar{display:none}.settings::-webkit-scrollbar-track{display:none}.settings::-webkit-scrollbar-thumb{display:none}.settings::-webkit-scrollbar-thumb:hover{display:none}.icon{width:32px;height:32px}.string{display:inline-flex;flex:1;flex-direction:column}.note-selected{background-color:#ffebcd}tr,td{width:25px;height:25px;border:1px black solid}#board{min-width:300px}#fretboard{align-content:flex-start;align-items:flex-start;overflow-x:hidden;display:flex;max-height:375px;overflow-y:scroll;scroll-snap-type:y proximity}#fretboard::-webkit-scrollbar{width:15px}#fretboard::-webkit-scrollbar-track{background:#ddd}#fretboard::-webkit-scrollbar-thumb{background:#888}#fretboard::-webkit-scrollbar-thumb:hover{background:#FFA552}.important-note-selected{background-color:#FFA552}.hidden{display:none !important}\n',""]),t.exports=e},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",o=t[3];if(!o)return n;if(e&&"function"==typeof btoa){var i=(s=o,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),r=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[n].concat(r).concat([i]).join("\n")}var s,a,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(o)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Audio=void 0;const o=n(46),i=n(38);e.Audio=class{constructor(){this.setup(),this.part=new o.Part}setOptions(t){return this.options=t}updateChord(t){return this.chord=t}setChord(t){return this.chord=t}getChord(){return this.chord}addNote(t){return this.chord.notes.unshift(t),this.chord}deleteNote(t){return this.chord.notes=this.chord.notes.filter(e=>e.fretboardPosition!=t.fretboardPosition),this.chord}deleteAllNoteInstances(t){return this.chord.notes=this.chord.notes.filter(e=>e.name!=t.name),this.chord}setup(){return this.chord=new i.Chord([]),this.instrument=new o.PolySynth(o.Synth,{oscillator:{type:"triangle8"}}).toDestination(),this}dispose(){var t;null===(t=this.instrument)||void 0===t||t.dispose(),this.instrument=null}play(t=this.chord){let e=this.options.volume;this.stop(),this.part=new o.Part((t,e)=>{this.instrument.triggerAttackRelease(e.note,e.dur,t,e.volume)},[]),t.notes.forEach(t=>{t.options=(new i.Options).setValues(t.options),this.part.add(t.options.delay,{note:t.name,dur:t.options.duration,volume:t.options.volume*e})}),o.Destination.mute=!1,this.part.start(0),this.part.loop=0,o.Transport.start()}stop(){this.part.stop(),o.Destination.mute=!0,o.Transport.stop(),o.Transport.cancel()}}},function(t,e,n){var o=n(661),i=n(662),r=n(663),s=n(665);t.exports=function(t,e){return o(t)||i(t,e)||r(t,e)||s()}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){i=!0,r=t}finally{try{o||null==a.return||a.return()}finally{if(i)throw r}}return n}}},function(t,e,n){var o=n(664);t.exports=function(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}t.exports=function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Database=void 0;const o=n(38);e.Database=class{constructor(){this.storage=localStorage,this.loadFromLocalStorage(),this.toNotify=new Array}loadFromLocalStorage(){try{this.chords=JSON.parse(localStorage.getItem("ChordPin_Chord"));let t=JSON.parse(localStorage.getItem("ChordPin_Options"));this.globalOptions=(new o.Options).setValues(t)}catch(t){console.log("LOADING FROM LOCAL STORAGE FAILED"),alert("FAIL")}return null!=this.chords&&null!=this.globalOptions||(this.chords=new Array),null!=this.globalOptions&&null!=this.globalOptions||(this.globalOptions=new o.Options),this}saveToLocalStorage(){return this.storage.setItem("ChordPin_Chord",JSON.stringify(this.chords)),this.storage.setItem("ChordPin_Options",this.globalOptions.serialize()),this}addChord(t){return null==this.chords.find(e=>e.name==t.name||e.notes==t.notes)&&this.chords.push(t),this.saveToLocalStorage(),this.notify(),this}deleteChord(t){return this.chords=this.chords.filter(e=>e.name!=t),this.saveToLocalStorage(),this.notify(),this}notify(){return this.toNotify.forEach(t=>{t()}),this}subscribe(t){return this.toNotify.push(t),this}unsubscribe(t){return this.toNotify=this.toNotify.filter(e=>e.name!=t.name),this}getChords(){return this.chords}getChord(t){return this.chords.find(e=>e.name===t)}getOptions(){return this.globalOptions}setOptions(t){return this.globalOptions=t,this.saveToLocalStorage(),this}clear(){this.chords=new Array,this.globalOptions=new o.Options,this.saveToLocalStorage()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Prompt=e.MenuSettings=e.MenuPlayer=e.ChordDelete=e.ChordPlayer=e.ChordSelector=e.ChordAdd=e.Fretboard=void 0;const o=n(670),i=n(45),r=n(38),s=n(46),a=n(671);class c extends i.GUI.Element{constructor(t,e){var n;super("div","","board"),this.stringAmount=6,this.frets=25,this.startingFrequencyNote=["E2","A2","D3","G3","B3","E4"],this.noteBoardName="fretboard",this.noteDisplayed=new Array;let o=null!==(n=t.getOptions())&&void 0!==n?n:new r.Options,s=0;this.parentElements([new i.GUI.Element("div","","openString").htmlElement,new i.GUI.Element("div","",this.noteBoardName).htmlElement]);let a=this.startingFrequencyNote[0];for(let t=1;t<this.stringAmount+1;t++){new i.GUI.Element("div","string","string-"+t,"#"+this.noteBoardName);for(let n=0;n<this.frets;n++)a=this.createNoteEl(t,n,a,e,o,s++);a=this.startingFrequencyNote[t]}}createNoteEl(t,e,n,o,i,c){let u="#string-"+t;0==e&&(u="#openString");let l=new a.NoteDisplay("note",n.replace("#","S").concat("-string-"+t),u,null,null,new r.Note(n,(new r.Options).setValues(i),c));return this.setDefaultOptions(l,i),l=this.SetupNote(l,n,o),this.noteDisplayed.push(l),n=s.Frequency(n).transpose(1).toNote()}setDefaultOptions(t,e){t.note.options.delay=e.delay,t.note.options.duration=e.duration}SetupNote(t,e,n){return t.addListener("click",t.toggle.bind(t)).addListener("mouseover",t.showOptions.bind(t)).addListener("mouseout",t.hideOptions.bind(t)).setText(e.replace("S","#")).setup(n),t}changeDefaults(t){this.noteDisplayed.forEach(e=>{e.htmlElement.classList.contains("important-note-selected")||e.updateOptions(t)})}notifyHandler(t){t instanceof r.Options&&this.changeDefaults(t),t instanceof r.Chord&&this.selectChord(t,!0)}selectChord(t,e=!0){try{if(null!=t)return this.clearSelection(),t.notes.forEach(t=>{-1!=t.fretboardPosition?e?this.noteDisplayed.find(e=>e.note.fretboardPosition==t.fretboardPosition).select(t):this.noteDisplayed.find(e=>e.note.fretboardPosition==t.fretboardPosition).select():e?this.noteDisplayed.find(e=>e.note.name==t.name).select(t):this.noteDisplayed.find(e=>e.note.name==t.name).select()}),this}catch(t){console.log(t)}}clearSelection(){return this.noteDisplayed.forEach(t=>{t.deselect()}),this}}e.Fretboard=c;class u extends i.GUI.Element{constructor(t,e){super("div",""),this.database=t,this.audio=e,this.add_button=new i.GUI.Element("div","icon","","","https://img.icons8.com/windows/32/000000/plus-math.png","click",this.addChord.bind(this)),this.input=new i.GUI.InputElement("input"),this.parentElements([this.add_button.htmlElement,this.input.htmlElement])}addChord(){let t=this.input.getValue(),e=this.audio.getChord();e.notes=e.notes.sort(t=>t.fretboardPosition),null==e||e.notes.length<1||("null"!=t&&""!=t||(t="Chord "+e.returnContent().trim()),this.database.addChord(new r.Chord(e.notes,t,"")))}}e.ChordAdd=u;class l extends i.GUI.Element{constructor(t,e,n){super("select",""),this.database=t,this.fretboard=e,this.database.subscribe(this.getListFromDatabase.bind(this)),this.getListFromDatabase(),this.addListener("change",this.select.bind(this)),this.addListener("change",n.stop.bind(n)),null==this||this.select()}getCurrentSelection(){var t;return null===(t=this.htmlElement.selectedOptions[0])||void 0===t?void 0:t.value}getListFromDatabase(){return this.clearSelectables(),this.database.getChords().forEach(t=>{let e=new a.ChordContainer(t);this.parentElements([e.htmlElement])}),this.select(),this}select(){let t=this.getCurrentSelection(),e=this.database.getChord(t);return null!=e&&this.fretboard.selectChord(e,!0),this}clearSelectables(){this.fretboard.clearSelection(),this.htmlElement.childNodes.forEach(t=>{this.htmlElement.removeChild(t)})}deleteSelected(){this.database.deleteChord(this.getCurrentSelection()),this.htmlElement.options.remove(this.htmlElement.selectedIndex)}}e.ChordSelector=l;class h extends i.GUI.Element{constructor(t){super("div","icon","","body","https://img.icons8.com/ios-glyphs/32/000000/play.png"),this.audio=t,this.addListener("click",this.play.bind(this))}play(){this.audio.play()}}e.ChordPlayer=h;class p extends i.GUI.Element{constructor(t){super("div",""),this.chordSelector=t,this.delete_button=new i.GUI.Element("div","icon","","","https://img.icons8.com/windows/32/000000/minus-math.png","click",this.deleteChord.bind(this)),this.parentElements([this.delete_button.htmlElement])}deleteChord(){this.chordSelector.deleteSelected()}}e.ChordDelete=p;class f extends i.GUI.Element{constructor(t,e,n){super("div","Menu"),this.chordSelector=new l(t,n,e),this.chordAdd=new u(t,e),this.chordDelete=new p(this.chordSelector),this.player=new h(e),this.parentElements([this.chordSelector.htmlElement,this.chordAdd.htmlElement,this.chordDelete.htmlElement,this.player.htmlElement])}}e.MenuPlayer=f;class d extends i.GUI.Element{constructor(t,e){super("div"),this.database=t,this.audio=e,this.settings=new a.SettingsDisplay(t.getOptions()),this.parentElements([this.settings.htmlElement]),this.toNotify=new Array,this.settings.el_duration.addListener("change",this.registerChange.bind(this)),this.settings.el_delay.addListener("change",this.registerChange.bind(this)),this.settings.el_volume.addListener("change",this.registerChange.bind(this))}notify(t){return this.toNotify.forEach(e=>{e(t)}),this}subscribe(t){return this.toNotify.push(t),this}unsubscribe(t){return this.toNotify=this.toNotify.filter(e=>e.name!=t.name),this}saveToDatabase(){this.database.setOptions(this.settings.options)}registerChange(){this.notify(this.settings.options),this.audio.setOptions(this.settings.options),this.saveToDatabase()}}e.MenuSettings=d;class m extends i.GUI.Element{constructor(t,e,n){super("input","input",t),this.parser=new o.Parser(this.htmlElement,n),this.audio=e,this.htmlElement.setAttribute("placeholder","...write command here")}notify(t){this.htmlElement.value=t}apply(){return this}}e.Prompt=m},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Parser=void 0;const o=n(38);var i,r;!function(t){t.S_CHORD="{",t.S_OPTIONS="("}(i||(i={})),function(t){t.S_CHORD="}",t.S_OPTIONS=")"}(r||(r={}));let s=(()=>{class t{constructor(t,e){this.prompt=t,this.prompt.addEventListener("keydown",t=>{this.getOutput(t,this.prompt.value)},!0),this.database=e,this.toNotify=new Array}getOutput(e,n){if("Enter"==e.key&&null!=n&&""!=n){if(this.HandleLoadProcedure(n))return;{let e=!1,o=n.indexOf(t.S_SAVE),s="";o>=2&&(s=n.slice(o+t.S_SAVE.length,n.length),n=n.slice(0,o+1).replace(">","")),n=n.toUpperCase();let a=new Array;o=n.indexOf(i.S_CHORD);let c=this.database.getOptions();for(;-1!=o;){let e=t.getGroup(n,i.S_CHORD,r.S_CHORD);if(o=(n=n.replace(e,"")).indexOf(i.S_CHORD),n.indexOf(i.S_OPTIONS)<o){let e=t.getGroup(n,i.S_OPTIONS,r.S_OPTIONS);n=n.replace(e,""),c=t.getOptions(e,c)}a.unshift(t.parseChord(e,c)),console.log(a)}if(o=n.indexOf(i.S_OPTIONS),o>-1){let o=t.getGroup(n,i.S_OPTIONS,r.S_OPTIONS);n=n.replace(o,""),c=t.getOptions(o),e=!0}let u=t.parseChord(n,c);a.forEach(t=>{u.addChord(t)}),s.length>0&&this.saveChordToDatabase(u,s),u.notes.length>0?this.notify(u):e&&(this.database.setOptions(c),this.notify(c))}}}static parseChord(e,n){let s=0,a=t.clearGroups(e,i.S_CHORD,r.S_CHORD),c=a.length,u=new o.Chord([]);for(;s<c;){s=a.indexOf(this.S_CHORD_CONCAT),s<2&&(s=c);let t=a.slice(0,s).replace(this.S_CHORD_CONCAT,"");""!=t.trim()&&u.notes.push(this.parseNote(t,n)),a=a.slice(s+1,c)}return u}static clearGroups(t,e,n){return t=t.replace(e,"").replace(n,"")}static parseNote(e,n){let s=t.getGroup(e,i.S_OPTIONS,r.S_OPTIONS),a=this.getOptions(s,n);e=e.replace(s,"");let c=t.getNoteName(e);e=e.replace(c,"").replace(i.S_CHORD,"").replace(r.S_CHORD,"");let u=t.calculateTransposition(e,0);return new o.Note(c,a,-1,u)}HandleLoadProcedure(e){let n=e.indexOf(t.S_LOADING);return n>=0&&(this.chord=this.loadChordFromDatabase(e,n),!0)}saveChordToDatabase(e,n){if(null==e||e.notes.length<1)throw"EMPTY CHORD";let o=n.search(t.S_PARAMETER_NEXT),i="";o>=0?i=n.slice(o+1,n.length).trim():o=n.length;let r=n.slice(2,o).trim();e.name=r,e.description=i,this.database.addChord(e)}loadChordFromDatabase(e,n){let o=e.slice(n,t.S_LOADING.length),i=e.replace(o,"").trim();return this.database.getChord(i)}static getGroup(t,e,n){let o="",i=t.indexOf(e),r=t.indexOf(n);if(-1==i){if(i=0,-1==r)return"";r=t.length}else-1==r&&(r=t.length);return o=t.slice(i,r+1),o}static getNoteName(t){return(t=t.toUpperCase()).slice(t.search(/([ABCDEFG])/g),t.search(/[0-9]/g)+1)}static calculateTransposition(t,e){if((t=t.trim()).length>0){let n=0,o="";for(let i=0;i<t.length;i++)try{"+"==t[i]?(n=1,""!=o&&(e+=parseInt(o.trim().replace(/[^0-9]/g,""))*n,o="")):"-"==t[i]?(n=-1,""!=o&&(e+=parseInt(o.trim().replace(/[^0-9]/g,""))*n,o="")):(o+=t[i],o.trim()),i==t.length-1&&(e+=parseInt(o.trim().replace(/[^0-9]/g,""))*n)}catch(t){alert(t)}}return e}static getOptions(t,e=new o.Options){t=t.toLowerCase();let n=e,i=this.getOptionNumberValue(this.S_DURATION,t),r=this.getOptionNumberValue(this.S_DELAY,t),s=this.getOptionNumberValue(this.S_VOLUME,t);return""!=i&&null!=i&&(n.duration=this.getDuration(i)),""!=r&&null!=r&&(n.delay=this.getDelay(r)),""!=s&&null!=s&&(n.volume=this.getVolume(s)),n}static getOptionNumberValue(t,e){let n=e.indexOf(t);if(n>=0){let o=e.slice(n,e.length).search(this.S_PARAMETER_NEXT);if(o>=0){return e.slice(n+t.length-1,o).replace(/([^0-9.])/g,"").trim()}return e.slice(n+t.length-1,e.length).replace(/([^0-9.])/g,"").trim()}}static getDuration(t){return Number.parseFloat(t)}static getDelay(t){return Number.parseFloat(t)}static getVolume(t){return Number.parseFloat(t)}static getGlobals(t=null){return new o.Options}notify(t=null){return this.toNotify.forEach(e=>e(t)),this}subscribe(t){return this.toNotify.push(t),this}unsubscribe(t){return this.toNotify=this.toNotify.filter(e=>e.name!=t.name),this}}return t.S_LOADING="<<",t.S_SAVE=">>",t.S_DELAY="d:",t.S_DURATION="t:",t.S_VOLUME="v:",t.S_CHORD_CONCAT="^",t.S_STEP_SUB="-",t.S_STEP_ADD="+",t.S_PARAMETER_NEXT=",",t})();e.Parser=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SettingsDisplay=e.NoteDisplay=e.ChordContainer=void 0;const o=n(45),i=n(38);class r extends o.GUI.Element{constructor(t){super("option"),this.chord=t,this.modifyAttribute("value",""+t.name),this.setText(""+t.name)}}e.ChordContainer=r;class s extends o.GUI.Element{constructor(t,e=null,n="body",o,i,r){super("div",t,e,n,"",o,i),this.selected=!1,this.settings=new a(r.options).addListener("click",(function(t){t.stopPropagation()})),this.settings.htmlElement.classList.add("hidden"),this.note=r}updateOptions(t){this.note.options=t,this.settings.setOptions(t)}setup(t){return this.audio=t,this.parentElements([this.settings.htmlElement]),this}showOptions(){this.settings.htmlElement.classList.remove("hidden")}hideOptions(){this.settings.htmlElement.classList.add("hidden")}clear(){document.querySelectorAll("note-selected").forEach(t=>{t.classList.remove("note-selected"),t.classList.remove("important-note-selected")})}select(t=null){this.htmlElement.classList.add("note-selected","important-note-selected"),document.querySelectorAll(`div[id*="${this.note.name.replace("#","S")}"]`).forEach(t=>{t.classList.add("note-selected")}),null!=t&&(this.note=t,this.settings.setOptions(t.options)),this.audio.addNote(this.note)}deselect(){this.htmlElement.classList.remove("note-selected","important-note-selected");let t=document.querySelectorAll(`div.important-note-selected[id*="${this.note.name.replace("#","S")}"]`);0==t.length&&(t=document.querySelectorAll(`div[id*="${this.note.name.replace("#","S")}"]`),t.forEach(t=>{t.classList.remove("note-selected")})),this.audio.deleteNote(this.note)}toggle(){this.htmlElement.classList.contains("important-note-selected")?this.deselect():this.select()}}e.NoteDisplay=s;class a extends o.GUI.Element{constructor(t,e="div",n="settings",o=null,r="body"){super(e,n,o,r),this.options=null!=t?t:new i.Options,this.createVolume(),this.createDuration(),this.createDelay(),this.el_delay.modifyAttribute("placeholder",""+this.options.delay),this.el_duration.modifyAttribute("placeholder",""+this.options.duration),this.setOptions(this.options)}notifyHandler(t){t instanceof i.Options&&this.setOptions(t)}setOptions(t){return this.options.setValues(t),this.el_volume.htmlElement.value=this.options.volume,this.el_delay.htmlElement.value=this.options.delay,this.el_duration.htmlElement.value=this.options.duration,this}updateVolume(){return this.options.volume=this.el_volume.htmlElement.value,this}updateDuration(){return this.options.duration=this.el_duration.htmlElement.value,this}updateDelay(){return this.options.delay=this.el_delay.htmlElement.value,this}createSettings(t,e,n,i){let r=new o.GUI.Element("img").modifyAttribute("src",i),s=new o.GUI.Element(t,e,n),a=new o.GUI.Element("div","setting-container");return a.parentElements([r.htmlElement,s.htmlElement]),this.parentElements([a.htmlElement]),s}createDelay(){this.el_delay=this.createSettings("input","","","https://img.icons8.com/windows/32/000000/add-time.png").modifyAttribute("type","number").modifyAttribute("min","0").modifyAttribute("max","10").modifyAttribute("step","0.01").addListener("change",this.updateDelay.bind(this))}createDuration(){this.el_duration=this.createSettings("input","","","https://img.icons8.com/windows/32/000000/time-slider.png").modifyAttribute("type","number").modifyAttribute("min","0").modifyAttribute("max","10").modifyAttribute("step","0.01").addListener("change",this.updateDuration.bind(this))}createVolume(){this.el_volume=this.createSettings("input","","","https://img.icons8.com/windows/32/000000/speaker.png").modifyAttribute("type","range").modifyAttribute("min","0").modifyAttribute("max","1").modifyAttribute("step","0.01").addListener("change",this.updateVolume.bind(this))}}e.SettingsDisplay=a},,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Library=void 0;e.Library=class{static checkStringForNull(t){return""!=t&&null!=t}static clamp(t,e,n){return t>n&&(t=n),t<e&&(t=e),t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,